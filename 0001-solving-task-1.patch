From 0d55c110852665886b0cff58c33449f1c332d59d Mon Sep 17 00:00:00 2001
From: iLinx007 <ahiadulincoln@gmail.com>
Date: Thu, 4 Jul 2024 14:26:40 +0400
Subject: [PATCH] solving task 1

---
 client3.py                                    |    8 +-
 .../__pycache__/six.cpython-312.pyc           |  Bin 0 -> 41281 bytes
 venv/Lib/site-packages/dateutil/__init__.py   |    8 +
 .../__pycache__/__init__.cpython-312.pyc      |  Bin 0 -> 434 bytes
 .../__pycache__/_common.cpython-312.pyc       |  Bin 0 -> 1947 bytes
 .../__pycache__/_version.cpython-312.pyc      |  Bin 0 -> 269 bytes
 .../__pycache__/easter.cpython-312.pyc        |  Bin 0 -> 2870 bytes
 .../__pycache__/relativedelta.cpython-312.pyc |  Bin 0 -> 28384 bytes
 .../__pycache__/rrule.cpython-312.pyc         |  Bin 0 -> 69242 bytes
 .../__pycache__/tzwin.cpython-312.pyc         |  Bin 0 -> 229 bytes
 .../__pycache__/utils.cpython-312.pyc         |  Bin 0 -> 2582 bytes
 venv/Lib/site-packages/dateutil/_common.py    |   43 +
 venv/Lib/site-packages/dateutil/_version.py   |    5 +
 venv/Lib/site-packages/dateutil/easter.py     |   89 +
 .../site-packages/dateutil/parser/__init__.py |   61 +
 .../__pycache__/__init__.cpython-312.pyc      |  Bin 0 -> 2676 bytes
 .../__pycache__/_parser.cpython-312.pyc       |  Bin 0 -> 61869 bytes
 .../__pycache__/isoparser.cpython-312.pyc     |  Bin 0 -> 15616 bytes
 .../site-packages/dateutil/parser/_parser.py  | 1613 ++++++++++++++
 .../dateutil/parser/isoparser.py              |  416 ++++
 .../site-packages/dateutil/relativedelta.py   |  599 ++++++
 venv/Lib/site-packages/dateutil/rrule.py      | 1737 ++++++++++++++++
 .../Lib/site-packages/dateutil/tz/__init__.py |   12 +
 .../tz/__pycache__/__init__.cpython-312.pyc   |  Bin 0 -> 729 bytes
 .../tz/__pycache__/_common.cpython-312.pyc    |  Bin 0 -> 14182 bytes
 .../tz/__pycache__/_factories.cpython-312.pyc |  Bin 0 -> 4615 bytes
 .../tz/__pycache__/tz.cpython-312.pyc         |  Bin 0 -> 66048 bytes
 .../tz/__pycache__/win.cpython-312.pyc        |  Bin 0 -> 17285 bytes
 venv/Lib/site-packages/dateutil/tz/_common.py |  419 ++++
 .../site-packages/dateutil/tz/_factories.py   |   80 +
 venv/Lib/site-packages/dateutil/tz/tz.py      | 1849 +++++++++++++++++
 venv/Lib/site-packages/dateutil/tz/win.py     |  370 ++++
 venv/Lib/site-packages/dateutil/tzwin.py      |    2 +
 venv/Lib/site-packages/dateutil/utils.py      |   71 +
 .../dateutil/zoneinfo/__init__.py             |  167 ++
 .../__pycache__/__init__.cpython-312.pyc      |  Bin 0 -> 7452 bytes
 .../__pycache__/rebuild.cpython-312.pyc       |  Bin 0 -> 3978 bytes
 .../zoneinfo/dateutil-zoneinfo.tar.gz         |  Bin 0 -> 174394 bytes
 .../dateutil/zoneinfo/rebuild.py              |   75 +
 .../python_dateutil-2.8.2.dist-info/INSTALLER |    1 +
 .../python_dateutil-2.8.2.dist-info/LICENSE   |   54 +
 .../python_dateutil-2.8.2.dist-info/METADATA  |  204 ++
 .../python_dateutil-2.8.2.dist-info/RECORD    |   45 +
 .../python_dateutil-2.8.2.dist-info/REQUESTED |    0
 .../python_dateutil-2.8.2.dist-info/WHEEL     |    6 +
 .../top_level.txt                             |    1 +
 .../python_dateutil-2.8.2.dist-info/zip-safe  |    1 +
 .../six-1.16.0.dist-info/INSTALLER            |    1 +
 .../six-1.16.0.dist-info/LICENSE              |   18 +
 .../six-1.16.0.dist-info/METADATA             |   49 +
 .../site-packages/six-1.16.0.dist-info/RECORD |    8 +
 .../site-packages/six-1.16.0.dist-info/WHEEL  |    6 +
 .../six-1.16.0.dist-info/top_level.txt        |    1 +
 venv/Lib/site-packages/six.py                 |  998 +++++++++
 54 files changed, 9014 insertions(+), 3 deletions(-)
 create mode 100644 venv/Lib/site-packages/__pycache__/six.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__init__.py
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/__init__.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/_common.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/_version.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/easter.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/relativedelta.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/rrule.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/tzwin.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/utils.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/_common.py
 create mode 100644 venv/Lib/site-packages/dateutil/_version.py
 create mode 100644 venv/Lib/site-packages/dateutil/easter.py
 create mode 100644 venv/Lib/site-packages/dateutil/parser/__init__.py
 create mode 100644 venv/Lib/site-packages/dateutil/parser/__pycache__/__init__.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/parser/__pycache__/_parser.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/parser/__pycache__/isoparser.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/parser/_parser.py
 create mode 100644 venv/Lib/site-packages/dateutil/parser/isoparser.py
 create mode 100644 venv/Lib/site-packages/dateutil/relativedelta.py
 create mode 100644 venv/Lib/site-packages/dateutil/rrule.py
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__init__.py
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__pycache__/__init__.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__pycache__/_common.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__pycache__/_factories.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__pycache__/tz.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__pycache__/win.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/tz/_common.py
 create mode 100644 venv/Lib/site-packages/dateutil/tz/_factories.py
 create mode 100644 venv/Lib/site-packages/dateutil/tz/tz.py
 create mode 100644 venv/Lib/site-packages/dateutil/tz/win.py
 create mode 100644 venv/Lib/site-packages/dateutil/tzwin.py
 create mode 100644 venv/Lib/site-packages/dateutil/utils.py
 create mode 100644 venv/Lib/site-packages/dateutil/zoneinfo/__init__.py
 create mode 100644 venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/__init__.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/rebuild.cpython-312.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/zoneinfo/dateutil-zoneinfo.tar.gz
 create mode 100644 venv/Lib/site-packages/dateutil/zoneinfo/rebuild.py
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/INSTALLER
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/LICENSE
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/METADATA
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/RECORD
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/REQUESTED
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/WHEEL
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/top_level.txt
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/zip-safe
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/INSTALLER
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/LICENSE
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/METADATA
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/RECORD
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/WHEEL
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/top_level.txt
 create mode 100644 venv/Lib/site-packages/six.py

diff --git a/client3.py b/client3.py
index 3fc09b7..c42a47d 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,16 @@ def getDataPoint(quote):
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price)/2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if (price_b == 0):
+        return
+    return price_a/price_b
 
 
 # Main
@@ -56,4 +58,4 @@ if __name__ == "__main__":
             stock, bid_price, ask_price, price = getDataPoint(quote)
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
diff --git a/venv/Lib/site-packages/__pycache__/six.cpython-312.pyc b/venv/Lib/site-packages/__pycache__/six.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..44905793e169aa352835ed924258a068f8bd80ee
GIT binary patch
literal 41281
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
QCUPqr7wavb)S2M^e@zl&V*mgE

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__init__.py b/venv/Lib/site-packages/dateutil/__init__.py
new file mode 100644
index 0000000..0defb82
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/__init__.py
@@ -0,0 +1,8 @@
+# -*- coding: utf-8 -*-
+try:
+    from ._version import version as __version__
+except ImportError:
+    __version__ = 'unknown'
+
+__all__ = ['easter', 'parser', 'relativedelta', 'rrule', 'tz',
+           'utils', 'zoneinfo']
diff --git a/venv/Lib/site-packages/dateutil/__pycache__/__init__.cpython-312.pyc b/venv/Lib/site-packages/dateutil/__pycache__/__init__.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..c1c456c791553f592fa09cc4f1d50554ff9e6d6b
GIT binary patch
literal 434
zcmXv~zb^zq6n=BNd%K)dP$*m>p*hL=k*Gv82tue7E|W~g?HuEFXErmlcjzcowDdZE
zi+?~Sp;75BG;)>Mgs*r%lJC9meeb1S9|ebDcH4P(`J-(9;r|uiE3SBi5lA3GDP*Ws
zL2wF*_k>#hr9TVIn*$XfNGh$$G2D&!;lewHK57P^$c;9U4SP&!E`<#X(G{{UnxU;S
zstr@Nnp34+t}B*O!+R`Ysi8Jdsz{lwm@69;hNs#_S5h!8I`W_y*ogeCRGyQtHS*sR
zVr#ouE|u9*N-7%?LerFxXZSAt47(ev_{iyLOwTw?@S$Lv%BkW_*)B3BjK<sC>=Y-s
zBNaVm@p+!LW8G)5p}HF{;~o<|yw6Xt=7z;NZFe0@<AfSk-nmE!7u*oCkY5g?wM-_?
z#=4qx+T}C!ybA*lAvEwk)Ohokz9Lkcxek8@Aw-j3fKcOgV)|yU<TQqQ%+YVEb+`|w
JyazPp{Q@xtg+u@V

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/_common.cpython-312.pyc b/venv/Lib/site-packages/dateutil/__pycache__/_common.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ede99de4b660fca133aa7310f6fe873b946018a1
GIT binary patch
literal 1947
zcmZ`)%}*Og6rY*>@COD=O$)RU+VT-%zS7W&NNI&cfrP3JkxEb%%j#;`T?d0d$jlmQ
zY9v&l%0#JBPNt_OQl$uSAt%~X)pIW-y|}9$BK03|aVk}u`exUd*mXzp+c)oH-n`$u
z_xx*fvme1aO@1BwK|ttFzByY`g(-IfQ$PlaAcAfn18*aPnD_wf`HGON5EeHE{8Q;<
zGM!TNv|%b4W*SO7r6e;6E54dAm1Nq;BuqBy*Ih4{lFFuh4VVHlQ3OL6VnC3)BqA6-
zL)gX<(Ga&$L^33xvLOTY7#^Tr!wb}xC1JnqSvSoUL(AGYHK$i@<{ZvL@O@bUQb0MJ
zLn?6Y$`RP%vt1VL<GFo8xj7Yqgaun<W+HYjVO*yu%IWgdwdevfDT``Lam|R{N}1C%
zzGg<J(|RUprYsh{5w~VDi_ut`YIn_%<<+D<!q&|ZOJge|SE6fXYAyOnd@;)6mN~Mj
z=__ExqK0Of87rQ+tm+P&qpMlltE%x-+)~wzU?t1ZGl>tb!-7DzP_d&sFFptq+g{6y
z-^gW<A^i+rzTpWuKtzFYfmr79y0vl%k_TAkQ4TG0`?>{Eep21a;e$%7c|>JUh6M*f
z+o!5}LSsx-9T3BWdO_>x823;V%5&g3>RKXEo1-gf20a@90y#DXz7-4du6+OfVyGkk
z@rzJLVPbdUQQwo{$HRyCx6s&eV2n0_ZR6A*fTn<aJT>6zR}MFlu3UxiUEuL5m=#y>
zXdvYt6lbvyWl1lxs&MroDqwU6W$`-tLb!w0aafqUejA{wR-D~3X<0PBn6b<mO4Ago
zk>h1cX=@3J?N!8NRW<JcUM=S}!S^9BXR|=IP>G1Xu3~HGVQwe4m-&A4yUpjV!-wLL
z{8aw2|L1|92A;n&S?st_63~?oamkB<?f<-#P_X+1VPDtpq0W*3-&58KhkZ466&?8|
z1>qNhf$G(s0UgiJDXeK=3dpMJ{s*&$1r#F(6~Af$+2WGMmd>#WV+RYy?ar%)+tgN#
zD|rj7SPzgb^hax`=x=#Ayfe%{7k4g}B;j>`841Cr5)yn(|1B7fvy)N_FwiS7Hh5nI
zpevl}-bb{JpI`SLDYN!H`2KBf$03C3ZSUNh*}Zw(+H>sfaf4Q|0s|h<3HmuOFmGW}
zHLAxh&~9=a4_>zz$>DjJ&V0%>(#OaKH0L~Y=Umuhlbg3}a(lrhpUuE`)+X0KwaNS>
z{1!Gm{p?czkP)UH2vO-;8?%~>p=YVNN^8+~C4Jz<E(3wA1LKF*QSNE(SztPkc{#4#
zUn_>%^Rq8P7ark9?>!lRJihnkv(VsiV9-Iu9Uy)_6H;0dFtq)u>i&TMA5hhM87)!K
zz<gnew8iI(AHq@oV3hX&eS;GY7VYJvlM_A}oO$C`6-S#7D>evZ8x`B$+?zTMDqA0w
zMIwbxyrT5(NkEp`PlBS<bP~W)Z&{Y4A@>;WJO}>}9#u8cI$TUnFD{$9<sMxd?$rB%
hd;bZ_L-AK<{C?1382?2G7GL^%@lZbYH-e9I{=b$Ti^Ko`

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/_version.cpython-312.pyc b/venv/Lib/site-packages/dateutil/__pycache__/_version.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..2c0c8ad5ccf71905599176360dfda1538be88280
GIT binary patch
literal 269
zcmX@j%ge<81iy0I()xh(V-N=h7@>^MJV3^Dh7^V<h7`sq#!4nl<|<YrJqtY}P3D(O
zK)IJ3K%xl5^3!Cx#a@<LRGgWgcZ(Owh%YHE$Vpwv@ENFp;a9e^RZM6xP)ST;MrLA4
zjDKFLOHpQ7YK%*Ma%paAUP*C`duEA8X;MsDeo<n2s%}<6ZnAE1d8%$nVsW;vVN6+S
zURjJ!W>QRXW=X1UL1J<?P*rhEN@7WBX-Q^|emvA#y@JYL95%W6DWy57c14^(yFnf*
d76cL>m>C%vKX5Q`3pKFc5Rh!-En)|X0sw-sO$Y!0

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/easter.cpython-312.pyc b/venv/Lib/site-packages/dateutil/__pycache__/easter.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..1af451e2d8488a46cbaef8e8aab7998f26f8ea97
GIT binary patch
literal 2870
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
W?L6-8+3kRu4_^DP^eG{6f%iWpycw4O

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/relativedelta.cpython-312.pyc b/venv/Lib/site-packages/dateutil/__pycache__/relativedelta.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..477ced79d863a96d3a12f0fd7fcd4f81efc8e022
GIT binary patch
literal 28384
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
Pz#g7-=8NK1HaY(XyuMUv

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/rrule.cpython-312.pyc b/venv/Lib/site-packages/dateutil/__pycache__/rrule.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..0c9650509997504356d6ee475ae7abce83b5e891
GIT binary patch
literal 69242
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/tzwin.cpython-312.pyc b/venv/Lib/site-packages/dateutil/__pycache__/tzwin.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..837daf4660e69f6dd9bb3da886c175c823603ea3
GIT binary patch
literal 229
zcmX@j%ge<81iy0I(yW2>V-N=hn4pZ$d_cx@h7^Vr#vF#VOpFYbOq$Fu8G(YDjJFuI
z{D34|NtIrCX5LDM&mcX&GMueqLW@(2ienNpG80o`{PR*>iZaVmV_fo+OLJ56N{VCL
zGfO;5lVZ~HixSgQb+Za`lXZ*BQ*}!ci?ekNW6DzV%3^#nlVXZ9OHy?U5|gums)}P$
z5=&A`OEPoxOR9jj=@nG|;;_lhPbtkwwJYKPS`2biF^KVjnURt4DT8Pc8;}D4w!uKj

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/utils.cpython-312.pyc b/venv/Lib/site-packages/dateutil/__pycache__/utils.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..7240b0072767b9f5887c17877bcda89fe5645bc6
GIT binary patch
literal 2582
zcmbVO&2Jk;6yIIjv12DqQxKxGMWcdLuc(a^C{z{=^ov4;ibT?jWyv1z%-WN#cg@Uf
z99yoGN)@zlXgC$bfgXAQrAYiATv8Q5WpO~_fVdR`m!5btUORCVD#XY;o{u;0y?OJS
z-<$8Jr_%<M$IXx2Z<B`ctLhAk6*aa_LgThUjFLf2VtHoMDp{s#$GliGR*E&_r8x9c
zByrs=CCJ2eqclO1P$xTad$KFiOARJaGa#WyQQ*3i3sk2*<=8_`;IB}hQQx5m`virO
zc}#YY8~To9fiI97a6~Bfm|sV2CL3vjC6%m6MLwO*=g|tN13^p(CB-6|&%d58q<>ew
z+h%`%=rboEv;s<%Jz-n@)KEb`uGCy|%xI(P4}xIC;M@8Hs@sMf%`FeZ0pr8cGd806
ztL6^L_;7yvzh^Eh&AZA*)R&XP31aq)d)7u|Yxuut*fIP(m`WokA5a-`2n<HWR;TEA
zScqbExTh-Ow8g2QzElB|4T_wQbLb+1I|xhEWW;CnhD>W^#TMqciDZ}gZcx-i%El6`
zQ^7&qz=u`<3ng|MC<`GBP$(!-gM>m*n@mZJ+p*zjl$s*fzHaM1y_e7VZRdm9GIit=
z_b~Et$6oS!kgKqLWA-NoyRj2ookTz82km~+37R$Vv>#W-cmgJDi>K7QMWj$G5qjJ>
zTP$A|0H`u<Figtt`}7=VE3|wraKa`8QIsz*`A%3X11fQy=9XJcCnwr8C$YGan=1pB
zSIY0PT3G<zaxLs!0Vz>dHWjj8R+Y%NI{kzU;5_&~usaQ(n1^c3`0H6Cec;yNn}^rk
z2a`wE&itHt>Zi=1`<X+ZpZV&-7Z<*K_pbc<^mpzL$4))SENsRXwqTXv>_n!*uEy^f
zXxuh>#<CLGRjye*V^Pg1$z7#q-ZM8MR0HlTd>4dtco(S@`k<@TL4d1Oq|u{LfC3-+
z7(xXwi>@aOd7S|cGywny0C3#U(^s0V;${o@pxvN8>I5OeoT3&FRv6r4ghy(?qB>~6
zZUe7S?Fa=H0E^g13{)_ONdz20SEKd_x5tqP0kc>PjDW8~-3h#nY^_d64#N>*flx@`
zNGfEpIPhKJcwu1yxjblUuhbdlWmg#wxP+?%lqRUuy7m@Umcij@f$lv)T4Q7=OsI=P
zPgVvIA6rFSJ&sO|T*w|hzqoYtILghPEEEd%m~;y^DYN71vf7pGvH8N>tGU7){LtKd
z@s$F)yma=MeH=v=>}^fEC5wf^ON9c||J&Aowv#KIP<FJTh_#5^W){U*L+B|mwi^u2
z9!LuK(8G{j6h)1oF{WlO^4o)2;mj3DRsmHt&AN#BLSmJ<6hR8X>OQnak*HRQge$^a
zU`@zu>NY^fMgUj13i`7A8%>TV-bc8tF2-K&40l_N*iR*xA*UsyT|<8ghBeVeB*zus
z^!JS;fggauBk+kAp;|K@6^&H-<Ic6tX7cdEnb{kYzs$_u>fY?$dFDp<!Ay2DmE|)a
z=<FmA)mGouIjDA~&Yra~Op`!7J+ljMj;pbrl`(oT$6B?nJZBiICQq0~Pq!C=(o7&I
z+wA%}nn1}z+5j2{(CXCIh6FU?nlYAuEAG>}$Lg#G3`3ZDa;O)ERt9HPgQN&g3t$=!
zTthz$u{VezyclA*ChT}WM&z8T=KBdkJ&F72Z8ahe8&o%a5Xvd_Dq(&_%khIS_ZEC2
z4;3(a+L+$Ip7`|Q+WCjGPp^y54z68%I5m6Ywe`}Ene3et_cPhecy>_hklN-YJJnBC
zDnLV(N<UqxxFO_wTB&dqT%FQ%`qH^WpPRP%jiHxomma6y7`(O?xH?l6d~p=2M={eh
h|A;5d_}^28nf=XpVQXUAeDhC)Ond8XGilmd$3KJSx~2dC

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/_common.py b/venv/Lib/site-packages/dateutil/_common.py
new file mode 100644
index 0000000..4eb2659
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/_common.py
@@ -0,0 +1,43 @@
+"""
+Common code used in multiple modules.
+"""
+
+
+class weekday(object):
+    __slots__ = ["weekday", "n"]
+
+    def __init__(self, weekday, n=None):
+        self.weekday = weekday
+        self.n = n
+
+    def __call__(self, n):
+        if n == self.n:
+            return self
+        else:
+            return self.__class__(self.weekday, n)
+
+    def __eq__(self, other):
+        try:
+            if self.weekday != other.weekday or self.n != other.n:
+                return False
+        except AttributeError:
+            return False
+        return True
+
+    def __hash__(self):
+        return hash((
+          self.weekday,
+          self.n,
+        ))
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        s = ("MO", "TU", "WE", "TH", "FR", "SA", "SU")[self.weekday]
+        if not self.n:
+            return s
+        else:
+            return "%s(%+d)" % (s, self.n)
+
+# vim:ts=4:sw=4:et
diff --git a/venv/Lib/site-packages/dateutil/_version.py b/venv/Lib/site-packages/dateutil/_version.py
new file mode 100644
index 0000000..b723056
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/_version.py
@@ -0,0 +1,5 @@
+# coding: utf-8
+# file generated by setuptools_scm
+# don't change, don't track in version control
+version = '2.8.2'
+version_tuple = (2, 8, 2)
diff --git a/venv/Lib/site-packages/dateutil/easter.py b/venv/Lib/site-packages/dateutil/easter.py
new file mode 100644
index 0000000..f74d1f7
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/easter.py
@@ -0,0 +1,89 @@
+# -*- coding: utf-8 -*-
+"""
+This module offers a generic Easter computing method for any given year, using
+Western, Orthodox or Julian algorithms.
+"""
+
+import datetime
+
+__all__ = ["easter", "EASTER_JULIAN", "EASTER_ORTHODOX", "EASTER_WESTERN"]
+
+EASTER_JULIAN = 1
+EASTER_ORTHODOX = 2
+EASTER_WESTERN = 3
+
+
+def easter(year, method=EASTER_WESTERN):
+    """
+    This method was ported from the work done by GM Arts,
+    on top of the algorithm by Claus Tondering, which was
+    based in part on the algorithm of Ouding (1940), as
+    quoted in "Explanatory Supplement to the Astronomical
+    Almanac", P.  Kenneth Seidelmann, editor.
+
+    This algorithm implements three different Easter
+    calculation methods:
+
+    1. Original calculation in Julian calendar, valid in
+       dates after 326 AD
+    2. Original method, with date converted to Gregorian
+       calendar, valid in years 1583 to 4099
+    3. Revised method, in Gregorian calendar, valid in
+       years 1583 to 4099 as well
+
+    These methods are represented by the constants:
+
+    * ``EASTER_JULIAN   = 1``
+    * ``EASTER_ORTHODOX = 2``
+    * ``EASTER_WESTERN  = 3``
+
+    The default method is method 3.
+
+    More about the algorithm may be found at:
+
+    `GM Arts: Easter Algorithms <http://www.gmarts.org/index.php?go=415>`_
+
+    and
+
+    `The Calendar FAQ: Easter <https://www.tondering.dk/claus/cal/easter.php>`_
+
+    """
+
+    if not (1 <= method <= 3):
+        raise ValueError("invalid method")
+
+    # g - Golden year - 1
+    # c - Century
+    # h - (23 - Epact) mod 30
+    # i - Number of days from March 21 to Paschal Full Moon
+    # j - Weekday for PFM (0=Sunday, etc)
+    # p - Number of days from March 21 to Sunday on or before PFM
+    #     (-6 to 28 methods 1 & 3, to 56 for method 2)
+    # e - Extra days to add for method 2 (converting Julian
+    #     date to Gregorian date)
+
+    y = year
+    g = y % 19
+    e = 0
+    if method < 3:
+        # Old method
+        i = (19*g + 15) % 30
+        j = (y + y//4 + i) % 7
+        if method == 2:
+            # Extra dates to convert Julian to Gregorian date
+            e = 10
+            if y > 1600:
+                e = e + y//100 - 16 - (y//100 - 16)//4
+    else:
+        # New method
+        c = y//100
+        h = (c - c//4 - (8*c + 13)//25 + 19*g + 15) % 30
+        i = h - (h//28)*(1 - (h//28)*(29//(h + 1))*((21 - g)//11))
+        j = (y + y//4 + i + 2 - c + c//4) % 7
+
+    # p can be from -6 to 56 corresponding to dates 22 March to 23 May
+    # (later dates apply to method 2, although 23 May never actually occurs)
+    p = i - j + e
+    d = 1 + (p + 27 + (p + 6)//40) % 31
+    m = 3 + (p + 26)//30
+    return datetime.date(int(y), int(m), int(d))
diff --git a/venv/Lib/site-packages/dateutil/parser/__init__.py b/venv/Lib/site-packages/dateutil/parser/__init__.py
new file mode 100644
index 0000000..d174b0e
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/parser/__init__.py
@@ -0,0 +1,61 @@
+# -*- coding: utf-8 -*-
+from ._parser import parse, parser, parserinfo, ParserError
+from ._parser import DEFAULTPARSER, DEFAULTTZPARSER
+from ._parser import UnknownTimezoneWarning
+
+from ._parser import __doc__
+
+from .isoparser import isoparser, isoparse
+
+__all__ = ['parse', 'parser', 'parserinfo',
+           'isoparse', 'isoparser',
+           'ParserError',
+           'UnknownTimezoneWarning']
+
+
+###
+# Deprecate portions of the private interface so that downstream code that
+# is improperly relying on it is given *some* notice.
+
+
+def __deprecated_private_func(f):
+    from functools import wraps
+    import warnings
+
+    msg = ('{name} is a private function and may break without warning, '
+           'it will be moved and or renamed in future versions.')
+    msg = msg.format(name=f.__name__)
+
+    @wraps(f)
+    def deprecated_func(*args, **kwargs):
+        warnings.warn(msg, DeprecationWarning)
+        return f(*args, **kwargs)
+
+    return deprecated_func
+
+def __deprecate_private_class(c):
+    import warnings
+
+    msg = ('{name} is a private class and may break without warning, '
+           'it will be moved and or renamed in future versions.')
+    msg = msg.format(name=c.__name__)
+
+    class private_class(c):
+        __doc__ = c.__doc__
+
+        def __init__(self, *args, **kwargs):
+            warnings.warn(msg, DeprecationWarning)
+            super(private_class, self).__init__(*args, **kwargs)
+
+    private_class.__name__ = c.__name__
+
+    return private_class
+
+
+from ._parser import _timelex, _resultbase
+from ._parser import _tzparser, _parsetz
+
+_timelex = __deprecate_private_class(_timelex)
+_tzparser = __deprecate_private_class(_tzparser)
+_resultbase = __deprecate_private_class(_resultbase)
+_parsetz = __deprecated_private_func(_parsetz)
diff --git a/venv/Lib/site-packages/dateutil/parser/__pycache__/__init__.cpython-312.pyc b/venv/Lib/site-packages/dateutil/parser/__pycache__/__init__.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..04143eb43df9c92c11ac27ca320166d69f86f0af
GIT binary patch
literal 2676
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
G`|{rmES38J

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/parser/__pycache__/_parser.cpython-312.pyc b/venv/Lib/site-packages/dateutil/parser/__pycache__/_parser.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..8f5a4db575ff21b289290fcc785644ebcf88e4c5
GIT binary patch
literal 61869
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/parser/__pycache__/isoparser.cpython-312.pyc b/venv/Lib/site-packages/dateutil/parser/__pycache__/isoparser.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..832ada4739177cc5b51aef60087eb2e27496c7be
GIT binary patch
literal 15616
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/parser/_parser.py b/venv/Lib/site-packages/dateutil/parser/_parser.py
new file mode 100644
index 0000000..37d1663
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/parser/_parser.py
@@ -0,0 +1,1613 @@
+# -*- coding: utf-8 -*-
+"""
+This module offers a generic date/time string parser which is able to parse
+most known formats to represent a date and/or time.
+
+This module attempts to be forgiving with regards to unlikely input formats,
+returning a datetime object even for dates which are ambiguous. If an element
+of a date/time stamp is omitted, the following rules are applied:
+
+- If AM or PM is left unspecified, a 24-hour clock is assumed, however, an hour
+  on a 12-hour clock (``0 <= hour <= 12``) *must* be specified if AM or PM is
+  specified.
+- If a time zone is omitted, a timezone-naive datetime is returned.
+
+If any other elements are missing, they are taken from the
+:class:`datetime.datetime` object passed to the parameter ``default``. If this
+results in a day number exceeding the valid number of days per month, the
+value falls back to the end of the month.
+
+Additional resources about date/time string formats can be found below:
+
+- `A summary of the international standard date and time notation
+  <https://www.cl.cam.ac.uk/~mgk25/iso-time.html>`_
+- `W3C Date and Time Formats <https://www.w3.org/TR/NOTE-datetime>`_
+- `Time Formats (Planetary Rings Node) <https://pds-rings.seti.org:443/tools/time_formats.html>`_
+- `CPAN ParseDate module
+  <https://metacpan.org/pod/release/MUIR/Time-modules-2013.0912/lib/Time/ParseDate.pm>`_
+- `Java SimpleDateFormat Class
+  <https://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html>`_
+"""
+from __future__ import unicode_literals
+
+import datetime
+import re
+import string
+import time
+import warnings
+
+from calendar import monthrange
+from io import StringIO
+
+import six
+from six import integer_types, text_type
+
+from decimal import Decimal
+
+from warnings import warn
+
+from .. import relativedelta
+from .. import tz
+
+__all__ = ["parse", "parserinfo", "ParserError"]
+
+
+# TODO: pandas.core.tools.datetimes imports this explicitly.  Might be worth
+# making public and/or figuring out if there is something we can
+# take off their plate.
+class _timelex(object):
+    # Fractional seconds are sometimes split by a comma
+    _split_decimal = re.compile("([.,])")
+
+    def __init__(self, instream):
+        if isinstance(instream, (bytes, bytearray)):
+            instream = instream.decode()
+
+        if isinstance(instream, text_type):
+            instream = StringIO(instream)
+        elif getattr(instream, 'read', None) is None:
+            raise TypeError('Parser must be a string or character stream, not '
+                            '{itype}'.format(itype=instream.__class__.__name__))
+
+        self.instream = instream
+        self.charstack = []
+        self.tokenstack = []
+        self.eof = False
+
+    def get_token(self):
+        """
+        This function breaks the time string into lexical units (tokens), which
+        can be parsed by the parser. Lexical units are demarcated by changes in
+        the character set, so any continuous string of letters is considered
+        one unit, any continuous string of numbers is considered one unit.
+
+        The main complication arises from the fact that dots ('.') can be used
+        both as separators (e.g. "Sep.20.2009") or decimal points (e.g.
+        "4:30:21.447"). As such, it is necessary to read the full context of
+        any dot-separated strings before breaking it into tokens; as such, this
+        function maintains a "token stack", for when the ambiguous context
+        demands that multiple tokens be parsed at once.
+        """
+        if self.tokenstack:
+            return self.tokenstack.pop(0)
+
+        seenletters = False
+        token = None
+        state = None
+
+        while not self.eof:
+            # We only realize that we've reached the end of a token when we
+            # find a character that's not part of the current token - since
+            # that character may be part of the next token, it's stored in the
+            # charstack.
+            if self.charstack:
+                nextchar = self.charstack.pop(0)
+            else:
+                nextchar = self.instream.read(1)
+                while nextchar == '\x00':
+                    nextchar = self.instream.read(1)
+
+            if not nextchar:
+                self.eof = True
+                break
+            elif not state:
+                # First character of the token - determines if we're starting
+                # to parse a word, a number or something else.
+                token = nextchar
+                if self.isword(nextchar):
+                    state = 'a'
+                elif self.isnum(nextchar):
+                    state = '0'
+                elif self.isspace(nextchar):
+                    token = ' '
+                    break  # emit token
+                else:
+                    break  # emit token
+            elif state == 'a':
+                # If we've already started reading a word, we keep reading
+                # letters until we find something that's not part of a word.
+                seenletters = True
+                if self.isword(nextchar):
+                    token += nextchar
+                elif nextchar == '.':
+                    token += nextchar
+                    state = 'a.'
+                else:
+                    self.charstack.append(nextchar)
+                    break  # emit token
+            elif state == '0':
+                # If we've already started reading a number, we keep reading
+                # numbers until we find something that doesn't fit.
+                if self.isnum(nextchar):
+                    token += nextchar
+                elif nextchar == '.' or (nextchar == ',' and len(token) >= 2):
+                    token += nextchar
+                    state = '0.'
+                else:
+                    self.charstack.append(nextchar)
+                    break  # emit token
+            elif state == 'a.':
+                # If we've seen some letters and a dot separator, continue
+                # parsing, and the tokens will be broken up later.
+                seenletters = True
+                if nextchar == '.' or self.isword(nextchar):
+                    token += nextchar
+                elif self.isnum(nextchar) and token[-1] == '.':
+                    token += nextchar
+                    state = '0.'
+                else:
+                    self.charstack.append(nextchar)
+                    break  # emit token
+            elif state == '0.':
+                # If we've seen at least one dot separator, keep going, we'll
+                # break up the tokens later.
+                if nextchar == '.' or self.isnum(nextchar):
+                    token += nextchar
+                elif self.isword(nextchar) and token[-1] == '.':
+                    token += nextchar
+                    state = 'a.'
+                else:
+                    self.charstack.append(nextchar)
+                    break  # emit token
+
+        if (state in ('a.', '0.') and (seenletters or token.count('.') > 1 or
+                                       token[-1] in '.,')):
+            l = self._split_decimal.split(token)
+            token = l[0]
+            for tok in l[1:]:
+                if tok:
+                    self.tokenstack.append(tok)
+
+        if state == '0.' and token.count('.') == 0:
+            token = token.replace(',', '.')
+
+        return token
+
+    def __iter__(self):
+        return self
+
+    def __next__(self):
+        token = self.get_token()
+        if token is None:
+            raise StopIteration
+
+        return token
+
+    def next(self):
+        return self.__next__()  # Python 2.x support
+
+    @classmethod
+    def split(cls, s):
+        return list(cls(s))
+
+    @classmethod
+    def isword(cls, nextchar):
+        """ Whether or not the next character is part of a word """
+        return nextchar.isalpha()
+
+    @classmethod
+    def isnum(cls, nextchar):
+        """ Whether the next character is part of a number """
+        return nextchar.isdigit()
+
+    @classmethod
+    def isspace(cls, nextchar):
+        """ Whether the next character is whitespace """
+        return nextchar.isspace()
+
+
+class _resultbase(object):
+
+    def __init__(self):
+        for attr in self.__slots__:
+            setattr(self, attr, None)
+
+    def _repr(self, classname):
+        l = []
+        for attr in self.__slots__:
+            value = getattr(self, attr)
+            if value is not None:
+                l.append("%s=%s" % (attr, repr(value)))
+        return "%s(%s)" % (classname, ", ".join(l))
+
+    def __len__(self):
+        return (sum(getattr(self, attr) is not None
+                    for attr in self.__slots__))
+
+    def __repr__(self):
+        return self._repr(self.__class__.__name__)
+
+
+class parserinfo(object):
+    """
+    Class which handles what inputs are accepted. Subclass this to customize
+    the language and acceptable values for each parameter.
+
+    :param dayfirst:
+        Whether to interpret the first value in an ambiguous 3-integer date
+        (e.g. 01/05/09) as the day (``True``) or month (``False``). If
+        ``yearfirst`` is set to ``True``, this distinguishes between YDM
+        and YMD. Default is ``False``.
+
+    :param yearfirst:
+        Whether to interpret the first value in an ambiguous 3-integer date
+        (e.g. 01/05/09) as the year. If ``True``, the first number is taken
+        to be the year, otherwise the last number is taken to be the year.
+        Default is ``False``.
+    """
+
+    # m from a.m/p.m, t from ISO T separator
+    JUMP = [" ", ".", ",", ";", "-", "/", "'",
+            "at", "on", "and", "ad", "m", "t", "of",
+            "st", "nd", "rd", "th"]
+
+    WEEKDAYS = [("Mon", "Monday"),
+                ("Tue", "Tuesday"),     # TODO: "Tues"
+                ("Wed", "Wednesday"),
+                ("Thu", "Thursday"),    # TODO: "Thurs"
+                ("Fri", "Friday"),
+                ("Sat", "Saturday"),
+                ("Sun", "Sunday")]
+    MONTHS = [("Jan", "January"),
+              ("Feb", "February"),      # TODO: "Febr"
+              ("Mar", "March"),
+              ("Apr", "April"),
+              ("May", "May"),
+              ("Jun", "June"),
+              ("Jul", "July"),
+              ("Aug", "August"),
+              ("Sep", "Sept", "September"),
+              ("Oct", "October"),
+              ("Nov", "November"),
+              ("Dec", "December")]
+    HMS = [("h", "hour", "hours"),
+           ("m", "minute", "minutes"),
+           ("s", "second", "seconds")]
+    AMPM = [("am", "a"),
+            ("pm", "p")]
+    UTCZONE = ["UTC", "GMT", "Z", "z"]
+    PERTAIN = ["of"]
+    TZOFFSET = {}
+    # TODO: ERA = ["AD", "BC", "CE", "BCE", "Stardate",
+    #              "Anno Domini", "Year of Our Lord"]
+
+    def __init__(self, dayfirst=False, yearfirst=False):
+        self._jump = self._convert(self.JUMP)
+        self._weekdays = self._convert(self.WEEKDAYS)
+        self._months = self._convert(self.MONTHS)
+        self._hms = self._convert(self.HMS)
+        self._ampm = self._convert(self.AMPM)
+        self._utczone = self._convert(self.UTCZONE)
+        self._pertain = self._convert(self.PERTAIN)
+
+        self.dayfirst = dayfirst
+        self.yearfirst = yearfirst
+
+        self._year = time.localtime().tm_year
+        self._century = self._year // 100 * 100
+
+    def _convert(self, lst):
+        dct = {}
+        for i, v in enumerate(lst):
+            if isinstance(v, tuple):
+                for v in v:
+                    dct[v.lower()] = i
+            else:
+                dct[v.lower()] = i
+        return dct
+
+    def jump(self, name):
+        return name.lower() in self._jump
+
+    def weekday(self, name):
+        try:
+            return self._weekdays[name.lower()]
+        except KeyError:
+            pass
+        return None
+
+    def month(self, name):
+        try:
+            return self._months[name.lower()] + 1
+        except KeyError:
+            pass
+        return None
+
+    def hms(self, name):
+        try:
+            return self._hms[name.lower()]
+        except KeyError:
+            return None
+
+    def ampm(self, name):
+        try:
+            return self._ampm[name.lower()]
+        except KeyError:
+            return None
+
+    def pertain(self, name):
+        return name.lower() in self._pertain
+
+    def utczone(self, name):
+        return name.lower() in self._utczone
+
+    def tzoffset(self, name):
+        if name in self._utczone:
+            return 0
+
+        return self.TZOFFSET.get(name)
+
+    def convertyear(self, year, century_specified=False):
+        """
+        Converts two-digit years to year within [-50, 49]
+        range of self._year (current local time)
+        """
+
+        # Function contract is that the year is always positive
+        assert year >= 0
+
+        if year < 100 and not century_specified:
+            # assume current century to start
+            year += self._century
+
+            if year >= self._year + 50:  # if too far in future
+                year -= 100
+            elif year < self._year - 50:  # if too far in past
+                year += 100
+
+        return year
+
+    def validate(self, res):
+        # move to info
+        if res.year is not None:
+            res.year = self.convertyear(res.year, res.century_specified)
+
+        if ((res.tzoffset == 0 and not res.tzname) or
+             (res.tzname == 'Z' or res.tzname == 'z')):
+            res.tzname = "UTC"
+            res.tzoffset = 0
+        elif res.tzoffset != 0 and res.tzname and self.utczone(res.tzname):
+            res.tzoffset = 0
+        return True
+
+
+class _ymd(list):
+    def __init__(self, *args, **kwargs):
+        super(self.__class__, self).__init__(*args, **kwargs)
+        self.century_specified = False
+        self.dstridx = None
+        self.mstridx = None
+        self.ystridx = None
+
+    @property
+    def has_year(self):
+        return self.ystridx is not None
+
+    @property
+    def has_month(self):
+        return self.mstridx is not None
+
+    @property
+    def has_day(self):
+        return self.dstridx is not None
+
+    def could_be_day(self, value):
+        if self.has_day:
+            return False
+        elif not self.has_month:
+            return 1 <= value <= 31
+        elif not self.has_year:
+            # Be permissive, assume leap year
+            month = self[self.mstridx]
+            return 1 <= value <= monthrange(2000, month)[1]
+        else:
+            month = self[self.mstridx]
+            year = self[self.ystridx]
+            return 1 <= value <= monthrange(year, month)[1]
+
+    def append(self, val, label=None):
+        if hasattr(val, '__len__'):
+            if val.isdigit() and len(val) > 2:
+                self.century_specified = True
+                if label not in [None, 'Y']:  # pragma: no cover
+                    raise ValueError(label)
+                label = 'Y'
+        elif val > 100:
+            self.century_specified = True
+            if label not in [None, 'Y']:  # pragma: no cover
+                raise ValueError(label)
+            label = 'Y'
+
+        super(self.__class__, self).append(int(val))
+
+        if label == 'M':
+            if self.has_month:
+                raise ValueError('Month is already set')
+            self.mstridx = len(self) - 1
+        elif label == 'D':
+            if self.has_day:
+                raise ValueError('Day is already set')
+            self.dstridx = len(self) - 1
+        elif label == 'Y':
+            if self.has_year:
+                raise ValueError('Year is already set')
+            self.ystridx = len(self) - 1
+
+    def _resolve_from_stridxs(self, strids):
+        """
+        Try to resolve the identities of year/month/day elements using
+        ystridx, mstridx, and dstridx, if enough of these are specified.
+        """
+        if len(self) == 3 and len(strids) == 2:
+            # we can back out the remaining stridx value
+            missing = [x for x in range(3) if x not in strids.values()]
+            key = [x for x in ['y', 'm', 'd'] if x not in strids]
+            assert len(missing) == len(key) == 1
+            key = key[0]
+            val = missing[0]
+            strids[key] = val
+
+        assert len(self) == len(strids)  # otherwise this should not be called
+        out = {key: self[strids[key]] for key in strids}
+        return (out.get('y'), out.get('m'), out.get('d'))
+
+    def resolve_ymd(self, yearfirst, dayfirst):
+        len_ymd = len(self)
+        year, month, day = (None, None, None)
+
+        strids = (('y', self.ystridx),
+                  ('m', self.mstridx),
+                  ('d', self.dstridx))
+
+        strids = {key: val for key, val in strids if val is not None}
+        if (len(self) == len(strids) > 0 or
+                (len(self) == 3 and len(strids) == 2)):
+            return self._resolve_from_stridxs(strids)
+
+        mstridx = self.mstridx
+
+        if len_ymd > 3:
+            raise ValueError("More than three YMD values")
+        elif len_ymd == 1 or (mstridx is not None and len_ymd == 2):
+            # One member, or two members with a month string
+            if mstridx is not None:
+                month = self[mstridx]
+                # since mstridx is 0 or 1, self[mstridx-1] always
+                # looks up the other element
+                other = self[mstridx - 1]
+            else:
+                other = self[0]
+
+            if len_ymd > 1 or mstridx is None:
+                if other > 31:
+                    year = other
+                else:
+                    day = other
+
+        elif len_ymd == 2:
+            # Two members with numbers
+            if self[0] > 31:
+                # 99-01
+                year, month = self
+            elif self[1] > 31:
+                # 01-99
+                month, year = self
+            elif dayfirst and self[1] <= 12:
+                # 13-01
+                day, month = self
+            else:
+                # 01-13
+                month, day = self
+
+        elif len_ymd == 3:
+            # Three members
+            if mstridx == 0:
+                if self[1] > 31:
+                    # Apr-2003-25
+                    month, year, day = self
+                else:
+                    month, day, year = self
+            elif mstridx == 1:
+                if self[0] > 31 or (yearfirst and self[2] <= 31):
+                    # 99-Jan-01
+                    year, month, day = self
+                else:
+                    # 01-Jan-01
+                    # Give precedence to day-first, since
+                    # two-digit years is usually hand-written.
+                    day, month, year = self
+
+            elif mstridx == 2:
+                # WTF!?
+                if self[1] > 31:
+                    # 01-99-Jan
+                    day, year, month = self
+                else:
+                    # 99-01-Jan
+                    year, day, month = self
+
+            else:
+                if (self[0] > 31 or
+                    self.ystridx == 0 or
+                        (yearfirst and self[1] <= 12 and self[2] <= 31)):
+                    # 99-01-01
+                    if dayfirst and self[2] <= 12:
+                        year, day, month = self
+                    else:
+                        year, month, day = self
+                elif self[0] > 12 or (dayfirst and self[1] <= 12):
+                    # 13-01-01
+                    day, month, year = self
+                else:
+                    # 01-13-01
+                    month, day, year = self
+
+        return year, month, day
+
+
+class parser(object):
+    def __init__(self, info=None):
+        self.info = info or parserinfo()
+
+    def parse(self, timestr, default=None,
+              ignoretz=False, tzinfos=None, **kwargs):
+        """
+        Parse the date/time string into a :class:`datetime.datetime` object.
+
+        :param timestr:
+            Any date/time string using the supported formats.
+
+        :param default:
+            The default datetime object, if this is a datetime object and not
+            ``None``, elements specified in ``timestr`` replace elements in the
+            default object.
+
+        :param ignoretz:
+            If set ``True``, time zones in parsed strings are ignored and a
+            naive :class:`datetime.datetime` object is returned.
+
+        :param tzinfos:
+            Additional time zone names / aliases which may be present in the
+            string. This argument maps time zone names (and optionally offsets
+            from those time zones) to time zones. This parameter can be a
+            dictionary with timezone aliases mapping time zone names to time
+            zones or a function taking two parameters (``tzname`` and
+            ``tzoffset``) and returning a time zone.
+
+            The timezones to which the names are mapped can be an integer
+            offset from UTC in seconds or a :class:`tzinfo` object.
+
+            .. doctest::
+               :options: +NORMALIZE_WHITESPACE
+
+                >>> from dateutil.parser import parse
+                >>> from dateutil.tz import gettz
+                >>> tzinfos = {"BRST": -7200, "CST": gettz("America/Chicago")}
+                >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
+                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))
+                >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
+                datetime.datetime(2012, 1, 19, 17, 21,
+                                  tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))
+
+            This parameter is ignored if ``ignoretz`` is set.
+
+        :param \\*\\*kwargs:
+            Keyword arguments as passed to ``_parse()``.
+
+        :return:
+            Returns a :class:`datetime.datetime` object or, if the
+            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
+            first element being a :class:`datetime.datetime` object, the second
+            a tuple containing the fuzzy tokens.
+
+        :raises ParserError:
+            Raised for invalid or unknown string format, if the provided
+            :class:`tzinfo` is not in a valid format, or if an invalid date
+            would be created.
+
+        :raises TypeError:
+            Raised for non-string or character stream input.
+
+        :raises OverflowError:
+            Raised if the parsed date exceeds the largest valid C integer on
+            your system.
+        """
+
+        if default is None:
+            default = datetime.datetime.now().replace(hour=0, minute=0,
+                                                      second=0, microsecond=0)
+
+        res, skipped_tokens = self._parse(timestr, **kwargs)
+
+        if res is None:
+            raise ParserError("Unknown string format: %s", timestr)
+
+        if len(res) == 0:
+            raise ParserError("String does not contain a date: %s", timestr)
+
+        try:
+            ret = self._build_naive(res, default)
+        except ValueError as e:
+            six.raise_from(ParserError(str(e) + ": %s", timestr), e)
+
+        if not ignoretz:
+            ret = self._build_tzaware(ret, res, tzinfos)
+
+        if kwargs.get('fuzzy_with_tokens', False):
+            return ret, skipped_tokens
+        else:
+            return ret
+
+    class _result(_resultbase):
+        __slots__ = ["year", "month", "day", "weekday",
+                     "hour", "minute", "second", "microsecond",
+                     "tzname", "tzoffset", "ampm","any_unused_tokens"]
+
+    def _parse(self, timestr, dayfirst=None, yearfirst=None, fuzzy=False,
+               fuzzy_with_tokens=False):
+        """
+        Private method which performs the heavy lifting of parsing, called from
+        ``parse()``, which passes on its ``kwargs`` to this function.
+
+        :param timestr:
+            The string to parse.
+
+        :param dayfirst:
+            Whether to interpret the first value in an ambiguous 3-integer date
+            (e.g. 01/05/09) as the day (``True``) or month (``False``). If
+            ``yearfirst`` is set to ``True``, this distinguishes between YDM
+            and YMD. If set to ``None``, this value is retrieved from the
+            current :class:`parserinfo` object (which itself defaults to
+            ``False``).
+
+        :param yearfirst:
+            Whether to interpret the first value in an ambiguous 3-integer date
+            (e.g. 01/05/09) as the year. If ``True``, the first number is taken
+            to be the year, otherwise the last number is taken to be the year.
+            If this is set to ``None``, the value is retrieved from the current
+            :class:`parserinfo` object (which itself defaults to ``False``).
+
+        :param fuzzy:
+            Whether to allow fuzzy parsing, allowing for string like "Today is
+            January 1, 2047 at 8:21:00AM".
+
+        :param fuzzy_with_tokens:
+            If ``True``, ``fuzzy`` is automatically set to True, and the parser
+            will return a tuple where the first element is the parsed
+            :class:`datetime.datetime` datetimestamp and the second element is
+            a tuple containing the portions of the string which were ignored:
+
+            .. doctest::
+
+                >>> from dateutil.parser import parse
+                >>> parse("Today is January 1, 2047 at 8:21:00AM", fuzzy_with_tokens=True)
+                (datetime.datetime(2047, 1, 1, 8, 21), (u'Today is ', u' ', u'at '))
+
+        """
+        if fuzzy_with_tokens:
+            fuzzy = True
+
+        info = self.info
+
+        if dayfirst is None:
+            dayfirst = info.dayfirst
+
+        if yearfirst is None:
+            yearfirst = info.yearfirst
+
+        res = self._result()
+        l = _timelex.split(timestr)         # Splits the timestr into tokens
+
+        skipped_idxs = []
+
+        # year/month/day list
+        ymd = _ymd()
+
+        len_l = len(l)
+        i = 0
+        try:
+            while i < len_l:
+
+                # Check if it's a number
+                value_repr = l[i]
+                try:
+                    value = float(value_repr)
+                except ValueError:
+                    value = None
+
+                if value is not None:
+                    # Numeric token
+                    i = self._parse_numeric_token(l, i, info, ymd, res, fuzzy)
+
+                # Check weekday
+                elif info.weekday(l[i]) is not None:
+                    value = info.weekday(l[i])
+                    res.weekday = value
+
+                # Check month name
+                elif info.month(l[i]) is not None:
+                    value = info.month(l[i])
+                    ymd.append(value, 'M')
+
+                    if i + 1 < len_l:
+                        if l[i + 1] in ('-', '/'):
+                            # Jan-01[-99]
+                            sep = l[i + 1]
+                            ymd.append(l[i + 2])
+
+                            if i + 3 < len_l and l[i + 3] == sep:
+                                # Jan-01-99
+                                ymd.append(l[i + 4])
+                                i += 2
+
+                            i += 2
+
+                        elif (i + 4 < len_l and l[i + 1] == l[i + 3] == ' ' and
+                              info.pertain(l[i + 2])):
+                            # Jan of 01
+                            # In this case, 01 is clearly year
+                            if l[i + 4].isdigit():
+                                # Convert it here to become unambiguous
+                                value = int(l[i + 4])
+                                year = str(info.convertyear(value))
+                                ymd.append(year, 'Y')
+                            else:
+                                # Wrong guess
+                                pass
+                                # TODO: not hit in tests
+                            i += 4
+
+                # Check am/pm
+                elif info.ampm(l[i]) is not None:
+                    value = info.ampm(l[i])
+                    val_is_ampm = self._ampm_valid(res.hour, res.ampm, fuzzy)
+
+                    if val_is_ampm:
+                        res.hour = self._adjust_ampm(res.hour, value)
+                        res.ampm = value
+
+                    elif fuzzy:
+                        skipped_idxs.append(i)
+
+                # Check for a timezone name
+                elif self._could_be_tzname(res.hour, res.tzname, res.tzoffset, l[i]):
+                    res.tzname = l[i]
+                    res.tzoffset = info.tzoffset(res.tzname)
+
+                    # Check for something like GMT+3, or BRST+3. Notice
+                    # that it doesn't mean "I am 3 hours after GMT", but
+                    # "my time +3 is GMT". If found, we reverse the
+                    # logic so that timezone parsing code will get it
+                    # right.
+                    if i + 1 < len_l and l[i + 1] in ('+', '-'):
+                        l[i + 1] = ('+', '-')[l[i + 1] == '+']
+                        res.tzoffset = None
+                        if info.utczone(res.tzname):
+                            # With something like GMT+3, the timezone
+                            # is *not* GMT.
+                            res.tzname = None
+
+                # Check for a numbered timezone
+                elif res.hour is not None and l[i] in ('+', '-'):
+                    signal = (-1, 1)[l[i] == '+']
+                    len_li = len(l[i + 1])
+
+                    # TODO: check that l[i + 1] is integer?
+                    if len_li == 4:
+                        # -0300
+                        hour_offset = int(l[i + 1][:2])
+                        min_offset = int(l[i + 1][2:])
+                    elif i + 2 < len_l and l[i + 2] == ':':
+                        # -03:00
+                        hour_offset = int(l[i + 1])
+                        min_offset = int(l[i + 3])  # TODO: Check that l[i+3] is minute-like?
+                        i += 2
+                    elif len_li <= 2:
+                        # -[0]3
+                        hour_offset = int(l[i + 1][:2])
+                        min_offset = 0
+                    else:
+                        raise ValueError(timestr)
+
+                    res.tzoffset = signal * (hour_offset * 3600 + min_offset * 60)
+
+                    # Look for a timezone name between parenthesis
+                    if (i + 5 < len_l and
+                            info.jump(l[i + 2]) and l[i + 3] == '(' and
+                            l[i + 5] == ')' and
+                            3 <= len(l[i + 4]) and
+                            self._could_be_tzname(res.hour, res.tzname,
+                                                  None, l[i + 4])):
+                        # -0300 (BRST)
+                        res.tzname = l[i + 4]
+                        i += 4
+
+                    i += 1
+
+                # Check jumps
+                elif not (info.jump(l[i]) or fuzzy):
+                    raise ValueError(timestr)
+
+                else:
+                    skipped_idxs.append(i)
+                i += 1
+
+            # Process year/month/day
+            year, month, day = ymd.resolve_ymd(yearfirst, dayfirst)
+
+            res.century_specified = ymd.century_specified
+            res.year = year
+            res.month = month
+            res.day = day
+
+        except (IndexError, ValueError):
+            return None, None
+
+        if not info.validate(res):
+            return None, None
+
+        if fuzzy_with_tokens:
+            skipped_tokens = self._recombine_skipped(l, skipped_idxs)
+            return res, tuple(skipped_tokens)
+        else:
+            return res, None
+
+    def _parse_numeric_token(self, tokens, idx, info, ymd, res, fuzzy):
+        # Token is a number
+        value_repr = tokens[idx]
+        try:
+            value = self._to_decimal(value_repr)
+        except Exception as e:
+            six.raise_from(ValueError('Unknown numeric token'), e)
+
+        len_li = len(value_repr)
+
+        len_l = len(tokens)
+
+        if (len(ymd) == 3 and len_li in (2, 4) and
+            res.hour is None and
+            (idx + 1 >= len_l or
+             (tokens[idx + 1] != ':' and
+              info.hms(tokens[idx + 1]) is None))):
+            # 19990101T23[59]
+            s = tokens[idx]
+            res.hour = int(s[:2])
+
+            if len_li == 4:
+                res.minute = int(s[2:])
+
+        elif len_li == 6 or (len_li > 6 and tokens[idx].find('.') == 6):
+            # YYMMDD or HHMMSS[.ss]
+            s = tokens[idx]
+
+            if not ymd and '.' not in tokens[idx]:
+                ymd.append(s[:2])
+                ymd.append(s[2:4])
+                ymd.append(s[4:])
+            else:
+                # 19990101T235959[.59]
+
+                # TODO: Check if res attributes already set.
+                res.hour = int(s[:2])
+                res.minute = int(s[2:4])
+                res.second, res.microsecond = self._parsems(s[4:])
+
+        elif len_li in (8, 12, 14):
+            # YYYYMMDD
+            s = tokens[idx]
+            ymd.append(s[:4], 'Y')
+            ymd.append(s[4:6])
+            ymd.append(s[6:8])
+
+            if len_li > 8:
+                res.hour = int(s[8:10])
+                res.minute = int(s[10:12])
+
+                if len_li > 12:
+                    res.second = int(s[12:])
+
+        elif self._find_hms_idx(idx, tokens, info, allow_jump=True) is not None:
+            # HH[ ]h or MM[ ]m or SS[.ss][ ]s
+            hms_idx = self._find_hms_idx(idx, tokens, info, allow_jump=True)
+            (idx, hms) = self._parse_hms(idx, tokens, info, hms_idx)
+            if hms is not None:
+                # TODO: checking that hour/minute/second are not
+                # already set?
+                self._assign_hms(res, value_repr, hms)
+
+        elif idx + 2 < len_l and tokens[idx + 1] == ':':
+            # HH:MM[:SS[.ss]]
+            res.hour = int(value)
+            value = self._to_decimal(tokens[idx + 2])  # TODO: try/except for this?
+            (res.minute, res.second) = self._parse_min_sec(value)
+
+            if idx + 4 < len_l and tokens[idx + 3] == ':':
+                res.second, res.microsecond = self._parsems(tokens[idx + 4])
+
+                idx += 2
+
+            idx += 2
+
+        elif idx + 1 < len_l and tokens[idx + 1] in ('-', '/', '.'):
+            sep = tokens[idx + 1]
+            ymd.append(value_repr)
+
+            if idx + 2 < len_l and not info.jump(tokens[idx + 2]):
+                if tokens[idx + 2].isdigit():
+                    # 01-01[-01]
+                    ymd.append(tokens[idx + 2])
+                else:
+                    # 01-Jan[-01]
+                    value = info.month(tokens[idx + 2])
+
+                    if value is not None:
+                        ymd.append(value, 'M')
+                    else:
+                        raise ValueError()
+
+                if idx + 3 < len_l and tokens[idx + 3] == sep:
+                    # We have three members
+                    value = info.month(tokens[idx + 4])
+
+                    if value is not None:
+                        ymd.append(value, 'M')
+                    else:
+                        ymd.append(tokens[idx + 4])
+                    idx += 2
+
+                idx += 1
+            idx += 1
+
+        elif idx + 1 >= len_l or info.jump(tokens[idx + 1]):
+            if idx + 2 < len_l and info.ampm(tokens[idx + 2]) is not None:
+                # 12 am
+                hour = int(value)
+                res.hour = self._adjust_ampm(hour, info.ampm(tokens[idx + 2]))
+                idx += 1
+            else:
+                # Year, month or day
+                ymd.append(value)
+            idx += 1
+
+        elif info.ampm(tokens[idx + 1]) is not None and (0 <= value < 24):
+            # 12am
+            hour = int(value)
+            res.hour = self._adjust_ampm(hour, info.ampm(tokens[idx + 1]))
+            idx += 1
+
+        elif ymd.could_be_day(value):
+            ymd.append(value)
+
+        elif not fuzzy:
+            raise ValueError()
+
+        return idx
+
+    def _find_hms_idx(self, idx, tokens, info, allow_jump):
+        len_l = len(tokens)
+
+        if idx+1 < len_l and info.hms(tokens[idx+1]) is not None:
+            # There is an "h", "m", or "s" label following this token.  We take
+            # assign the upcoming label to the current token.
+            # e.g. the "12" in 12h"
+            hms_idx = idx + 1
+
+        elif (allow_jump and idx+2 < len_l and tokens[idx+1] == ' ' and
+              info.hms(tokens[idx+2]) is not None):
+            # There is a space and then an "h", "m", or "s" label.
+            # e.g. the "12" in "12 h"
+            hms_idx = idx + 2
+
+        elif idx > 0 and info.hms(tokens[idx-1]) is not None:
+            # There is a "h", "m", or "s" preceding this token.  Since neither
+            # of the previous cases was hit, there is no label following this
+            # token, so we use the previous label.
+            # e.g. the "04" in "12h04"
+            hms_idx = idx-1
+
+        elif (1 < idx == len_l-1 and tokens[idx-1] == ' ' and
+              info.hms(tokens[idx-2]) is not None):
+            # If we are looking at the final token, we allow for a
+            # backward-looking check to skip over a space.
+            # TODO: Are we sure this is the right condition here?
+            hms_idx = idx - 2
+
+        else:
+            hms_idx = None
+
+        return hms_idx
+
+    def _assign_hms(self, res, value_repr, hms):
+        # See GH issue #427, fixing float rounding
+        value = self._to_decimal(value_repr)
+
+        if hms == 0:
+            # Hour
+            res.hour = int(value)
+            if value % 1:
+                res.minute = int(60*(value % 1))
+
+        elif hms == 1:
+            (res.minute, res.second) = self._parse_min_sec(value)
+
+        elif hms == 2:
+            (res.second, res.microsecond) = self._parsems(value_repr)
+
+    def _could_be_tzname(self, hour, tzname, tzoffset, token):
+        return (hour is not None and
+                tzname is None and
+                tzoffset is None and
+                len(token) <= 5 and
+                (all(x in string.ascii_uppercase for x in token)
+                 or token in self.info.UTCZONE))
+
+    def _ampm_valid(self, hour, ampm, fuzzy):
+        """
+        For fuzzy parsing, 'a' or 'am' (both valid English words)
+        may erroneously trigger the AM/PM flag. Deal with that
+        here.
+        """
+        val_is_ampm = True
+
+        # If there's already an AM/PM flag, this one isn't one.
+        if fuzzy and ampm is not None:
+            val_is_ampm = False
+
+        # If AM/PM is found and hour is not, raise a ValueError
+        if hour is None:
+            if fuzzy:
+                val_is_ampm = False
+            else:
+                raise ValueError('No hour specified with AM or PM flag.')
+        elif not 0 <= hour <= 12:
+            # If AM/PM is found, it's a 12 hour clock, so raise
+            # an error for invalid range
+            if fuzzy:
+                val_is_ampm = False
+            else:
+                raise ValueError('Invalid hour specified for 12-hour clock.')
+
+        return val_is_ampm
+
+    def _adjust_ampm(self, hour, ampm):
+        if hour < 12 and ampm == 1:
+            hour += 12
+        elif hour == 12 and ampm == 0:
+            hour = 0
+        return hour
+
+    def _parse_min_sec(self, value):
+        # TODO: Every usage of this function sets res.second to the return
+        # value. Are there any cases where second will be returned as None and
+        # we *don't* want to set res.second = None?
+        minute = int(value)
+        second = None
+
+        sec_remainder = value % 1
+        if sec_remainder:
+            second = int(60 * sec_remainder)
+        return (minute, second)
+
+    def _parse_hms(self, idx, tokens, info, hms_idx):
+        # TODO: Is this going to admit a lot of false-positives for when we
+        # just happen to have digits and "h", "m" or "s" characters in non-date
+        # text?  I guess hex hashes won't have that problem, but there's plenty
+        # of random junk out there.
+        if hms_idx is None:
+            hms = None
+            new_idx = idx
+        elif hms_idx > idx:
+            hms = info.hms(tokens[hms_idx])
+            new_idx = hms_idx
+        else:
+            # Looking backwards, increment one.
+            hms = info.hms(tokens[hms_idx]) + 1
+            new_idx = idx
+
+        return (new_idx, hms)
+
+    # ------------------------------------------------------------------
+    # Handling for individual tokens.  These are kept as methods instead
+    #  of functions for the sake of customizability via subclassing.
+
+    def _parsems(self, value):
+        """Parse a I[.F] seconds value into (seconds, microseconds)."""
+        if "." not in value:
+            return int(value), 0
+        else:
+            i, f = value.split(".")
+            return int(i), int(f.ljust(6, "0")[:6])
+
+    def _to_decimal(self, val):
+        try:
+            decimal_value = Decimal(val)
+            # See GH 662, edge case, infinite value should not be converted
+            #  via `_to_decimal`
+            if not decimal_value.is_finite():
+                raise ValueError("Converted decimal value is infinite or NaN")
+        except Exception as e:
+            msg = "Could not convert %s to decimal" % val
+            six.raise_from(ValueError(msg), e)
+        else:
+            return decimal_value
+
+    # ------------------------------------------------------------------
+    # Post-Parsing construction of datetime output.  These are kept as
+    #  methods instead of functions for the sake of customizability via
+    #  subclassing.
+
+    def _build_tzinfo(self, tzinfos, tzname, tzoffset):
+        if callable(tzinfos):
+            tzdata = tzinfos(tzname, tzoffset)
+        else:
+            tzdata = tzinfos.get(tzname)
+        # handle case where tzinfo is paased an options that returns None
+        # eg tzinfos = {'BRST' : None}
+        if isinstance(tzdata, datetime.tzinfo) or tzdata is None:
+            tzinfo = tzdata
+        elif isinstance(tzdata, text_type):
+            tzinfo = tz.tzstr(tzdata)
+        elif isinstance(tzdata, integer_types):
+            tzinfo = tz.tzoffset(tzname, tzdata)
+        else:
+            raise TypeError("Offset must be tzinfo subclass, tz string, "
+                            "or int offset.")
+        return tzinfo
+
+    def _build_tzaware(self, naive, res, tzinfos):
+        if (callable(tzinfos) or (tzinfos and res.tzname in tzinfos)):
+            tzinfo = self._build_tzinfo(tzinfos, res.tzname, res.tzoffset)
+            aware = naive.replace(tzinfo=tzinfo)
+            aware = self._assign_tzname(aware, res.tzname)
+
+        elif res.tzname and res.tzname in time.tzname:
+            aware = naive.replace(tzinfo=tz.tzlocal())
+
+            # Handle ambiguous local datetime
+            aware = self._assign_tzname(aware, res.tzname)
+
+            # This is mostly relevant for winter GMT zones parsed in the UK
+            if (aware.tzname() != res.tzname and
+                    res.tzname in self.info.UTCZONE):
+                aware = aware.replace(tzinfo=tz.UTC)
+
+        elif res.tzoffset == 0:
+            aware = naive.replace(tzinfo=tz.UTC)
+
+        elif res.tzoffset:
+            aware = naive.replace(tzinfo=tz.tzoffset(res.tzname, res.tzoffset))
+
+        elif not res.tzname and not res.tzoffset:
+            # i.e. no timezone information was found.
+            aware = naive
+
+        elif res.tzname:
+            # tz-like string was parsed but we don't know what to do
+            # with it
+            warnings.warn("tzname {tzname} identified but not understood.  "
+                          "Pass `tzinfos` argument in order to correctly "
+                          "return a timezone-aware datetime.  In a future "
+                          "version, this will raise an "
+                          "exception.".format(tzname=res.tzname),
+                          category=UnknownTimezoneWarning)
+            aware = naive
+
+        return aware
+
+    def _build_naive(self, res, default):
+        repl = {}
+        for attr in ("year", "month", "day", "hour",
+                     "minute", "second", "microsecond"):
+            value = getattr(res, attr)
+            if value is not None:
+                repl[attr] = value
+
+        if 'day' not in repl:
+            # If the default day exceeds the last day of the month, fall back
+            # to the end of the month.
+            cyear = default.year if res.year is None else res.year
+            cmonth = default.month if res.month is None else res.month
+            cday = default.day if res.day is None else res.day
+
+            if cday > monthrange(cyear, cmonth)[1]:
+                repl['day'] = monthrange(cyear, cmonth)[1]
+
+        naive = default.replace(**repl)
+
+        if res.weekday is not None and not res.day:
+            naive = naive + relativedelta.relativedelta(weekday=res.weekday)
+
+        return naive
+
+    def _assign_tzname(self, dt, tzname):
+        if dt.tzname() != tzname:
+            new_dt = tz.enfold(dt, fold=1)
+            if new_dt.tzname() == tzname:
+                return new_dt
+
+        return dt
+
+    def _recombine_skipped(self, tokens, skipped_idxs):
+        """
+        >>> tokens = ["foo", " ", "bar", " ", "19June2000", "baz"]
+        >>> skipped_idxs = [0, 1, 2, 5]
+        >>> _recombine_skipped(tokens, skipped_idxs)
+        ["foo bar", "baz"]
+        """
+        skipped_tokens = []
+        for i, idx in enumerate(sorted(skipped_idxs)):
+            if i > 0 and idx - 1 == skipped_idxs[i - 1]:
+                skipped_tokens[-1] = skipped_tokens[-1] + tokens[idx]
+            else:
+                skipped_tokens.append(tokens[idx])
+
+        return skipped_tokens
+
+
+DEFAULTPARSER = parser()
+
+
+def parse(timestr, parserinfo=None, **kwargs):
+    """
+
+    Parse a string in one of the supported formats, using the
+    ``parserinfo`` parameters.
+
+    :param timestr:
+        A string containing a date/time stamp.
+
+    :param parserinfo:
+        A :class:`parserinfo` object containing parameters for the parser.
+        If ``None``, the default arguments to the :class:`parserinfo`
+        constructor are used.
+
+    The ``**kwargs`` parameter takes the following keyword arguments:
+
+    :param default:
+        The default datetime object, if this is a datetime object and not
+        ``None``, elements specified in ``timestr`` replace elements in the
+        default object.
+
+    :param ignoretz:
+        If set ``True``, time zones in parsed strings are ignored and a naive
+        :class:`datetime` object is returned.
+
+    :param tzinfos:
+        Additional time zone names / aliases which may be present in the
+        string. This argument maps time zone names (and optionally offsets
+        from those time zones) to time zones. This parameter can be a
+        dictionary with timezone aliases mapping time zone names to time
+        zones or a function taking two parameters (``tzname`` and
+        ``tzoffset``) and returning a time zone.
+
+        The timezones to which the names are mapped can be an integer
+        offset from UTC in seconds or a :class:`tzinfo` object.
+
+        .. doctest::
+           :options: +NORMALIZE_WHITESPACE
+
+            >>> from dateutil.parser import parse
+            >>> from dateutil.tz import gettz
+            >>> tzinfos = {"BRST": -7200, "CST": gettz("America/Chicago")}
+            >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
+            datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))
+            >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
+            datetime.datetime(2012, 1, 19, 17, 21,
+                              tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))
+
+        This parameter is ignored if ``ignoretz`` is set.
+
+    :param dayfirst:
+        Whether to interpret the first value in an ambiguous 3-integer date
+        (e.g. 01/05/09) as the day (``True``) or month (``False``). If
+        ``yearfirst`` is set to ``True``, this distinguishes between YDM and
+        YMD. If set to ``None``, this value is retrieved from the current
+        :class:`parserinfo` object (which itself defaults to ``False``).
+
+    :param yearfirst:
+        Whether to interpret the first value in an ambiguous 3-integer date
+        (e.g. 01/05/09) as the year. If ``True``, the first number is taken to
+        be the year, otherwise the last number is taken to be the year. If
+        this is set to ``None``, the value is retrieved from the current
+        :class:`parserinfo` object (which itself defaults to ``False``).
+
+    :param fuzzy:
+        Whether to allow fuzzy parsing, allowing for string like "Today is
+        January 1, 2047 at 8:21:00AM".
+
+    :param fuzzy_with_tokens:
+        If ``True``, ``fuzzy`` is automatically set to True, and the parser
+        will return a tuple where the first element is the parsed
+        :class:`datetime.datetime` datetimestamp and the second element is
+        a tuple containing the portions of the string which were ignored:
+
+        .. doctest::
+
+            >>> from dateutil.parser import parse
+            >>> parse("Today is January 1, 2047 at 8:21:00AM", fuzzy_with_tokens=True)
+            (datetime.datetime(2047, 1, 1, 8, 21), (u'Today is ', u' ', u'at '))
+
+    :return:
+        Returns a :class:`datetime.datetime` object or, if the
+        ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
+        first element being a :class:`datetime.datetime` object, the second
+        a tuple containing the fuzzy tokens.
+
+    :raises ParserError:
+        Raised for invalid or unknown string formats, if the provided
+        :class:`tzinfo` is not in a valid format, or if an invalid date would
+        be created.
+
+    :raises OverflowError:
+        Raised if the parsed date exceeds the largest valid C integer on
+        your system.
+    """
+    if parserinfo:
+        return parser(parserinfo).parse(timestr, **kwargs)
+    else:
+        return DEFAULTPARSER.parse(timestr, **kwargs)
+
+
+class _tzparser(object):
+
+    class _result(_resultbase):
+
+        __slots__ = ["stdabbr", "stdoffset", "dstabbr", "dstoffset",
+                     "start", "end"]
+
+        class _attr(_resultbase):
+            __slots__ = ["month", "week", "weekday",
+                         "yday", "jyday", "day", "time"]
+
+        def __repr__(self):
+            return self._repr("")
+
+        def __init__(self):
+            _resultbase.__init__(self)
+            self.start = self._attr()
+            self.end = self._attr()
+
+    def parse(self, tzstr):
+        res = self._result()
+        l = [x for x in re.split(r'([,:.]|[a-zA-Z]+|[0-9]+)',tzstr) if x]
+        used_idxs = list()
+        try:
+
+            len_l = len(l)
+
+            i = 0
+            while i < len_l:
+                # BRST+3[BRDT[+2]]
+                j = i
+                while j < len_l and not [x for x in l[j]
+                                         if x in "0123456789:,-+"]:
+                    j += 1
+                if j != i:
+                    if not res.stdabbr:
+                        offattr = "stdoffset"
+                        res.stdabbr = "".join(l[i:j])
+                    else:
+                        offattr = "dstoffset"
+                        res.dstabbr = "".join(l[i:j])
+
+                    for ii in range(j):
+                        used_idxs.append(ii)
+                    i = j
+                    if (i < len_l and (l[i] in ('+', '-') or l[i][0] in
+                                       "0123456789")):
+                        if l[i] in ('+', '-'):
+                            # Yes, that's right.  See the TZ variable
+                            # documentation.
+                            signal = (1, -1)[l[i] == '+']
+                            used_idxs.append(i)
+                            i += 1
+                        else:
+                            signal = -1
+                        len_li = len(l[i])
+                        if len_li == 4:
+                            # -0300
+                            setattr(res, offattr, (int(l[i][:2]) * 3600 +
+                                                   int(l[i][2:]) * 60) * signal)
+                        elif i + 1 < len_l and l[i + 1] == ':':
+                            # -03:00
+                            setattr(res, offattr,
+                                    (int(l[i]) * 3600 +
+                                     int(l[i + 2]) * 60) * signal)
+                            used_idxs.append(i)
+                            i += 2
+                        elif len_li <= 2:
+                            # -[0]3
+                            setattr(res, offattr,
+                                    int(l[i][:2]) * 3600 * signal)
+                        else:
+                            return None
+                        used_idxs.append(i)
+                        i += 1
+                    if res.dstabbr:
+                        break
+                else:
+                    break
+
+
+            if i < len_l:
+                for j in range(i, len_l):
+                    if l[j] == ';':
+                        l[j] = ','
+
+                assert l[i] == ','
+
+                i += 1
+
+            if i >= len_l:
+                pass
+            elif (8 <= l.count(',') <= 9 and
+                  not [y for x in l[i:] if x != ','
+                       for y in x if y not in "0123456789+-"]):
+                # GMT0BST,3,0,30,3600,10,0,26,7200[,3600]
+                for x in (res.start, res.end):
+                    x.month = int(l[i])
+                    used_idxs.append(i)
+                    i += 2
+                    if l[i] == '-':
+                        value = int(l[i + 1]) * -1
+                        used_idxs.append(i)
+                        i += 1
+                    else:
+                        value = int(l[i])
+                    used_idxs.append(i)
+                    i += 2
+                    if value:
+                        x.week = value
+                        x.weekday = (int(l[i]) - 1) % 7
+                    else:
+                        x.day = int(l[i])
+                    used_idxs.append(i)
+                    i += 2
+                    x.time = int(l[i])
+                    used_idxs.append(i)
+                    i += 2
+                if i < len_l:
+                    if l[i] in ('-', '+'):
+                        signal = (-1, 1)[l[i] == "+"]
+                        used_idxs.append(i)
+                        i += 1
+                    else:
+                        signal = 1
+                    used_idxs.append(i)
+                    res.dstoffset = (res.stdoffset + int(l[i]) * signal)
+
+                # This was a made-up format that is not in normal use
+                warn(('Parsed time zone "%s"' % tzstr) +
+                     'is in a non-standard dateutil-specific format, which ' +
+                     'is now deprecated; support for parsing this format ' +
+                     'will be removed in future versions. It is recommended ' +
+                     'that you switch to a standard format like the GNU ' +
+                     'TZ variable format.', tz.DeprecatedTzFormatWarning)
+            elif (l.count(',') == 2 and l[i:].count('/') <= 2 and
+                  not [y for x in l[i:] if x not in (',', '/', 'J', 'M',
+                                                     '.', '-', ':')
+                       for y in x if y not in "0123456789"]):
+                for x in (res.start, res.end):
+                    if l[i] == 'J':
+                        # non-leap year day (1 based)
+                        used_idxs.append(i)
+                        i += 1
+                        x.jyday = int(l[i])
+                    elif l[i] == 'M':
+                        # month[-.]week[-.]weekday
+                        used_idxs.append(i)
+                        i += 1
+                        x.month = int(l[i])
+                        used_idxs.append(i)
+                        i += 1
+                        assert l[i] in ('-', '.')
+                        used_idxs.append(i)
+                        i += 1
+                        x.week = int(l[i])
+                        if x.week == 5:
+                            x.week = -1
+                        used_idxs.append(i)
+                        i += 1
+                        assert l[i] in ('-', '.')
+                        used_idxs.append(i)
+                        i += 1
+                        x.weekday = (int(l[i]) - 1) % 7
+                    else:
+                        # year day (zero based)
+                        x.yday = int(l[i]) + 1
+
+                    used_idxs.append(i)
+                    i += 1
+
+                    if i < len_l and l[i] == '/':
+                        used_idxs.append(i)
+                        i += 1
+                        # start time
+                        len_li = len(l[i])
+                        if len_li == 4:
+                            # -0300
+                            x.time = (int(l[i][:2]) * 3600 +
+                                      int(l[i][2:]) * 60)
+                        elif i + 1 < len_l and l[i + 1] == ':':
+                            # -03:00
+                            x.time = int(l[i]) * 3600 + int(l[i + 2]) * 60
+                            used_idxs.append(i)
+                            i += 2
+                            if i + 1 < len_l and l[i + 1] == ':':
+                                used_idxs.append(i)
+                                i += 2
+                                x.time += int(l[i])
+                        elif len_li <= 2:
+                            # -[0]3
+                            x.time = (int(l[i][:2]) * 3600)
+                        else:
+                            return None
+                        used_idxs.append(i)
+                        i += 1
+
+                    assert i == len_l or l[i] == ','
+
+                    i += 1
+
+                assert i >= len_l
+
+        except (IndexError, ValueError, AssertionError):
+            return None
+
+        unused_idxs = set(range(len_l)).difference(used_idxs)
+        res.any_unused_tokens = not {l[n] for n in unused_idxs}.issubset({",",":"})
+        return res
+
+
+DEFAULTTZPARSER = _tzparser()
+
+
+def _parsetz(tzstr):
+    return DEFAULTTZPARSER.parse(tzstr)
+
+
+class ParserError(ValueError):
+    """Exception subclass used for any failure to parse a datetime string.
+
+    This is a subclass of :py:exc:`ValueError`, and should be raised any time
+    earlier versions of ``dateutil`` would have raised ``ValueError``.
+
+    .. versionadded:: 2.8.1
+    """
+    def __str__(self):
+        try:
+            return self.args[0] % self.args[1:]
+        except (TypeError, IndexError):
+            return super(ParserError, self).__str__()
+
+    def __repr__(self):
+        args = ", ".join("'%s'" % arg for arg in self.args)
+        return "%s(%s)" % (self.__class__.__name__, args)
+
+
+class UnknownTimezoneWarning(RuntimeWarning):
+    """Raised when the parser finds a timezone it cannot parse into a tzinfo.
+
+    .. versionadded:: 2.7.0
+    """
+# vim:ts=4:sw=4:et
diff --git a/venv/Lib/site-packages/dateutil/parser/isoparser.py b/venv/Lib/site-packages/dateutil/parser/isoparser.py
new file mode 100644
index 0000000..5d7bee3
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/parser/isoparser.py
@@ -0,0 +1,416 @@
+# -*- coding: utf-8 -*-
+"""
+This module offers a parser for ISO-8601 strings
+
+It is intended to support all valid date, time and datetime formats per the
+ISO-8601 specification.
+
+..versionadded:: 2.7.0
+"""
+from datetime import datetime, timedelta, time, date
+import calendar
+from dateutil import tz
+
+from functools import wraps
+
+import re
+import six
+
+__all__ = ["isoparse", "isoparser"]
+
+
+def _takes_ascii(f):
+    @wraps(f)
+    def func(self, str_in, *args, **kwargs):
+        # If it's a stream, read the whole thing
+        str_in = getattr(str_in, 'read', lambda: str_in)()
+
+        # If it's unicode, turn it into bytes, since ISO-8601 only covers ASCII
+        if isinstance(str_in, six.text_type):
+            # ASCII is the same in UTF-8
+            try:
+                str_in = str_in.encode('ascii')
+            except UnicodeEncodeError as e:
+                msg = 'ISO-8601 strings should contain only ASCII characters'
+                six.raise_from(ValueError(msg), e)
+
+        return f(self, str_in, *args, **kwargs)
+
+    return func
+
+
+class isoparser(object):
+    def __init__(self, sep=None):
+        """
+        :param sep:
+            A single character that separates date and time portions. If
+            ``None``, the parser will accept any single character.
+            For strict ISO-8601 adherence, pass ``'T'``.
+        """
+        if sep is not None:
+            if (len(sep) != 1 or ord(sep) >= 128 or sep in '0123456789'):
+                raise ValueError('Separator must be a single, non-numeric ' +
+                                 'ASCII character')
+
+            sep = sep.encode('ascii')
+
+        self._sep = sep
+
+    @_takes_ascii
+    def isoparse(self, dt_str):
+        """
+        Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.
+
+        An ISO-8601 datetime string consists of a date portion, followed
+        optionally by a time portion - the date and time portions are separated
+        by a single character separator, which is ``T`` in the official
+        standard. Incomplete date formats (such as ``YYYY-MM``) may *not* be
+        combined with a time portion.
+
+        Supported date formats are:
+
+        Common:
+
+        - ``YYYY``
+        - ``YYYY-MM`` or ``YYYYMM``
+        - ``YYYY-MM-DD`` or ``YYYYMMDD``
+
+        Uncommon:
+
+        - ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)
+        - ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day
+
+        The ISO week and day numbering follows the same logic as
+        :func:`datetime.date.isocalendar`.
+
+        Supported time formats are:
+
+        - ``hh``
+        - ``hh:mm`` or ``hhmm``
+        - ``hh:mm:ss`` or ``hhmmss``
+        - ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)
+
+        Midnight is a special case for `hh`, as the standard supports both
+        00:00 and 24:00 as a representation. The decimal separator can be
+        either a dot or a comma.
+
+
+        .. caution::
+
+            Support for fractional components other than seconds is part of the
+            ISO-8601 standard, but is not currently implemented in this parser.
+
+        Supported time zone offset formats are:
+
+        - `Z` (UTC)
+        - `±HH:MM`
+        - `±HHMM`
+        - `±HH`
+
+        Offsets will be represented as :class:`dateutil.tz.tzoffset` objects,
+        with the exception of UTC, which will be represented as
+        :class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such
+        as `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.
+
+        :param dt_str:
+            A string or stream containing only an ISO-8601 datetime string
+
+        :return:
+            Returns a :class:`datetime.datetime` representing the string.
+            Unspecified components default to their lowest value.
+
+        .. warning::
+
+            As of version 2.7.0, the strictness of the parser should not be
+            considered a stable part of the contract. Any valid ISO-8601 string
+            that parses correctly with the default settings will continue to
+            parse correctly in future versions, but invalid strings that
+            currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not
+            guaranteed to continue failing in future versions if they encode
+            a valid date.
+
+        .. versionadded:: 2.7.0
+        """
+        components, pos = self._parse_isodate(dt_str)
+
+        if len(dt_str) > pos:
+            if self._sep is None or dt_str[pos:pos + 1] == self._sep:
+                components += self._parse_isotime(dt_str[pos + 1:])
+            else:
+                raise ValueError('String contains unknown ISO components')
+
+        if len(components) > 3 and components[3] == 24:
+            components[3] = 0
+            return datetime(*components) + timedelta(days=1)
+
+        return datetime(*components)
+
+    @_takes_ascii
+    def parse_isodate(self, datestr):
+        """
+        Parse the date portion of an ISO string.
+
+        :param datestr:
+            The string portion of an ISO string, without a separator
+
+        :return:
+            Returns a :class:`datetime.date` object
+        """
+        components, pos = self._parse_isodate(datestr)
+        if pos < len(datestr):
+            raise ValueError('String contains unknown ISO ' +
+                             'components: {!r}'.format(datestr.decode('ascii')))
+        return date(*components)
+
+    @_takes_ascii
+    def parse_isotime(self, timestr):
+        """
+        Parse the time portion of an ISO string.
+
+        :param timestr:
+            The time portion of an ISO string, without a separator
+
+        :return:
+            Returns a :class:`datetime.time` object
+        """
+        components = self._parse_isotime(timestr)
+        if components[0] == 24:
+            components[0] = 0
+        return time(*components)
+
+    @_takes_ascii
+    def parse_tzstr(self, tzstr, zero_as_utc=True):
+        """
+        Parse a valid ISO time zone string.
+
+        See :func:`isoparser.isoparse` for details on supported formats.
+
+        :param tzstr:
+            A string representing an ISO time zone offset
+
+        :param zero_as_utc:
+            Whether to return :class:`dateutil.tz.tzutc` for zero-offset zones
+
+        :return:
+            Returns :class:`dateutil.tz.tzoffset` for offsets and
+            :class:`dateutil.tz.tzutc` for ``Z`` and (if ``zero_as_utc`` is
+            specified) offsets equivalent to UTC.
+        """
+        return self._parse_tzstr(tzstr, zero_as_utc=zero_as_utc)
+
+    # Constants
+    _DATE_SEP = b'-'
+    _TIME_SEP = b':'
+    _FRACTION_REGEX = re.compile(b'[\\.,]([0-9]+)')
+
+    def _parse_isodate(self, dt_str):
+        try:
+            return self._parse_isodate_common(dt_str)
+        except ValueError:
+            return self._parse_isodate_uncommon(dt_str)
+
+    def _parse_isodate_common(self, dt_str):
+        len_str = len(dt_str)
+        components = [1, 1, 1]
+
+        if len_str < 4:
+            raise ValueError('ISO string too short')
+
+        # Year
+        components[0] = int(dt_str[0:4])
+        pos = 4
+        if pos >= len_str:
+            return components, pos
+
+        has_sep = dt_str[pos:pos + 1] == self._DATE_SEP
+        if has_sep:
+            pos += 1
+
+        # Month
+        if len_str - pos < 2:
+            raise ValueError('Invalid common month')
+
+        components[1] = int(dt_str[pos:pos + 2])
+        pos += 2
+
+        if pos >= len_str:
+            if has_sep:
+                return components, pos
+            else:
+                raise ValueError('Invalid ISO format')
+
+        if has_sep:
+            if dt_str[pos:pos + 1] != self._DATE_SEP:
+                raise ValueError('Invalid separator in ISO string')
+            pos += 1
+
+        # Day
+        if len_str - pos < 2:
+            raise ValueError('Invalid common day')
+        components[2] = int(dt_str[pos:pos + 2])
+        return components, pos + 2
+
+    def _parse_isodate_uncommon(self, dt_str):
+        if len(dt_str) < 4:
+            raise ValueError('ISO string too short')
+
+        # All ISO formats start with the year
+        year = int(dt_str[0:4])
+
+        has_sep = dt_str[4:5] == self._DATE_SEP
+
+        pos = 4 + has_sep       # Skip '-' if it's there
+        if dt_str[pos:pos + 1] == b'W':
+            # YYYY-?Www-?D?
+            pos += 1
+            weekno = int(dt_str[pos:pos + 2])
+            pos += 2
+
+            dayno = 1
+            if len(dt_str) > pos:
+                if (dt_str[pos:pos + 1] == self._DATE_SEP) != has_sep:
+                    raise ValueError('Inconsistent use of dash separator')
+
+                pos += has_sep
+
+                dayno = int(dt_str[pos:pos + 1])
+                pos += 1
+
+            base_date = self._calculate_weekdate(year, weekno, dayno)
+        else:
+            # YYYYDDD or YYYY-DDD
+            if len(dt_str) - pos < 3:
+                raise ValueError('Invalid ordinal day')
+
+            ordinal_day = int(dt_str[pos:pos + 3])
+            pos += 3
+
+            if ordinal_day < 1 or ordinal_day > (365 + calendar.isleap(year)):
+                raise ValueError('Invalid ordinal day' +
+                                 ' {} for year {}'.format(ordinal_day, year))
+
+            base_date = date(year, 1, 1) + timedelta(days=ordinal_day - 1)
+
+        components = [base_date.year, base_date.month, base_date.day]
+        return components, pos
+
+    def _calculate_weekdate(self, year, week, day):
+        """
+        Calculate the day of corresponding to the ISO year-week-day calendar.
+
+        This function is effectively the inverse of
+        :func:`datetime.date.isocalendar`.
+
+        :param year:
+            The year in the ISO calendar
+
+        :param week:
+            The week in the ISO calendar - range is [1, 53]
+
+        :param day:
+            The day in the ISO calendar - range is [1 (MON), 7 (SUN)]
+
+        :return:
+            Returns a :class:`datetime.date`
+        """
+        if not 0 < week < 54:
+            raise ValueError('Invalid week: {}'.format(week))
+
+        if not 0 < day < 8:     # Range is 1-7
+            raise ValueError('Invalid weekday: {}'.format(day))
+
+        # Get week 1 for the specific year:
+        jan_4 = date(year, 1, 4)   # Week 1 always has January 4th in it
+        week_1 = jan_4 - timedelta(days=jan_4.isocalendar()[2] - 1)
+
+        # Now add the specific number of weeks and days to get what we want
+        week_offset = (week - 1) * 7 + (day - 1)
+        return week_1 + timedelta(days=week_offset)
+
+    def _parse_isotime(self, timestr):
+        len_str = len(timestr)
+        components = [0, 0, 0, 0, None]
+        pos = 0
+        comp = -1
+
+        if len_str < 2:
+            raise ValueError('ISO time too short')
+
+        has_sep = False
+
+        while pos < len_str and comp < 5:
+            comp += 1
+
+            if timestr[pos:pos + 1] in b'-+Zz':
+                # Detect time zone boundary
+                components[-1] = self._parse_tzstr(timestr[pos:])
+                pos = len_str
+                break
+
+            if comp == 1 and timestr[pos:pos+1] == self._TIME_SEP:
+                has_sep = True
+                pos += 1
+            elif comp == 2 and has_sep:
+                if timestr[pos:pos+1] != self._TIME_SEP:
+                    raise ValueError('Inconsistent use of colon separator')
+                pos += 1
+
+            if comp < 3:
+                # Hour, minute, second
+                components[comp] = int(timestr[pos:pos + 2])
+                pos += 2
+
+            if comp == 3:
+                # Fraction of a second
+                frac = self._FRACTION_REGEX.match(timestr[pos:])
+                if not frac:
+                    continue
+
+                us_str = frac.group(1)[:6]  # Truncate to microseconds
+                components[comp] = int(us_str) * 10**(6 - len(us_str))
+                pos += len(frac.group())
+
+        if pos < len_str:
+            raise ValueError('Unused components in ISO string')
+
+        if components[0] == 24:
+            # Standard supports 00:00 and 24:00 as representations of midnight
+            if any(component != 0 for component in components[1:4]):
+                raise ValueError('Hour may only be 24 at 24:00:00.000')
+
+        return components
+
+    def _parse_tzstr(self, tzstr, zero_as_utc=True):
+        if tzstr == b'Z' or tzstr == b'z':
+            return tz.UTC
+
+        if len(tzstr) not in {3, 5, 6}:
+            raise ValueError('Time zone offset must be 1, 3, 5 or 6 characters')
+
+        if tzstr[0:1] == b'-':
+            mult = -1
+        elif tzstr[0:1] == b'+':
+            mult = 1
+        else:
+            raise ValueError('Time zone offset requires sign')
+
+        hours = int(tzstr[1:3])
+        if len(tzstr) == 3:
+            minutes = 0
+        else:
+            minutes = int(tzstr[(4 if tzstr[3:4] == self._TIME_SEP else 3):])
+
+        if zero_as_utc and hours == 0 and minutes == 0:
+            return tz.UTC
+        else:
+            if minutes > 59:
+                raise ValueError('Invalid minutes in time zone offset')
+
+            if hours > 23:
+                raise ValueError('Invalid hours in time zone offset')
+
+            return tz.tzoffset(None, mult * (hours * 60 + minutes) * 60)
+
+
+DEFAULT_ISOPARSER = isoparser()
+isoparse = DEFAULT_ISOPARSER.isoparse
diff --git a/venv/Lib/site-packages/dateutil/relativedelta.py b/venv/Lib/site-packages/dateutil/relativedelta.py
new file mode 100644
index 0000000..a9e85f7
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/relativedelta.py
@@ -0,0 +1,599 @@
+# -*- coding: utf-8 -*-
+import datetime
+import calendar
+
+import operator
+from math import copysign
+
+from six import integer_types
+from warnings import warn
+
+from ._common import weekday
+
+MO, TU, WE, TH, FR, SA, SU = weekdays = tuple(weekday(x) for x in range(7))
+
+__all__ = ["relativedelta", "MO", "TU", "WE", "TH", "FR", "SA", "SU"]
+
+
+class relativedelta(object):
+    """
+    The relativedelta type is designed to be applied to an existing datetime and
+    can replace specific components of that datetime, or represents an interval
+    of time.
+
+    It is based on the specification of the excellent work done by M.-A. Lemburg
+    in his
+    `mx.DateTime <https://www.egenix.com/products/python/mxBase/mxDateTime/>`_ extension.
+    However, notice that this type does *NOT* implement the same algorithm as
+    his work. Do *NOT* expect it to behave like mx.DateTime's counterpart.
+
+    There are two different ways to build a relativedelta instance. The
+    first one is passing it two date/datetime classes::
+
+        relativedelta(datetime1, datetime2)
+
+    The second one is passing it any number of the following keyword arguments::
+
+        relativedelta(arg1=x,arg2=y,arg3=z...)
+
+        year, month, day, hour, minute, second, microsecond:
+            Absolute information (argument is singular); adding or subtracting a
+            relativedelta with absolute information does not perform an arithmetic
+            operation, but rather REPLACES the corresponding value in the
+            original datetime with the value(s) in relativedelta.
+
+        years, months, weeks, days, hours, minutes, seconds, microseconds:
+            Relative information, may be negative (argument is plural); adding
+            or subtracting a relativedelta with relative information performs
+            the corresponding arithmetic operation on the original datetime value
+            with the information in the relativedelta.
+
+        weekday: 
+            One of the weekday instances (MO, TU, etc) available in the
+            relativedelta module. These instances may receive a parameter N,
+            specifying the Nth weekday, which could be positive or negative
+            (like MO(+1) or MO(-2)). Not specifying it is the same as specifying
+            +1. You can also use an integer, where 0=MO. This argument is always
+            relative e.g. if the calculated date is already Monday, using MO(1)
+            or MO(-1) won't change the day. To effectively make it absolute, use
+            it in combination with the day argument (e.g. day=1, MO(1) for first
+            Monday of the month).
+
+        leapdays:
+            Will add given days to the date found, if year is a leap
+            year, and the date found is post 28 of february.
+
+        yearday, nlyearday:
+            Set the yearday or the non-leap year day (jump leap days).
+            These are converted to day/month/leapdays information.
+
+    There are relative and absolute forms of the keyword
+    arguments. The plural is relative, and the singular is
+    absolute. For each argument in the order below, the absolute form
+    is applied first (by setting each attribute to that value) and
+    then the relative form (by adding the value to the attribute).
+
+    The order of attributes considered when this relativedelta is
+    added to a datetime is:
+
+    1. Year
+    2. Month
+    3. Day
+    4. Hours
+    5. Minutes
+    6. Seconds
+    7. Microseconds
+
+    Finally, weekday is applied, using the rule described above.
+
+    For example
+
+    >>> from datetime import datetime
+    >>> from dateutil.relativedelta import relativedelta, MO
+    >>> dt = datetime(2018, 4, 9, 13, 37, 0)
+    >>> delta = relativedelta(hours=25, day=1, weekday=MO(1))
+    >>> dt + delta
+    datetime.datetime(2018, 4, 2, 14, 37)
+
+    First, the day is set to 1 (the first of the month), then 25 hours
+    are added, to get to the 2nd day and 14th hour, finally the
+    weekday is applied, but since the 2nd is already a Monday there is
+    no effect.
+
+    """
+
+    def __init__(self, dt1=None, dt2=None,
+                 years=0, months=0, days=0, leapdays=0, weeks=0,
+                 hours=0, minutes=0, seconds=0, microseconds=0,
+                 year=None, month=None, day=None, weekday=None,
+                 yearday=None, nlyearday=None,
+                 hour=None, minute=None, second=None, microsecond=None):
+
+        if dt1 and dt2:
+            # datetime is a subclass of date. So both must be date
+            if not (isinstance(dt1, datetime.date) and
+                    isinstance(dt2, datetime.date)):
+                raise TypeError("relativedelta only diffs datetime/date")
+
+            # We allow two dates, or two datetimes, so we coerce them to be
+            # of the same type
+            if (isinstance(dt1, datetime.datetime) !=
+                    isinstance(dt2, datetime.datetime)):
+                if not isinstance(dt1, datetime.datetime):
+                    dt1 = datetime.datetime.fromordinal(dt1.toordinal())
+                elif not isinstance(dt2, datetime.datetime):
+                    dt2 = datetime.datetime.fromordinal(dt2.toordinal())
+
+            self.years = 0
+            self.months = 0
+            self.days = 0
+            self.leapdays = 0
+            self.hours = 0
+            self.minutes = 0
+            self.seconds = 0
+            self.microseconds = 0
+            self.year = None
+            self.month = None
+            self.day = None
+            self.weekday = None
+            self.hour = None
+            self.minute = None
+            self.second = None
+            self.microsecond = None
+            self._has_time = 0
+
+            # Get year / month delta between the two
+            months = (dt1.year - dt2.year) * 12 + (dt1.month - dt2.month)
+            self._set_months(months)
+
+            # Remove the year/month delta so the timedelta is just well-defined
+            # time units (seconds, days and microseconds)
+            dtm = self.__radd__(dt2)
+
+            # If we've overshot our target, make an adjustment
+            if dt1 < dt2:
+                compare = operator.gt
+                increment = 1
+            else:
+                compare = operator.lt
+                increment = -1
+
+            while compare(dt1, dtm):
+                months += increment
+                self._set_months(months)
+                dtm = self.__radd__(dt2)
+
+            # Get the timedelta between the "months-adjusted" date and dt1
+            delta = dt1 - dtm
+            self.seconds = delta.seconds + delta.days * 86400
+            self.microseconds = delta.microseconds
+        else:
+            # Check for non-integer values in integer-only quantities
+            if any(x is not None and x != int(x) for x in (years, months)):
+                raise ValueError("Non-integer years and months are "
+                                 "ambiguous and not currently supported.")
+
+            # Relative information
+            self.years = int(years)
+            self.months = int(months)
+            self.days = days + weeks * 7
+            self.leapdays = leapdays
+            self.hours = hours
+            self.minutes = minutes
+            self.seconds = seconds
+            self.microseconds = microseconds
+
+            # Absolute information
+            self.year = year
+            self.month = month
+            self.day = day
+            self.hour = hour
+            self.minute = minute
+            self.second = second
+            self.microsecond = microsecond
+
+            if any(x is not None and int(x) != x
+                   for x in (year, month, day, hour,
+                             minute, second, microsecond)):
+                # For now we'll deprecate floats - later it'll be an error.
+                warn("Non-integer value passed as absolute information. " +
+                     "This is not a well-defined condition and will raise " +
+                     "errors in future versions.", DeprecationWarning)
+
+            if isinstance(weekday, integer_types):
+                self.weekday = weekdays[weekday]
+            else:
+                self.weekday = weekday
+
+            yday = 0
+            if nlyearday:
+                yday = nlyearday
+            elif yearday:
+                yday = yearday
+                if yearday > 59:
+                    self.leapdays = -1
+            if yday:
+                ydayidx = [31, 59, 90, 120, 151, 181, 212,
+                           243, 273, 304, 334, 366]
+                for idx, ydays in enumerate(ydayidx):
+                    if yday <= ydays:
+                        self.month = idx+1
+                        if idx == 0:
+                            self.day = yday
+                        else:
+                            self.day = yday-ydayidx[idx-1]
+                        break
+                else:
+                    raise ValueError("invalid year day (%d)" % yday)
+
+        self._fix()
+
+    def _fix(self):
+        if abs(self.microseconds) > 999999:
+            s = _sign(self.microseconds)
+            div, mod = divmod(self.microseconds * s, 1000000)
+            self.microseconds = mod * s
+            self.seconds += div * s
+        if abs(self.seconds) > 59:
+            s = _sign(self.seconds)
+            div, mod = divmod(self.seconds * s, 60)
+            self.seconds = mod * s
+            self.minutes += div * s
+        if abs(self.minutes) > 59:
+            s = _sign(self.minutes)
+            div, mod = divmod(self.minutes * s, 60)
+            self.minutes = mod * s
+            self.hours += div * s
+        if abs(self.hours) > 23:
+            s = _sign(self.hours)
+            div, mod = divmod(self.hours * s, 24)
+            self.hours = mod * s
+            self.days += div * s
+        if abs(self.months) > 11:
+            s = _sign(self.months)
+            div, mod = divmod(self.months * s, 12)
+            self.months = mod * s
+            self.years += div * s
+        if (self.hours or self.minutes or self.seconds or self.microseconds
+                or self.hour is not None or self.minute is not None or
+                self.second is not None or self.microsecond is not None):
+            self._has_time = 1
+        else:
+            self._has_time = 0
+
+    @property
+    def weeks(self):
+        return int(self.days / 7.0)
+
+    @weeks.setter
+    def weeks(self, value):
+        self.days = self.days - (self.weeks * 7) + value * 7
+
+    def _set_months(self, months):
+        self.months = months
+        if abs(self.months) > 11:
+            s = _sign(self.months)
+            div, mod = divmod(self.months * s, 12)
+            self.months = mod * s
+            self.years = div * s
+        else:
+            self.years = 0
+
+    def normalized(self):
+        """
+        Return a version of this object represented entirely using integer
+        values for the relative attributes.
+
+        >>> relativedelta(days=1.5, hours=2).normalized()
+        relativedelta(days=+1, hours=+14)
+
+        :return:
+            Returns a :class:`dateutil.relativedelta.relativedelta` object.
+        """
+        # Cascade remainders down (rounding each to roughly nearest microsecond)
+        days = int(self.days)
+
+        hours_f = round(self.hours + 24 * (self.days - days), 11)
+        hours = int(hours_f)
+
+        minutes_f = round(self.minutes + 60 * (hours_f - hours), 10)
+        minutes = int(minutes_f)
+
+        seconds_f = round(self.seconds + 60 * (minutes_f - minutes), 8)
+        seconds = int(seconds_f)
+
+        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds))
+
+        # Constructor carries overflow back up with call to _fix()
+        return self.__class__(years=self.years, months=self.months,
+                              days=days, hours=hours, minutes=minutes,
+                              seconds=seconds, microseconds=microseconds,
+                              leapdays=self.leapdays, year=self.year,
+                              month=self.month, day=self.day,
+                              weekday=self.weekday, hour=self.hour,
+                              minute=self.minute, second=self.second,
+                              microsecond=self.microsecond)
+
+    def __add__(self, other):
+        if isinstance(other, relativedelta):
+            return self.__class__(years=other.years + self.years,
+                                 months=other.months + self.months,
+                                 days=other.days + self.days,
+                                 hours=other.hours + self.hours,
+                                 minutes=other.minutes + self.minutes,
+                                 seconds=other.seconds + self.seconds,
+                                 microseconds=(other.microseconds +
+                                               self.microseconds),
+                                 leapdays=other.leapdays or self.leapdays,
+                                 year=(other.year if other.year is not None
+                                       else self.year),
+                                 month=(other.month if other.month is not None
+                                        else self.month),
+                                 day=(other.day if other.day is not None
+                                      else self.day),
+                                 weekday=(other.weekday if other.weekday is not None
+                                          else self.weekday),
+                                 hour=(other.hour if other.hour is not None
+                                       else self.hour),
+                                 minute=(other.minute if other.minute is not None
+                                         else self.minute),
+                                 second=(other.second if other.second is not None
+                                         else self.second),
+                                 microsecond=(other.microsecond if other.microsecond
+                                              is not None else
+                                              self.microsecond))
+        if isinstance(other, datetime.timedelta):
+            return self.__class__(years=self.years,
+                                  months=self.months,
+                                  days=self.days + other.days,
+                                  hours=self.hours,
+                                  minutes=self.minutes,
+                                  seconds=self.seconds + other.seconds,
+                                  microseconds=self.microseconds + other.microseconds,
+                                  leapdays=self.leapdays,
+                                  year=self.year,
+                                  month=self.month,
+                                  day=self.day,
+                                  weekday=self.weekday,
+                                  hour=self.hour,
+                                  minute=self.minute,
+                                  second=self.second,
+                                  microsecond=self.microsecond)
+        if not isinstance(other, datetime.date):
+            return NotImplemented
+        elif self._has_time and not isinstance(other, datetime.datetime):
+            other = datetime.datetime.fromordinal(other.toordinal())
+        year = (self.year or other.year)+self.years
+        month = self.month or other.month
+        if self.months:
+            assert 1 <= abs(self.months) <= 12
+            month += self.months
+            if month > 12:
+                year += 1
+                month -= 12
+            elif month < 1:
+                year -= 1
+                month += 12
+        day = min(calendar.monthrange(year, month)[1],
+                  self.day or other.day)
+        repl = {"year": year, "month": month, "day": day}
+        for attr in ["hour", "minute", "second", "microsecond"]:
+            value = getattr(self, attr)
+            if value is not None:
+                repl[attr] = value
+        days = self.days
+        if self.leapdays and month > 2 and calendar.isleap(year):
+            days += self.leapdays
+        ret = (other.replace(**repl)
+               + datetime.timedelta(days=days,
+                                    hours=self.hours,
+                                    minutes=self.minutes,
+                                    seconds=self.seconds,
+                                    microseconds=self.microseconds))
+        if self.weekday:
+            weekday, nth = self.weekday.weekday, self.weekday.n or 1
+            jumpdays = (abs(nth) - 1) * 7
+            if nth > 0:
+                jumpdays += (7 - ret.weekday() + weekday) % 7
+            else:
+                jumpdays += (ret.weekday() - weekday) % 7
+                jumpdays *= -1
+            ret += datetime.timedelta(days=jumpdays)
+        return ret
+
+    def __radd__(self, other):
+        return self.__add__(other)
+
+    def __rsub__(self, other):
+        return self.__neg__().__radd__(other)
+
+    def __sub__(self, other):
+        if not isinstance(other, relativedelta):
+            return NotImplemented   # In case the other object defines __rsub__
+        return self.__class__(years=self.years - other.years,
+                             months=self.months - other.months,
+                             days=self.days - other.days,
+                             hours=self.hours - other.hours,
+                             minutes=self.minutes - other.minutes,
+                             seconds=self.seconds - other.seconds,
+                             microseconds=self.microseconds - other.microseconds,
+                             leapdays=self.leapdays or other.leapdays,
+                             year=(self.year if self.year is not None
+                                   else other.year),
+                             month=(self.month if self.month is not None else
+                                    other.month),
+                             day=(self.day if self.day is not None else
+                                  other.day),
+                             weekday=(self.weekday if self.weekday is not None else
+                                      other.weekday),
+                             hour=(self.hour if self.hour is not None else
+                                   other.hour),
+                             minute=(self.minute if self.minute is not None else
+                                     other.minute),
+                             second=(self.second if self.second is not None else
+                                     other.second),
+                             microsecond=(self.microsecond if self.microsecond
+                                          is not None else
+                                          other.microsecond))
+
+    def __abs__(self):
+        return self.__class__(years=abs(self.years),
+                              months=abs(self.months),
+                              days=abs(self.days),
+                              hours=abs(self.hours),
+                              minutes=abs(self.minutes),
+                              seconds=abs(self.seconds),
+                              microseconds=abs(self.microseconds),
+                              leapdays=self.leapdays,
+                              year=self.year,
+                              month=self.month,
+                              day=self.day,
+                              weekday=self.weekday,
+                              hour=self.hour,
+                              minute=self.minute,
+                              second=self.second,
+                              microsecond=self.microsecond)
+
+    def __neg__(self):
+        return self.__class__(years=-self.years,
+                             months=-self.months,
+                             days=-self.days,
+                             hours=-self.hours,
+                             minutes=-self.minutes,
+                             seconds=-self.seconds,
+                             microseconds=-self.microseconds,
+                             leapdays=self.leapdays,
+                             year=self.year,
+                             month=self.month,
+                             day=self.day,
+                             weekday=self.weekday,
+                             hour=self.hour,
+                             minute=self.minute,
+                             second=self.second,
+                             microsecond=self.microsecond)
+
+    def __bool__(self):
+        return not (not self.years and
+                    not self.months and
+                    not self.days and
+                    not self.hours and
+                    not self.minutes and
+                    not self.seconds and
+                    not self.microseconds and
+                    not self.leapdays and
+                    self.year is None and
+                    self.month is None and
+                    self.day is None and
+                    self.weekday is None and
+                    self.hour is None and
+                    self.minute is None and
+                    self.second is None and
+                    self.microsecond is None)
+    # Compatibility with Python 2.x
+    __nonzero__ = __bool__
+
+    def __mul__(self, other):
+        try:
+            f = float(other)
+        except TypeError:
+            return NotImplemented
+
+        return self.__class__(years=int(self.years * f),
+                             months=int(self.months * f),
+                             days=int(self.days * f),
+                             hours=int(self.hours * f),
+                             minutes=int(self.minutes * f),
+                             seconds=int(self.seconds * f),
+                             microseconds=int(self.microseconds * f),
+                             leapdays=self.leapdays,
+                             year=self.year,
+                             month=self.month,
+                             day=self.day,
+                             weekday=self.weekday,
+                             hour=self.hour,
+                             minute=self.minute,
+                             second=self.second,
+                             microsecond=self.microsecond)
+
+    __rmul__ = __mul__
+
+    def __eq__(self, other):
+        if not isinstance(other, relativedelta):
+            return NotImplemented
+        if self.weekday or other.weekday:
+            if not self.weekday or not other.weekday:
+                return False
+            if self.weekday.weekday != other.weekday.weekday:
+                return False
+            n1, n2 = self.weekday.n, other.weekday.n
+            if n1 != n2 and not ((not n1 or n1 == 1) and (not n2 or n2 == 1)):
+                return False
+        return (self.years == other.years and
+                self.months == other.months and
+                self.days == other.days and
+                self.hours == other.hours and
+                self.minutes == other.minutes and
+                self.seconds == other.seconds and
+                self.microseconds == other.microseconds and
+                self.leapdays == other.leapdays and
+                self.year == other.year and
+                self.month == other.month and
+                self.day == other.day and
+                self.hour == other.hour and
+                self.minute == other.minute and
+                self.second == other.second and
+                self.microsecond == other.microsecond)
+
+    def __hash__(self):
+        return hash((
+            self.weekday,
+            self.years,
+            self.months,
+            self.days,
+            self.hours,
+            self.minutes,
+            self.seconds,
+            self.microseconds,
+            self.leapdays,
+            self.year,
+            self.month,
+            self.day,
+            self.hour,
+            self.minute,
+            self.second,
+            self.microsecond,
+        ))
+
+    def __ne__(self, other):
+        return not self.__eq__(other)
+
+    def __div__(self, other):
+        try:
+            reciprocal = 1 / float(other)
+        except TypeError:
+            return NotImplemented
+
+        return self.__mul__(reciprocal)
+
+    __truediv__ = __div__
+
+    def __repr__(self):
+        l = []
+        for attr in ["years", "months", "days", "leapdays",
+                     "hours", "minutes", "seconds", "microseconds"]:
+            value = getattr(self, attr)
+            if value:
+                l.append("{attr}={value:+g}".format(attr=attr, value=value))
+        for attr in ["year", "month", "day", "weekday",
+                     "hour", "minute", "second", "microsecond"]:
+            value = getattr(self, attr)
+            if value is not None:
+                l.append("{attr}={value}".format(attr=attr, value=repr(value)))
+        return "{classname}({attrs})".format(classname=self.__class__.__name__,
+                                             attrs=", ".join(l))
+
+
+def _sign(x):
+    return int(copysign(1, x))
+
+# vim:ts=4:sw=4:et
diff --git a/venv/Lib/site-packages/dateutil/rrule.py b/venv/Lib/site-packages/dateutil/rrule.py
new file mode 100644
index 0000000..b320339
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/rrule.py
@@ -0,0 +1,1737 @@
+# -*- coding: utf-8 -*-
+"""
+The rrule module offers a small, complete, and very fast, implementation of
+the recurrence rules documented in the
+`iCalendar RFC <https://tools.ietf.org/html/rfc5545>`_,
+including support for caching of results.
+"""
+import calendar
+import datetime
+import heapq
+import itertools
+import re
+import sys
+from functools import wraps
+# For warning about deprecation of until and count
+from warnings import warn
+
+from six import advance_iterator, integer_types
+
+from six.moves import _thread, range
+
+from ._common import weekday as weekdaybase
+
+try:
+    from math import gcd
+except ImportError:
+    from fractions import gcd
+
+__all__ = ["rrule", "rruleset", "rrulestr",
+           "YEARLY", "MONTHLY", "WEEKLY", "DAILY",
+           "HOURLY", "MINUTELY", "SECONDLY",
+           "MO", "TU", "WE", "TH", "FR", "SA", "SU"]
+
+# Every mask is 7 days longer to handle cross-year weekly periods.
+M366MASK = tuple([1]*31+[2]*29+[3]*31+[4]*30+[5]*31+[6]*30 +
+                 [7]*31+[8]*31+[9]*30+[10]*31+[11]*30+[12]*31+[1]*7)
+M365MASK = list(M366MASK)
+M29, M30, M31 = list(range(1, 30)), list(range(1, 31)), list(range(1, 32))
+MDAY366MASK = tuple(M31+M29+M31+M30+M31+M30+M31+M31+M30+M31+M30+M31+M31[:7])
+MDAY365MASK = list(MDAY366MASK)
+M29, M30, M31 = list(range(-29, 0)), list(range(-30, 0)), list(range(-31, 0))
+NMDAY366MASK = tuple(M31+M29+M31+M30+M31+M30+M31+M31+M30+M31+M30+M31+M31[:7])
+NMDAY365MASK = list(NMDAY366MASK)
+M366RANGE = (0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366)
+M365RANGE = (0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365)
+WDAYMASK = [0, 1, 2, 3, 4, 5, 6]*55
+del M29, M30, M31, M365MASK[59], MDAY365MASK[59], NMDAY365MASK[31]
+MDAY365MASK = tuple(MDAY365MASK)
+M365MASK = tuple(M365MASK)
+
+FREQNAMES = ['YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY', 'HOURLY', 'MINUTELY', 'SECONDLY']
+
+(YEARLY,
+ MONTHLY,
+ WEEKLY,
+ DAILY,
+ HOURLY,
+ MINUTELY,
+ SECONDLY) = list(range(7))
+
+# Imported on demand.
+easter = None
+parser = None
+
+
+class weekday(weekdaybase):
+    """
+    This version of weekday does not allow n = 0.
+    """
+    def __init__(self, wkday, n=None):
+        if n == 0:
+            raise ValueError("Can't create weekday with n==0")
+
+        super(weekday, self).__init__(wkday, n)
+
+
+MO, TU, WE, TH, FR, SA, SU = weekdays = tuple(weekday(x) for x in range(7))
+
+
+def _invalidates_cache(f):
+    """
+    Decorator for rruleset methods which may invalidate the
+    cached length.
+    """
+    @wraps(f)
+    def inner_func(self, *args, **kwargs):
+        rv = f(self, *args, **kwargs)
+        self._invalidate_cache()
+        return rv
+
+    return inner_func
+
+
+class rrulebase(object):
+    def __init__(self, cache=False):
+        if cache:
+            self._cache = []
+            self._cache_lock = _thread.allocate_lock()
+            self._invalidate_cache()
+        else:
+            self._cache = None
+            self._cache_complete = False
+            self._len = None
+
+    def __iter__(self):
+        if self._cache_complete:
+            return iter(self._cache)
+        elif self._cache is None:
+            return self._iter()
+        else:
+            return self._iter_cached()
+
+    def _invalidate_cache(self):
+        if self._cache is not None:
+            self._cache = []
+            self._cache_complete = False
+            self._cache_gen = self._iter()
+
+            if self._cache_lock.locked():
+                self._cache_lock.release()
+
+        self._len = None
+
+    def _iter_cached(self):
+        i = 0
+        gen = self._cache_gen
+        cache = self._cache
+        acquire = self._cache_lock.acquire
+        release = self._cache_lock.release
+        while gen:
+            if i == len(cache):
+                acquire()
+                if self._cache_complete:
+                    break
+                try:
+                    for j in range(10):
+                        cache.append(advance_iterator(gen))
+                except StopIteration:
+                    self._cache_gen = gen = None
+                    self._cache_complete = True
+                    break
+                release()
+            yield cache[i]
+            i += 1
+        while i < self._len:
+            yield cache[i]
+            i += 1
+
+    def __getitem__(self, item):
+        if self._cache_complete:
+            return self._cache[item]
+        elif isinstance(item, slice):
+            if item.step and item.step < 0:
+                return list(iter(self))[item]
+            else:
+                return list(itertools.islice(self,
+                                             item.start or 0,
+                                             item.stop or sys.maxsize,
+                                             item.step or 1))
+        elif item >= 0:
+            gen = iter(self)
+            try:
+                for i in range(item+1):
+                    res = advance_iterator(gen)
+            except StopIteration:
+                raise IndexError
+            return res
+        else:
+            return list(iter(self))[item]
+
+    def __contains__(self, item):
+        if self._cache_complete:
+            return item in self._cache
+        else:
+            for i in self:
+                if i == item:
+                    return True
+                elif i > item:
+                    return False
+        return False
+
+    # __len__() introduces a large performance penalty.
+    def count(self):
+        """ Returns the number of recurrences in this set. It will have go
+            trough the whole recurrence, if this hasn't been done before. """
+        if self._len is None:
+            for x in self:
+                pass
+        return self._len
+
+    def before(self, dt, inc=False):
+        """ Returns the last recurrence before the given datetime instance. The
+            inc keyword defines what happens if dt is an occurrence. With
+            inc=True, if dt itself is an occurrence, it will be returned. """
+        if self._cache_complete:
+            gen = self._cache
+        else:
+            gen = self
+        last = None
+        if inc:
+            for i in gen:
+                if i > dt:
+                    break
+                last = i
+        else:
+            for i in gen:
+                if i >= dt:
+                    break
+                last = i
+        return last
+
+    def after(self, dt, inc=False):
+        """ Returns the first recurrence after the given datetime instance. The
+            inc keyword defines what happens if dt is an occurrence. With
+            inc=True, if dt itself is an occurrence, it will be returned.  """
+        if self._cache_complete:
+            gen = self._cache
+        else:
+            gen = self
+        if inc:
+            for i in gen:
+                if i >= dt:
+                    return i
+        else:
+            for i in gen:
+                if i > dt:
+                    return i
+        return None
+
+    def xafter(self, dt, count=None, inc=False):
+        """
+        Generator which yields up to `count` recurrences after the given
+        datetime instance, equivalent to `after`.
+
+        :param dt:
+            The datetime at which to start generating recurrences.
+
+        :param count:
+            The maximum number of recurrences to generate. If `None` (default),
+            dates are generated until the recurrence rule is exhausted.
+
+        :param inc:
+            If `dt` is an instance of the rule and `inc` is `True`, it is
+            included in the output.
+
+        :yields: Yields a sequence of `datetime` objects.
+        """
+
+        if self._cache_complete:
+            gen = self._cache
+        else:
+            gen = self
+
+        # Select the comparison function
+        if inc:
+            comp = lambda dc, dtc: dc >= dtc
+        else:
+            comp = lambda dc, dtc: dc > dtc
+
+        # Generate dates
+        n = 0
+        for d in gen:
+            if comp(d, dt):
+                if count is not None:
+                    n += 1
+                    if n > count:
+                        break
+
+                yield d
+
+    def between(self, after, before, inc=False, count=1):
+        """ Returns all the occurrences of the rrule between after and before.
+        The inc keyword defines what happens if after and/or before are
+        themselves occurrences. With inc=True, they will be included in the
+        list, if they are found in the recurrence set. """
+        if self._cache_complete:
+            gen = self._cache
+        else:
+            gen = self
+        started = False
+        l = []
+        if inc:
+            for i in gen:
+                if i > before:
+                    break
+                elif not started:
+                    if i >= after:
+                        started = True
+                        l.append(i)
+                else:
+                    l.append(i)
+        else:
+            for i in gen:
+                if i >= before:
+                    break
+                elif not started:
+                    if i > after:
+                        started = True
+                        l.append(i)
+                else:
+                    l.append(i)
+        return l
+
+
+class rrule(rrulebase):
+    """
+    That's the base of the rrule operation. It accepts all the keywords
+    defined in the RFC as its constructor parameters (except byday,
+    which was renamed to byweekday) and more. The constructor prototype is::
+
+            rrule(freq)
+
+    Where freq must be one of YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY,
+    or SECONDLY.
+
+    .. note::
+        Per RFC section 3.3.10, recurrence instances falling on invalid dates
+        and times are ignored rather than coerced:
+
+            Recurrence rules may generate recurrence instances with an invalid
+            date (e.g., February 30) or nonexistent local time (e.g., 1:30 AM
+            on a day where the local time is moved forward by an hour at 1:00
+            AM).  Such recurrence instances MUST be ignored and MUST NOT be
+            counted as part of the recurrence set.
+
+        This can lead to possibly surprising behavior when, for example, the
+        start date occurs at the end of the month:
+
+        >>> from dateutil.rrule import rrule, MONTHLY
+        >>> from datetime import datetime
+        >>> start_date = datetime(2014, 12, 31)
+        >>> list(rrule(freq=MONTHLY, count=4, dtstart=start_date))
+        ... # doctest: +NORMALIZE_WHITESPACE
+        [datetime.datetime(2014, 12, 31, 0, 0),
+         datetime.datetime(2015, 1, 31, 0, 0),
+         datetime.datetime(2015, 3, 31, 0, 0),
+         datetime.datetime(2015, 5, 31, 0, 0)]
+
+    Additionally, it supports the following keyword arguments:
+
+    :param dtstart:
+        The recurrence start. Besides being the base for the recurrence,
+        missing parameters in the final recurrence instances will also be
+        extracted from this date. If not given, datetime.now() will be used
+        instead.
+    :param interval:
+        The interval between each freq iteration. For example, when using
+        YEARLY, an interval of 2 means once every two years, but with HOURLY,
+        it means once every two hours. The default interval is 1.
+    :param wkst:
+        The week start day. Must be one of the MO, TU, WE constants, or an
+        integer, specifying the first day of the week. This will affect
+        recurrences based on weekly periods. The default week start is got
+        from calendar.firstweekday(), and may be modified by
+        calendar.setfirstweekday().
+    :param count:
+        If given, this determines how many occurrences will be generated.
+
+        .. note::
+            As of version 2.5.0, the use of the keyword ``until`` in conjunction
+            with ``count`` is deprecated, to make sure ``dateutil`` is fully
+            compliant with `RFC-5545 Sec. 3.3.10 <https://tools.ietf.org/
+            html/rfc5545#section-3.3.10>`_. Therefore, ``until`` and ``count``
+            **must not** occur in the same call to ``rrule``.
+    :param until:
+        If given, this must be a datetime instance specifying the upper-bound
+        limit of the recurrence. The last recurrence in the rule is the greatest
+        datetime that is less than or equal to the value specified in the
+        ``until`` parameter.
+
+        .. note::
+            As of version 2.5.0, the use of the keyword ``until`` in conjunction
+            with ``count`` is deprecated, to make sure ``dateutil`` is fully
+            compliant with `RFC-5545 Sec. 3.3.10 <https://tools.ietf.org/
+            html/rfc5545#section-3.3.10>`_. Therefore, ``until`` and ``count``
+            **must not** occur in the same call to ``rrule``.
+    :param bysetpos:
+        If given, it must be either an integer, or a sequence of integers,
+        positive or negative. Each given integer will specify an occurrence
+        number, corresponding to the nth occurrence of the rule inside the
+        frequency period. For example, a bysetpos of -1 if combined with a
+        MONTHLY frequency, and a byweekday of (MO, TU, WE, TH, FR), will
+        result in the last work day of every month.
+    :param bymonth:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the months to apply the recurrence to.
+    :param bymonthday:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the month days to apply the recurrence to.
+    :param byyearday:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the year days to apply the recurrence to.
+    :param byeaster:
+        If given, it must be either an integer, or a sequence of integers,
+        positive or negative. Each integer will define an offset from the
+        Easter Sunday. Passing the offset 0 to byeaster will yield the Easter
+        Sunday itself. This is an extension to the RFC specification.
+    :param byweekno:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the week numbers to apply the recurrence to. Week numbers
+        have the meaning described in ISO8601, that is, the first week of
+        the year is that containing at least four days of the new year.
+    :param byweekday:
+        If given, it must be either an integer (0 == MO), a sequence of
+        integers, one of the weekday constants (MO, TU, etc), or a sequence
+        of these constants. When given, these variables will define the
+        weekdays where the recurrence will be applied. It's also possible to
+        use an argument n for the weekday instances, which will mean the nth
+        occurrence of this weekday in the period. For example, with MONTHLY,
+        or with YEARLY and BYMONTH, using FR(+1) in byweekday will specify the
+        first friday of the month where the recurrence happens. Notice that in
+        the RFC documentation, this is specified as BYDAY, but was renamed to
+        avoid the ambiguity of that keyword.
+    :param byhour:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the hours to apply the recurrence to.
+    :param byminute:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the minutes to apply the recurrence to.
+    :param bysecond:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the seconds to apply the recurrence to.
+    :param cache:
+        If given, it must be a boolean value specifying to enable or disable
+        caching of results. If you will use the same rrule instance multiple
+        times, enabling caching will improve the performance considerably.
+     """
+    def __init__(self, freq, dtstart=None,
+                 interval=1, wkst=None, count=None, until=None, bysetpos=None,
+                 bymonth=None, bymonthday=None, byyearday=None, byeaster=None,
+                 byweekno=None, byweekday=None,
+                 byhour=None, byminute=None, bysecond=None,
+                 cache=False):
+        super(rrule, self).__init__(cache)
+        global easter
+        if not dtstart:
+            if until and until.tzinfo:
+                dtstart = datetime.datetime.now(tz=until.tzinfo).replace(microsecond=0)
+            else:
+                dtstart = datetime.datetime.now().replace(microsecond=0)
+        elif not isinstance(dtstart, datetime.datetime):
+            dtstart = datetime.datetime.fromordinal(dtstart.toordinal())
+        else:
+            dtstart = dtstart.replace(microsecond=0)
+        self._dtstart = dtstart
+        self._tzinfo = dtstart.tzinfo
+        self._freq = freq
+        self._interval = interval
+        self._count = count
+
+        # Cache the original byxxx rules, if they are provided, as the _byxxx
+        # attributes do not necessarily map to the inputs, and this can be
+        # a problem in generating the strings. Only store things if they've
+        # been supplied (the string retrieval will just use .get())
+        self._original_rule = {}
+
+        if until and not isinstance(until, datetime.datetime):
+            until = datetime.datetime.fromordinal(until.toordinal())
+        self._until = until
+
+        if self._dtstart and self._until:
+            if (self._dtstart.tzinfo is not None) != (self._until.tzinfo is not None):
+                # According to RFC5545 Section 3.3.10:
+                # https://tools.ietf.org/html/rfc5545#section-3.3.10
+                #
+                # > If the "DTSTART" property is specified as a date with UTC
+                # > time or a date with local time and time zone reference,
+                # > then the UNTIL rule part MUST be specified as a date with
+                # > UTC time.
+                raise ValueError(
+                    'RRULE UNTIL values must be specified in UTC when DTSTART '
+                    'is timezone-aware'
+                )
+
+        if count is not None and until:
+            warn("Using both 'count' and 'until' is inconsistent with RFC 5545"
+                 " and has been deprecated in dateutil. Future versions will "
+                 "raise an error.", DeprecationWarning)
+
+        if wkst is None:
+            self._wkst = calendar.firstweekday()
+        elif isinstance(wkst, integer_types):
+            self._wkst = wkst
+        else:
+            self._wkst = wkst.weekday
+
+        if bysetpos is None:
+            self._bysetpos = None
+        elif isinstance(bysetpos, integer_types):
+            if bysetpos == 0 or not (-366 <= bysetpos <= 366):
+                raise ValueError("bysetpos must be between 1 and 366, "
+                                 "or between -366 and -1")
+            self._bysetpos = (bysetpos,)
+        else:
+            self._bysetpos = tuple(bysetpos)
+            for pos in self._bysetpos:
+                if pos == 0 or not (-366 <= pos <= 366):
+                    raise ValueError("bysetpos must be between 1 and 366, "
+                                     "or between -366 and -1")
+
+        if self._bysetpos:
+            self._original_rule['bysetpos'] = self._bysetpos
+
+        if (byweekno is None and byyearday is None and bymonthday is None and
+                byweekday is None and byeaster is None):
+            if freq == YEARLY:
+                if bymonth is None:
+                    bymonth = dtstart.month
+                    self._original_rule['bymonth'] = None
+                bymonthday = dtstart.day
+                self._original_rule['bymonthday'] = None
+            elif freq == MONTHLY:
+                bymonthday = dtstart.day
+                self._original_rule['bymonthday'] = None
+            elif freq == WEEKLY:
+                byweekday = dtstart.weekday()
+                self._original_rule['byweekday'] = None
+
+        # bymonth
+        if bymonth is None:
+            self._bymonth = None
+        else:
+            if isinstance(bymonth, integer_types):
+                bymonth = (bymonth,)
+
+            self._bymonth = tuple(sorted(set(bymonth)))
+
+            if 'bymonth' not in self._original_rule:
+                self._original_rule['bymonth'] = self._bymonth
+
+        # byyearday
+        if byyearday is None:
+            self._byyearday = None
+        else:
+            if isinstance(byyearday, integer_types):
+                byyearday = (byyearday,)
+
+            self._byyearday = tuple(sorted(set(byyearday)))
+            self._original_rule['byyearday'] = self._byyearday
+
+        # byeaster
+        if byeaster is not None:
+            if not easter:
+                from dateutil import easter
+            if isinstance(byeaster, integer_types):
+                self._byeaster = (byeaster,)
+            else:
+                self._byeaster = tuple(sorted(byeaster))
+
+            self._original_rule['byeaster'] = self._byeaster
+        else:
+            self._byeaster = None
+
+        # bymonthday
+        if bymonthday is None:
+            self._bymonthday = ()
+            self._bynmonthday = ()
+        else:
+            if isinstance(bymonthday, integer_types):
+                bymonthday = (bymonthday,)
+
+            bymonthday = set(bymonthday)            # Ensure it's unique
+
+            self._bymonthday = tuple(sorted(x for x in bymonthday if x > 0))
+            self._bynmonthday = tuple(sorted(x for x in bymonthday if x < 0))
+
+            # Storing positive numbers first, then negative numbers
+            if 'bymonthday' not in self._original_rule:
+                self._original_rule['bymonthday'] = tuple(
+                    itertools.chain(self._bymonthday, self._bynmonthday))
+
+        # byweekno
+        if byweekno is None:
+            self._byweekno = None
+        else:
+            if isinstance(byweekno, integer_types):
+                byweekno = (byweekno,)
+
+            self._byweekno = tuple(sorted(set(byweekno)))
+
+            self._original_rule['byweekno'] = self._byweekno
+
+        # byweekday / bynweekday
+        if byweekday is None:
+            self._byweekday = None
+            self._bynweekday = None
+        else:
+            # If it's one of the valid non-sequence types, convert to a
+            # single-element sequence before the iterator that builds the
+            # byweekday set.
+            if isinstance(byweekday, integer_types) or hasattr(byweekday, "n"):
+                byweekday = (byweekday,)
+
+            self._byweekday = set()
+            self._bynweekday = set()
+            for wday in byweekday:
+                if isinstance(wday, integer_types):
+                    self._byweekday.add(wday)
+                elif not wday.n or freq > MONTHLY:
+                    self._byweekday.add(wday.weekday)
+                else:
+                    self._bynweekday.add((wday.weekday, wday.n))
+
+            if not self._byweekday:
+                self._byweekday = None
+            elif not self._bynweekday:
+                self._bynweekday = None
+
+            if self._byweekday is not None:
+                self._byweekday = tuple(sorted(self._byweekday))
+                orig_byweekday = [weekday(x) for x in self._byweekday]
+            else:
+                orig_byweekday = ()
+
+            if self._bynweekday is not None:
+                self._bynweekday = tuple(sorted(self._bynweekday))
+                orig_bynweekday = [weekday(*x) for x in self._bynweekday]
+            else:
+                orig_bynweekday = ()
+
+            if 'byweekday' not in self._original_rule:
+                self._original_rule['byweekday'] = tuple(itertools.chain(
+                    orig_byweekday, orig_bynweekday))
+
+        # byhour
+        if byhour is None:
+            if freq < HOURLY:
+                self._byhour = {dtstart.hour}
+            else:
+                self._byhour = None
+        else:
+            if isinstance(byhour, integer_types):
+                byhour = (byhour,)
+
+            if freq == HOURLY:
+                self._byhour = self.__construct_byset(start=dtstart.hour,
+                                                      byxxx=byhour,
+                                                      base=24)
+            else:
+                self._byhour = set(byhour)
+
+            self._byhour = tuple(sorted(self._byhour))
+            self._original_rule['byhour'] = self._byhour
+
+        # byminute
+        if byminute is None:
+            if freq < MINUTELY:
+                self._byminute = {dtstart.minute}
+            else:
+                self._byminute = None
+        else:
+            if isinstance(byminute, integer_types):
+                byminute = (byminute,)
+
+            if freq == MINUTELY:
+                self._byminute = self.__construct_byset(start=dtstart.minute,
+                                                        byxxx=byminute,
+                                                        base=60)
+            else:
+                self._byminute = set(byminute)
+
+            self._byminute = tuple(sorted(self._byminute))
+            self._original_rule['byminute'] = self._byminute
+
+        # bysecond
+        if bysecond is None:
+            if freq < SECONDLY:
+                self._bysecond = ((dtstart.second,))
+            else:
+                self._bysecond = None
+        else:
+            if isinstance(bysecond, integer_types):
+                bysecond = (bysecond,)
+
+            self._bysecond = set(bysecond)
+
+            if freq == SECONDLY:
+                self._bysecond = self.__construct_byset(start=dtstart.second,
+                                                        byxxx=bysecond,
+                                                        base=60)
+            else:
+                self._bysecond = set(bysecond)
+
+            self._bysecond = tuple(sorted(self._bysecond))
+            self._original_rule['bysecond'] = self._bysecond
+
+        if self._freq >= HOURLY:
+            self._timeset = None
+        else:
+            self._timeset = []
+            for hour in self._byhour:
+                for minute in self._byminute:
+                    for second in self._bysecond:
+                        self._timeset.append(
+                            datetime.time(hour, minute, second,
+                                          tzinfo=self._tzinfo))
+            self._timeset.sort()
+            self._timeset = tuple(self._timeset)
+
+    def __str__(self):
+        """
+        Output a string that would generate this RRULE if passed to rrulestr.
+        This is mostly compatible with RFC5545, except for the
+        dateutil-specific extension BYEASTER.
+        """
+
+        output = []
+        h, m, s = [None] * 3
+        if self._dtstart:
+            output.append(self._dtstart.strftime('DTSTART:%Y%m%dT%H%M%S'))
+            h, m, s = self._dtstart.timetuple()[3:6]
+
+        parts = ['FREQ=' + FREQNAMES[self._freq]]
+        if self._interval != 1:
+            parts.append('INTERVAL=' + str(self._interval))
+
+        if self._wkst:
+            parts.append('WKST=' + repr(weekday(self._wkst))[0:2])
+
+        if self._count is not None:
+            parts.append('COUNT=' + str(self._count))
+
+        if self._until:
+            parts.append(self._until.strftime('UNTIL=%Y%m%dT%H%M%S'))
+
+        if self._original_rule.get('byweekday') is not None:
+            # The str() method on weekday objects doesn't generate
+            # RFC5545-compliant strings, so we should modify that.
+            original_rule = dict(self._original_rule)
+            wday_strings = []
+            for wday in original_rule['byweekday']:
+                if wday.n:
+                    wday_strings.append('{n:+d}{wday}'.format(
+                        n=wday.n,
+                        wday=repr(wday)[0:2]))
+                else:
+                    wday_strings.append(repr(wday))
+
+            original_rule['byweekday'] = wday_strings
+        else:
+            original_rule = self._original_rule
+
+        partfmt = '{name}={vals}'
+        for name, key in [('BYSETPOS', 'bysetpos'),
+                          ('BYMONTH', 'bymonth'),
+                          ('BYMONTHDAY', 'bymonthday'),
+                          ('BYYEARDAY', 'byyearday'),
+                          ('BYWEEKNO', 'byweekno'),
+                          ('BYDAY', 'byweekday'),
+                          ('BYHOUR', 'byhour'),
+                          ('BYMINUTE', 'byminute'),
+                          ('BYSECOND', 'bysecond'),
+                          ('BYEASTER', 'byeaster')]:
+            value = original_rule.get(key)
+            if value:
+                parts.append(partfmt.format(name=name, vals=(','.join(str(v)
+                                                             for v in value))))
+
+        output.append('RRULE:' + ';'.join(parts))
+        return '\n'.join(output)
+
+    def replace(self, **kwargs):
+        """Return new rrule with same attributes except for those attributes given new
+           values by whichever keyword arguments are specified."""
+        new_kwargs = {"interval": self._interval,
+                      "count": self._count,
+                      "dtstart": self._dtstart,
+                      "freq": self._freq,
+                      "until": self._until,
+                      "wkst": self._wkst,
+                      "cache": False if self._cache is None else True }
+        new_kwargs.update(self._original_rule)
+        new_kwargs.update(kwargs)
+        return rrule(**new_kwargs)
+
+    def _iter(self):
+        year, month, day, hour, minute, second, weekday, yearday, _ = \
+            self._dtstart.timetuple()
+
+        # Some local variables to speed things up a bit
+        freq = self._freq
+        interval = self._interval
+        wkst = self._wkst
+        until = self._until
+        bymonth = self._bymonth
+        byweekno = self._byweekno
+        byyearday = self._byyearday
+        byweekday = self._byweekday
+        byeaster = self._byeaster
+        bymonthday = self._bymonthday
+        bynmonthday = self._bynmonthday
+        bysetpos = self._bysetpos
+        byhour = self._byhour
+        byminute = self._byminute
+        bysecond = self._bysecond
+
+        ii = _iterinfo(self)
+        ii.rebuild(year, month)
+
+        getdayset = {YEARLY: ii.ydayset,
+                     MONTHLY: ii.mdayset,
+                     WEEKLY: ii.wdayset,
+                     DAILY: ii.ddayset,
+                     HOURLY: ii.ddayset,
+                     MINUTELY: ii.ddayset,
+                     SECONDLY: ii.ddayset}[freq]
+
+        if freq < HOURLY:
+            timeset = self._timeset
+        else:
+            gettimeset = {HOURLY: ii.htimeset,
+                          MINUTELY: ii.mtimeset,
+                          SECONDLY: ii.stimeset}[freq]
+            if ((freq >= HOURLY and
+                 self._byhour and hour not in self._byhour) or
+                (freq >= MINUTELY and
+                 self._byminute and minute not in self._byminute) or
+                (freq >= SECONDLY and
+                 self._bysecond and second not in self._bysecond)):
+                timeset = ()
+            else:
+                timeset = gettimeset(hour, minute, second)
+
+        total = 0
+        count = self._count
+        while True:
+            # Get dayset with the right frequency
+            dayset, start, end = getdayset(year, month, day)
+
+            # Do the "hard" work ;-)
+            filtered = False
+            for i in dayset[start:end]:
+                if ((bymonth and ii.mmask[i] not in bymonth) or
+                    (byweekno and not ii.wnomask[i]) or
+                    (byweekday and ii.wdaymask[i] not in byweekday) or
+                    (ii.nwdaymask and not ii.nwdaymask[i]) or
+                    (byeaster and not ii.eastermask[i]) or
+                    ((bymonthday or bynmonthday) and
+                     ii.mdaymask[i] not in bymonthday and
+                     ii.nmdaymask[i] not in bynmonthday) or
+                    (byyearday and
+                     ((i < ii.yearlen and i+1 not in byyearday and
+                       -ii.yearlen+i not in byyearday) or
+                      (i >= ii.yearlen and i+1-ii.yearlen not in byyearday and
+                       -ii.nextyearlen+i-ii.yearlen not in byyearday)))):
+                    dayset[i] = None
+                    filtered = True
+
+            # Output results
+            if bysetpos and timeset:
+                poslist = []
+                for pos in bysetpos:
+                    if pos < 0:
+                        daypos, timepos = divmod(pos, len(timeset))
+                    else:
+                        daypos, timepos = divmod(pos-1, len(timeset))
+                    try:
+                        i = [x for x in dayset[start:end]
+                             if x is not None][daypos]
+                        time = timeset[timepos]
+                    except IndexError:
+                        pass
+                    else:
+                        date = datetime.date.fromordinal(ii.yearordinal+i)
+                        res = datetime.datetime.combine(date, time)
+                        if res not in poslist:
+                            poslist.append(res)
+                poslist.sort()
+                for res in poslist:
+                    if until and res > until:
+                        self._len = total
+                        return
+                    elif res >= self._dtstart:
+                        if count is not None:
+                            count -= 1
+                            if count < 0:
+                                self._len = total
+                                return
+                        total += 1
+                        yield res
+            else:
+                for i in dayset[start:end]:
+                    if i is not None:
+                        date = datetime.date.fromordinal(ii.yearordinal + i)
+                        for time in timeset:
+                            res = datetime.datetime.combine(date, time)
+                            if until and res > until:
+                                self._len = total
+                                return
+                            elif res >= self._dtstart:
+                                if count is not None:
+                                    count -= 1
+                                    if count < 0:
+                                        self._len = total
+                                        return
+
+                                total += 1
+                                yield res
+
+            # Handle frequency and interval
+            fixday = False
+            if freq == YEARLY:
+                year += interval
+                if year > datetime.MAXYEAR:
+                    self._len = total
+                    return
+                ii.rebuild(year, month)
+            elif freq == MONTHLY:
+                month += interval
+                if month > 12:
+                    div, mod = divmod(month, 12)
+                    month = mod
+                    year += div
+                    if month == 0:
+                        month = 12
+                        year -= 1
+                    if year > datetime.MAXYEAR:
+                        self._len = total
+                        return
+                ii.rebuild(year, month)
+            elif freq == WEEKLY:
+                if wkst > weekday:
+                    day += -(weekday+1+(6-wkst))+self._interval*7
+                else:
+                    day += -(weekday-wkst)+self._interval*7
+                weekday = wkst
+                fixday = True
+            elif freq == DAILY:
+                day += interval
+                fixday = True
+            elif freq == HOURLY:
+                if filtered:
+                    # Jump to one iteration before next day
+                    hour += ((23-hour)//interval)*interval
+
+                if byhour:
+                    ndays, hour = self.__mod_distance(value=hour,
+                                                      byxxx=self._byhour,
+                                                      base=24)
+                else:
+                    ndays, hour = divmod(hour+interval, 24)
+
+                if ndays:
+                    day += ndays
+                    fixday = True
+
+                timeset = gettimeset(hour, minute, second)
+            elif freq == MINUTELY:
+                if filtered:
+                    # Jump to one iteration before next day
+                    minute += ((1439-(hour*60+minute))//interval)*interval
+
+                valid = False
+                rep_rate = (24*60)
+                for j in range(rep_rate // gcd(interval, rep_rate)):
+                    if byminute:
+                        nhours, minute = \
+                            self.__mod_distance(value=minute,
+                                                byxxx=self._byminute,
+                                                base=60)
+                    else:
+                        nhours, minute = divmod(minute+interval, 60)
+
+                    div, hour = divmod(hour+nhours, 24)
+                    if div:
+                        day += div
+                        fixday = True
+                        filtered = False
+
+                    if not byhour or hour in byhour:
+                        valid = True
+                        break
+
+                if not valid:
+                    raise ValueError('Invalid combination of interval and ' +
+                                     'byhour resulting in empty rule.')
+
+                timeset = gettimeset(hour, minute, second)
+            elif freq == SECONDLY:
+                if filtered:
+                    # Jump to one iteration before next day
+                    second += (((86399 - (hour * 3600 + minute * 60 + second))
+                                // interval) * interval)
+
+                rep_rate = (24 * 3600)
+                valid = False
+                for j in range(0, rep_rate // gcd(interval, rep_rate)):
+                    if bysecond:
+                        nminutes, second = \
+                            self.__mod_distance(value=second,
+                                                byxxx=self._bysecond,
+                                                base=60)
+                    else:
+                        nminutes, second = divmod(second+interval, 60)
+
+                    div, minute = divmod(minute+nminutes, 60)
+                    if div:
+                        hour += div
+                        div, hour = divmod(hour, 24)
+                        if div:
+                            day += div
+                            fixday = True
+
+                    if ((not byhour or hour in byhour) and
+                            (not byminute or minute in byminute) and
+                            (not bysecond or second in bysecond)):
+                        valid = True
+                        break
+
+                if not valid:
+                    raise ValueError('Invalid combination of interval, ' +
+                                     'byhour and byminute resulting in empty' +
+                                     ' rule.')
+
+                timeset = gettimeset(hour, minute, second)
+
+            if fixday and day > 28:
+                daysinmonth = calendar.monthrange(year, month)[1]
+                if day > daysinmonth:
+                    while day > daysinmonth:
+                        day -= daysinmonth
+                        month += 1
+                        if month == 13:
+                            month = 1
+                            year += 1
+                            if year > datetime.MAXYEAR:
+                                self._len = total
+                                return
+                        daysinmonth = calendar.monthrange(year, month)[1]
+                    ii.rebuild(year, month)
+
+    def __construct_byset(self, start, byxxx, base):
+        """
+        If a `BYXXX` sequence is passed to the constructor at the same level as
+        `FREQ` (e.g. `FREQ=HOURLY,BYHOUR={2,4,7},INTERVAL=3`), there are some
+        specifications which cannot be reached given some starting conditions.
+
+        This occurs whenever the interval is not coprime with the base of a
+        given unit and the difference between the starting position and the
+        ending position is not coprime with the greatest common denominator
+        between the interval and the base. For example, with a FREQ of hourly
+        starting at 17:00 and an interval of 4, the only valid values for
+        BYHOUR would be {21, 1, 5, 9, 13, 17}, because 4 and 24 are not
+        coprime.
+
+        :param start:
+            Specifies the starting position.
+        :param byxxx:
+            An iterable containing the list of allowed values.
+        :param base:
+            The largest allowable value for the specified frequency (e.g.
+            24 hours, 60 minutes).
+
+        This does not preserve the type of the iterable, returning a set, since
+        the values should be unique and the order is irrelevant, this will
+        speed up later lookups.
+
+        In the event of an empty set, raises a :exception:`ValueError`, as this
+        results in an empty rrule.
+        """
+
+        cset = set()
+
+        # Support a single byxxx value.
+        if isinstance(byxxx, integer_types):
+            byxxx = (byxxx, )
+
+        for num in byxxx:
+            i_gcd = gcd(self._interval, base)
+            # Use divmod rather than % because we need to wrap negative nums.
+            if i_gcd == 1 or divmod(num - start, i_gcd)[1] == 0:
+                cset.add(num)
+
+        if len(cset) == 0:
+            raise ValueError("Invalid rrule byxxx generates an empty set.")
+
+        return cset
+
+    def __mod_distance(self, value, byxxx, base):
+        """
+        Calculates the next value in a sequence where the `FREQ` parameter is
+        specified along with a `BYXXX` parameter at the same "level"
+        (e.g. `HOURLY` specified with `BYHOUR`).
+
+        :param value:
+            The old value of the component.
+        :param byxxx:
+            The `BYXXX` set, which should have been generated by
+            `rrule._construct_byset`, or something else which checks that a
+            valid rule is present.
+        :param base:
+            The largest allowable value for the specified frequency (e.g.
+            24 hours, 60 minutes).
+
+        If a valid value is not found after `base` iterations (the maximum
+        number before the sequence would start to repeat), this raises a
+        :exception:`ValueError`, as no valid values were found.
+
+        This returns a tuple of `divmod(n*interval, base)`, where `n` is the
+        smallest number of `interval` repetitions until the next specified
+        value in `byxxx` is found.
+        """
+        accumulator = 0
+        for ii in range(1, base + 1):
+            # Using divmod() over % to account for negative intervals
+            div, value = divmod(value + self._interval, base)
+            accumulator += div
+            if value in byxxx:
+                return (accumulator, value)
+
+
+class _iterinfo(object):
+    __slots__ = ["rrule", "lastyear", "lastmonth",
+                 "yearlen", "nextyearlen", "yearordinal", "yearweekday",
+                 "mmask", "mrange", "mdaymask", "nmdaymask",
+                 "wdaymask", "wnomask", "nwdaymask", "eastermask"]
+
+    def __init__(self, rrule):
+        for attr in self.__slots__:
+            setattr(self, attr, None)
+        self.rrule = rrule
+
+    def rebuild(self, year, month):
+        # Every mask is 7 days longer to handle cross-year weekly periods.
+        rr = self.rrule
+        if year != self.lastyear:
+            self.yearlen = 365 + calendar.isleap(year)
+            self.nextyearlen = 365 + calendar.isleap(year + 1)
+            firstyday = datetime.date(year, 1, 1)
+            self.yearordinal = firstyday.toordinal()
+            self.yearweekday = firstyday.weekday()
+
+            wday = datetime.date(year, 1, 1).weekday()
+            if self.yearlen == 365:
+                self.mmask = M365MASK
+                self.mdaymask = MDAY365MASK
+                self.nmdaymask = NMDAY365MASK
+                self.wdaymask = WDAYMASK[wday:]
+                self.mrange = M365RANGE
+            else:
+                self.mmask = M366MASK
+                self.mdaymask = MDAY366MASK
+                self.nmdaymask = NMDAY366MASK
+                self.wdaymask = WDAYMASK[wday:]
+                self.mrange = M366RANGE
+
+            if not rr._byweekno:
+                self.wnomask = None
+            else:
+                self.wnomask = [0]*(self.yearlen+7)
+                # no1wkst = firstwkst = self.wdaymask.index(rr._wkst)
+                no1wkst = firstwkst = (7-self.yearweekday+rr._wkst) % 7
+                if no1wkst >= 4:
+                    no1wkst = 0
+                    # Number of days in the year, plus the days we got
+                    # from last year.
+                    wyearlen = self.yearlen+(self.yearweekday-rr._wkst) % 7
+                else:
+                    # Number of days in the year, minus the days we
+                    # left in last year.
+                    wyearlen = self.yearlen-no1wkst
+                div, mod = divmod(wyearlen, 7)
+                numweeks = div+mod//4
+                for n in rr._byweekno:
+                    if n < 0:
+                        n += numweeks+1
+                    if not (0 < n <= numweeks):
+                        continue
+                    if n > 1:
+                        i = no1wkst+(n-1)*7
+                        if no1wkst != firstwkst:
+                            i -= 7-firstwkst
+                    else:
+                        i = no1wkst
+                    for j in range(7):
+                        self.wnomask[i] = 1
+                        i += 1
+                        if self.wdaymask[i] == rr._wkst:
+                            break
+                if 1 in rr._byweekno:
+                    # Check week number 1 of next year as well
+                    # TODO: Check -numweeks for next year.
+                    i = no1wkst+numweeks*7
+                    if no1wkst != firstwkst:
+                        i -= 7-firstwkst
+                    if i < self.yearlen:
+                        # If week starts in next year, we
+                        # don't care about it.
+                        for j in range(7):
+                            self.wnomask[i] = 1
+                            i += 1
+                            if self.wdaymask[i] == rr._wkst:
+                                break
+                if no1wkst:
+                    # Check last week number of last year as
+                    # well. If no1wkst is 0, either the year
+                    # started on week start, or week number 1
+                    # got days from last year, so there are no
+                    # days from last year's last week number in
+                    # this year.
+                    if -1 not in rr._byweekno:
+                        lyearweekday = datetime.date(year-1, 1, 1).weekday()
+                        lno1wkst = (7-lyearweekday+rr._wkst) % 7
+                        lyearlen = 365+calendar.isleap(year-1)
+                        if lno1wkst >= 4:
+                            lno1wkst = 0
+                            lnumweeks = 52+(lyearlen +
+                                            (lyearweekday-rr._wkst) % 7) % 7//4
+                        else:
+                            lnumweeks = 52+(self.yearlen-no1wkst) % 7//4
+                    else:
+                        lnumweeks = -1
+                    if lnumweeks in rr._byweekno:
+                        for i in range(no1wkst):
+                            self.wnomask[i] = 1
+
+        if (rr._bynweekday and (month != self.lastmonth or
+                                year != self.lastyear)):
+            ranges = []
+            if rr._freq == YEARLY:
+                if rr._bymonth:
+                    for month in rr._bymonth:
+                        ranges.append(self.mrange[month-1:month+1])
+                else:
+                    ranges = [(0, self.yearlen)]
+            elif rr._freq == MONTHLY:
+                ranges = [self.mrange[month-1:month+1]]
+            if ranges:
+                # Weekly frequency won't get here, so we may not
+                # care about cross-year weekly periods.
+                self.nwdaymask = [0]*self.yearlen
+                for first, last in ranges:
+                    last -= 1
+                    for wday, n in rr._bynweekday:
+                        if n < 0:
+                            i = last+(n+1)*7
+                            i -= (self.wdaymask[i]-wday) % 7
+                        else:
+                            i = first+(n-1)*7
+                            i += (7-self.wdaymask[i]+wday) % 7
+                        if first <= i <= last:
+                            self.nwdaymask[i] = 1
+
+        if rr._byeaster:
+            self.eastermask = [0]*(self.yearlen+7)
+            eyday = easter.easter(year).toordinal()-self.yearordinal
+            for offset in rr._byeaster:
+                self.eastermask[eyday+offset] = 1
+
+        self.lastyear = year
+        self.lastmonth = month
+
+    def ydayset(self, year, month, day):
+        return list(range(self.yearlen)), 0, self.yearlen
+
+    def mdayset(self, year, month, day):
+        dset = [None]*self.yearlen
+        start, end = self.mrange[month-1:month+1]
+        for i in range(start, end):
+            dset[i] = i
+        return dset, start, end
+
+    def wdayset(self, year, month, day):
+        # We need to handle cross-year weeks here.
+        dset = [None]*(self.yearlen+7)
+        i = datetime.date(year, month, day).toordinal()-self.yearordinal
+        start = i
+        for j in range(7):
+            dset[i] = i
+            i += 1
+            # if (not (0 <= i < self.yearlen) or
+            #    self.wdaymask[i] == self.rrule._wkst):
+            # This will cross the year boundary, if necessary.
+            if self.wdaymask[i] == self.rrule._wkst:
+                break
+        return dset, start, i
+
+    def ddayset(self, year, month, day):
+        dset = [None] * self.yearlen
+        i = datetime.date(year, month, day).toordinal() - self.yearordinal
+        dset[i] = i
+        return dset, i, i + 1
+
+    def htimeset(self, hour, minute, second):
+        tset = []
+        rr = self.rrule
+        for minute in rr._byminute:
+            for second in rr._bysecond:
+                tset.append(datetime.time(hour, minute, second,
+                                          tzinfo=rr._tzinfo))
+        tset.sort()
+        return tset
+
+    def mtimeset(self, hour, minute, second):
+        tset = []
+        rr = self.rrule
+        for second in rr._bysecond:
+            tset.append(datetime.time(hour, minute, second, tzinfo=rr._tzinfo))
+        tset.sort()
+        return tset
+
+    def stimeset(self, hour, minute, second):
+        return (datetime.time(hour, minute, second,
+                tzinfo=self.rrule._tzinfo),)
+
+
+class rruleset(rrulebase):
+    """ The rruleset type allows more complex recurrence setups, mixing
+    multiple rules, dates, exclusion rules, and exclusion dates. The type
+    constructor takes the following keyword arguments:
+
+    :param cache: If True, caching of results will be enabled, improving
+                  performance of multiple queries considerably. """
+
+    class _genitem(object):
+        def __init__(self, genlist, gen):
+            try:
+                self.dt = advance_iterator(gen)
+                genlist.append(self)
+            except StopIteration:
+                pass
+            self.genlist = genlist
+            self.gen = gen
+
+        def __next__(self):
+            try:
+                self.dt = advance_iterator(self.gen)
+            except StopIteration:
+                if self.genlist[0] is self:
+                    heapq.heappop(self.genlist)
+                else:
+                    self.genlist.remove(self)
+                    heapq.heapify(self.genlist)
+
+        next = __next__
+
+        def __lt__(self, other):
+            return self.dt < other.dt
+
+        def __gt__(self, other):
+            return self.dt > other.dt
+
+        def __eq__(self, other):
+            return self.dt == other.dt
+
+        def __ne__(self, other):
+            return self.dt != other.dt
+
+    def __init__(self, cache=False):
+        super(rruleset, self).__init__(cache)
+        self._rrule = []
+        self._rdate = []
+        self._exrule = []
+        self._exdate = []
+
+    @_invalidates_cache
+    def rrule(self, rrule):
+        """ Include the given :py:class:`rrule` instance in the recurrence set
+            generation. """
+        self._rrule.append(rrule)
+
+    @_invalidates_cache
+    def rdate(self, rdate):
+        """ Include the given :py:class:`datetime` instance in the recurrence
+            set generation. """
+        self._rdate.append(rdate)
+
+    @_invalidates_cache
+    def exrule(self, exrule):
+        """ Include the given rrule instance in the recurrence set exclusion
+            list. Dates which are part of the given recurrence rules will not
+            be generated, even if some inclusive rrule or rdate matches them.
+        """
+        self._exrule.append(exrule)
+
+    @_invalidates_cache
+    def exdate(self, exdate):
+        """ Include the given datetime instance in the recurrence set
+            exclusion list. Dates included that way will not be generated,
+            even if some inclusive rrule or rdate matches them. """
+        self._exdate.append(exdate)
+
+    def _iter(self):
+        rlist = []
+        self._rdate.sort()
+        self._genitem(rlist, iter(self._rdate))
+        for gen in [iter(x) for x in self._rrule]:
+            self._genitem(rlist, gen)
+        exlist = []
+        self._exdate.sort()
+        self._genitem(exlist, iter(self._exdate))
+        for gen in [iter(x) for x in self._exrule]:
+            self._genitem(exlist, gen)
+        lastdt = None
+        total = 0
+        heapq.heapify(rlist)
+        heapq.heapify(exlist)
+        while rlist:
+            ritem = rlist[0]
+            if not lastdt or lastdt != ritem.dt:
+                while exlist and exlist[0] < ritem:
+                    exitem = exlist[0]
+                    advance_iterator(exitem)
+                    if exlist and exlist[0] is exitem:
+                        heapq.heapreplace(exlist, exitem)
+                if not exlist or ritem != exlist[0]:
+                    total += 1
+                    yield ritem.dt
+                lastdt = ritem.dt
+            advance_iterator(ritem)
+            if rlist and rlist[0] is ritem:
+                heapq.heapreplace(rlist, ritem)
+        self._len = total
+
+
+
+
+class _rrulestr(object):
+    """ Parses a string representation of a recurrence rule or set of
+    recurrence rules.
+
+    :param s:
+        Required, a string defining one or more recurrence rules.
+
+    :param dtstart:
+        If given, used as the default recurrence start if not specified in the
+        rule string.
+
+    :param cache:
+        If set ``True`` caching of results will be enabled, improving
+        performance of multiple queries considerably.
+
+    :param unfold:
+        If set ``True`` indicates that a rule string is split over more
+        than one line and should be joined before processing.
+
+    :param forceset:
+        If set ``True`` forces a :class:`dateutil.rrule.rruleset` to
+        be returned.
+
+    :param compatible:
+        If set ``True`` forces ``unfold`` and ``forceset`` to be ``True``.
+
+    :param ignoretz:
+        If set ``True``, time zones in parsed strings are ignored and a naive
+        :class:`datetime.datetime` object is returned.
+
+    :param tzids:
+        If given, a callable or mapping used to retrieve a
+        :class:`datetime.tzinfo` from a string representation.
+        Defaults to :func:`dateutil.tz.gettz`.
+
+    :param tzinfos:
+        Additional time zone names / aliases which may be present in a string
+        representation.  See :func:`dateutil.parser.parse` for more
+        information.
+
+    :return:
+        Returns a :class:`dateutil.rrule.rruleset` or
+        :class:`dateutil.rrule.rrule`
+    """
+
+    _freq_map = {"YEARLY": YEARLY,
+                 "MONTHLY": MONTHLY,
+                 "WEEKLY": WEEKLY,
+                 "DAILY": DAILY,
+                 "HOURLY": HOURLY,
+                 "MINUTELY": MINUTELY,
+                 "SECONDLY": SECONDLY}
+
+    _weekday_map = {"MO": 0, "TU": 1, "WE": 2, "TH": 3,
+                    "FR": 4, "SA": 5, "SU": 6}
+
+    def _handle_int(self, rrkwargs, name, value, **kwargs):
+        rrkwargs[name.lower()] = int(value)
+
+    def _handle_int_list(self, rrkwargs, name, value, **kwargs):
+        rrkwargs[name.lower()] = [int(x) for x in value.split(',')]
+
+    _handle_INTERVAL = _handle_int
+    _handle_COUNT = _handle_int
+    _handle_BYSETPOS = _handle_int_list
+    _handle_BYMONTH = _handle_int_list
+    _handle_BYMONTHDAY = _handle_int_list
+    _handle_BYYEARDAY = _handle_int_list
+    _handle_BYEASTER = _handle_int_list
+    _handle_BYWEEKNO = _handle_int_list
+    _handle_BYHOUR = _handle_int_list
+    _handle_BYMINUTE = _handle_int_list
+    _handle_BYSECOND = _handle_int_list
+
+    def _handle_FREQ(self, rrkwargs, name, value, **kwargs):
+        rrkwargs["freq"] = self._freq_map[value]
+
+    def _handle_UNTIL(self, rrkwargs, name, value, **kwargs):
+        global parser
+        if not parser:
+            from dateutil import parser
+        try:
+            rrkwargs["until"] = parser.parse(value,
+                                             ignoretz=kwargs.get("ignoretz"),
+                                             tzinfos=kwargs.get("tzinfos"))
+        except ValueError:
+            raise ValueError("invalid until date")
+
+    def _handle_WKST(self, rrkwargs, name, value, **kwargs):
+        rrkwargs["wkst"] = self._weekday_map[value]
+
+    def _handle_BYWEEKDAY(self, rrkwargs, name, value, **kwargs):
+        """
+        Two ways to specify this: +1MO or MO(+1)
+        """
+        l = []
+        for wday in value.split(','):
+            if '(' in wday:
+                # If it's of the form TH(+1), etc.
+                splt = wday.split('(')
+                w = splt[0]
+                n = int(splt[1][:-1])
+            elif len(wday):
+                # If it's of the form +1MO
+                for i in range(len(wday)):
+                    if wday[i] not in '+-0123456789':
+                        break
+                n = wday[:i] or None
+                w = wday[i:]
+                if n:
+                    n = int(n)
+            else:
+                raise ValueError("Invalid (empty) BYDAY specification.")
+
+            l.append(weekdays[self._weekday_map[w]](n))
+        rrkwargs["byweekday"] = l
+
+    _handle_BYDAY = _handle_BYWEEKDAY
+
+    def _parse_rfc_rrule(self, line,
+                         dtstart=None,
+                         cache=False,
+                         ignoretz=False,
+                         tzinfos=None):
+        if line.find(':') != -1:
+            name, value = line.split(':')
+            if name != "RRULE":
+                raise ValueError("unknown parameter name")
+        else:
+            value = line
+        rrkwargs = {}
+        for pair in value.split(';'):
+            name, value = pair.split('=')
+            name = name.upper()
+            value = value.upper()
+            try:
+                getattr(self, "_handle_"+name)(rrkwargs, name, value,
+                                               ignoretz=ignoretz,
+                                               tzinfos=tzinfos)
+            except AttributeError:
+                raise ValueError("unknown parameter '%s'" % name)
+            except (KeyError, ValueError):
+                raise ValueError("invalid '%s': %s" % (name, value))
+        return rrule(dtstart=dtstart, cache=cache, **rrkwargs)
+
+    def _parse_date_value(self, date_value, parms, rule_tzids,
+                          ignoretz, tzids, tzinfos):
+        global parser
+        if not parser:
+            from dateutil import parser
+
+        datevals = []
+        value_found = False
+        TZID = None
+
+        for parm in parms:
+            if parm.startswith("TZID="):
+                try:
+                    tzkey = rule_tzids[parm.split('TZID=')[-1]]
+                except KeyError:
+                    continue
+                if tzids is None:
+                    from . import tz
+                    tzlookup = tz.gettz
+                elif callable(tzids):
+                    tzlookup = tzids
+                else:
+                    tzlookup = getattr(tzids, 'get', None)
+                    if tzlookup is None:
+                        msg = ('tzids must be a callable, mapping, or None, '
+                               'not %s' % tzids)
+                        raise ValueError(msg)
+
+                TZID = tzlookup(tzkey)
+                continue
+
+            # RFC 5445 3.8.2.4: The VALUE parameter is optional, but may be found
+            # only once.
+            if parm not in {"VALUE=DATE-TIME", "VALUE=DATE"}:
+                raise ValueError("unsupported parm: " + parm)
+            else:
+                if value_found:
+                    msg = ("Duplicate value parameter found in: " + parm)
+                    raise ValueError(msg)
+                value_found = True
+
+        for datestr in date_value.split(','):
+            date = parser.parse(datestr, ignoretz=ignoretz, tzinfos=tzinfos)
+            if TZID is not None:
+                if date.tzinfo is None:
+                    date = date.replace(tzinfo=TZID)
+                else:
+                    raise ValueError('DTSTART/EXDATE specifies multiple timezone')
+            datevals.append(date)
+
+        return datevals
+
+    def _parse_rfc(self, s,
+                   dtstart=None,
+                   cache=False,
+                   unfold=False,
+                   forceset=False,
+                   compatible=False,
+                   ignoretz=False,
+                   tzids=None,
+                   tzinfos=None):
+        global parser
+        if compatible:
+            forceset = True
+            unfold = True
+
+        TZID_NAMES = dict(map(
+            lambda x: (x.upper(), x),
+            re.findall('TZID=(?P<name>[^:]+):', s)
+        ))
+        s = s.upper()
+        if not s.strip():
+            raise ValueError("empty string")
+        if unfold:
+            lines = s.splitlines()
+            i = 0
+            while i < len(lines):
+                line = lines[i].rstrip()
+                if not line:
+                    del lines[i]
+                elif i > 0 and line[0] == " ":
+                    lines[i-1] += line[1:]
+                    del lines[i]
+                else:
+                    i += 1
+        else:
+            lines = s.split()
+        if (not forceset and len(lines) == 1 and (s.find(':') == -1 or
+                                                  s.startswith('RRULE:'))):
+            return self._parse_rfc_rrule(lines[0], cache=cache,
+                                         dtstart=dtstart, ignoretz=ignoretz,
+                                         tzinfos=tzinfos)
+        else:
+            rrulevals = []
+            rdatevals = []
+            exrulevals = []
+            exdatevals = []
+            for line in lines:
+                if not line:
+                    continue
+                if line.find(':') == -1:
+                    name = "RRULE"
+                    value = line
+                else:
+                    name, value = line.split(':', 1)
+                parms = name.split(';')
+                if not parms:
+                    raise ValueError("empty property name")
+                name = parms[0]
+                parms = parms[1:]
+                if name == "RRULE":
+                    for parm in parms:
+                        raise ValueError("unsupported RRULE parm: "+parm)
+                    rrulevals.append(value)
+                elif name == "RDATE":
+                    for parm in parms:
+                        if parm != "VALUE=DATE-TIME":
+                            raise ValueError("unsupported RDATE parm: "+parm)
+                    rdatevals.append(value)
+                elif name == "EXRULE":
+                    for parm in parms:
+                        raise ValueError("unsupported EXRULE parm: "+parm)
+                    exrulevals.append(value)
+                elif name == "EXDATE":
+                    exdatevals.extend(
+                        self._parse_date_value(value, parms,
+                                               TZID_NAMES, ignoretz,
+                                               tzids, tzinfos)
+                    )
+                elif name == "DTSTART":
+                    dtvals = self._parse_date_value(value, parms, TZID_NAMES,
+                                                    ignoretz, tzids, tzinfos)
+                    if len(dtvals) != 1:
+                        raise ValueError("Multiple DTSTART values specified:" +
+                                         value)
+                    dtstart = dtvals[0]
+                else:
+                    raise ValueError("unsupported property: "+name)
+            if (forceset or len(rrulevals) > 1 or rdatevals
+                    or exrulevals or exdatevals):
+                if not parser and (rdatevals or exdatevals):
+                    from dateutil import parser
+                rset = rruleset(cache=cache)
+                for value in rrulevals:
+                    rset.rrule(self._parse_rfc_rrule(value, dtstart=dtstart,
+                                                     ignoretz=ignoretz,
+                                                     tzinfos=tzinfos))
+                for value in rdatevals:
+                    for datestr in value.split(','):
+                        rset.rdate(parser.parse(datestr,
+                                                ignoretz=ignoretz,
+                                                tzinfos=tzinfos))
+                for value in exrulevals:
+                    rset.exrule(self._parse_rfc_rrule(value, dtstart=dtstart,
+                                                      ignoretz=ignoretz,
+                                                      tzinfos=tzinfos))
+                for value in exdatevals:
+                    rset.exdate(value)
+                if compatible and dtstart:
+                    rset.rdate(dtstart)
+                return rset
+            else:
+                return self._parse_rfc_rrule(rrulevals[0],
+                                             dtstart=dtstart,
+                                             cache=cache,
+                                             ignoretz=ignoretz,
+                                             tzinfos=tzinfos)
+
+    def __call__(self, s, **kwargs):
+        return self._parse_rfc(s, **kwargs)
+
+
+rrulestr = _rrulestr()
+
+# vim:ts=4:sw=4:et
diff --git a/venv/Lib/site-packages/dateutil/tz/__init__.py b/venv/Lib/site-packages/dateutil/tz/__init__.py
new file mode 100644
index 0000000..af1352c
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tz/__init__.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+from .tz import *
+from .tz import __doc__
+
+__all__ = ["tzutc", "tzoffset", "tzlocal", "tzfile", "tzrange",
+           "tzstr", "tzical", "tzwin", "tzwinlocal", "gettz",
+           "enfold", "datetime_ambiguous", "datetime_exists",
+           "resolve_imaginary", "UTC", "DeprecatedTzFormatWarning"]
+
+
+class DeprecatedTzFormatWarning(Warning):
+    """Warning raised when time zones are parsed from deprecated formats."""
diff --git a/venv/Lib/site-packages/dateutil/tz/__pycache__/__init__.cpython-312.pyc b/venv/Lib/site-packages/dateutil/tz/__pycache__/__init__.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3d00c8b68f786141fff5904ca3bad5c727f309e8
GIT binary patch
literal 729
zcmX|9KX21O6u+~bI7(a5A|zB8Fk_I?iVY#eKqJaf%F+tSvUIxmp53GNIozES;)$W+
zD|AI{2=NX027H5)m|$T;1eQ$PIiYWO@Av-Sd-uL>ZS|3*W%(}qf)V=el>gLOgT(_2
zE)hcv7wEHx9r6lP;uvF;Bj$g=vFD*f#DWXNI^ciuSDA4z?+(JBwk{fAgYQ`u62hvK
zkioX;=%&`G>FK7*G6mX%x+$uZ7N)D4j2GYxl8PK$sM6Bex$|3f#)av(VwKX#LF>kJ
zL1b0I%ymXJXkG%L<(TJnRV#Dt$_8(^(#q^eP*pJn!b_TSLFL@|rzZzycLWm&sja|H
znx~a4seVbN;37}g8)=0b%h6)nvP%Rg#tg+C!?8d22EM#u&CQc_W+W+Bz@ph1h{!!G
zYAOLLq7tGBmClvPs*KoG>nLkGtG(kvV0wfIYNsKlPe@s@x^Q@tkk>UWRvsDHejm}o
za<mi&50g^`QYG|^Q<l6CFp_)<$*4-}5`<RCA=l69abmmB9EPtZWja(d7;37{hxd~y
zh-q@f$BE(^h7+2e+bET|71o*;`?}dDgbS_-*_+JUSzESYyDN7%7sv!h@|H!d{dmwZ
zp8ZbuNOuIZDC_{?dONH9T^HPD+_q@hd$bz#vAkndw{3OTvR^*N_y^kghHm~2{EZQQ
S8~)kE_&I(b{zXo<CH?_F?c44E

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/tz/__pycache__/_common.cpython-312.pyc b/venv/Lib/site-packages/dateutil/tz/__pycache__/_common.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..09d4ca77dc42d588fb565a1ff595148857207ecb
GIT binary patch
literal 14182
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
L{+gq2#?gNR5nEf!

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/tz/__pycache__/_factories.cpython-312.pyc b/venv/Lib/site-packages/dateutil/tz/__pycache__/_factories.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..9a7c45d4cf662f7dac4837a0118d8e5c34842bcf
GIT binary patch
literal 4615
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
Zp{GM=-Pt%KP#sRRLi>CFB2e+P@ox}dt0Mpa

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/tz/__pycache__/tz.cpython-312.pyc b/venv/Lib/site-packages/dateutil/tz/__pycache__/tz.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..acb815b5d7d6899ddad50cc6995d4fc8fd7c47e8
GIT binary patch
literal 66048
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/tz/__pycache__/win.cpython-312.pyc b/venv/Lib/site-packages/dateutil/tz/__pycache__/win.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5a73f3771d58c21c12b6bb1751a7fd28ef84ae70
GIT binary patch
literal 17285
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
AH~;_u

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/tz/_common.py b/venv/Lib/site-packages/dateutil/tz/_common.py
new file mode 100644
index 0000000..e6ac118
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tz/_common.py
@@ -0,0 +1,419 @@
+from six import PY2
+
+from functools import wraps
+
+from datetime import datetime, timedelta, tzinfo
+
+
+ZERO = timedelta(0)
+
+__all__ = ['tzname_in_python2', 'enfold']
+
+
+def tzname_in_python2(namefunc):
+    """Change unicode output into bytestrings in Python 2
+
+    tzname() API changed in Python 3. It used to return bytes, but was changed
+    to unicode strings
+    """
+    if PY2:
+        @wraps(namefunc)
+        def adjust_encoding(*args, **kwargs):
+            name = namefunc(*args, **kwargs)
+            if name is not None:
+                name = name.encode()
+
+            return name
+
+        return adjust_encoding
+    else:
+        return namefunc
+
+
+# The following is adapted from Alexander Belopolsky's tz library
+# https://github.com/abalkin/tz
+if hasattr(datetime, 'fold'):
+    # This is the pre-python 3.6 fold situation
+    def enfold(dt, fold=1):
+        """
+        Provides a unified interface for assigning the ``fold`` attribute to
+        datetimes both before and after the implementation of PEP-495.
+
+        :param fold:
+            The value for the ``fold`` attribute in the returned datetime. This
+            should be either 0 or 1.
+
+        :return:
+            Returns an object for which ``getattr(dt, 'fold', 0)`` returns
+            ``fold`` for all versions of Python. In versions prior to
+            Python 3.6, this is a ``_DatetimeWithFold`` object, which is a
+            subclass of :py:class:`datetime.datetime` with the ``fold``
+            attribute added, if ``fold`` is 1.
+
+        .. versionadded:: 2.6.0
+        """
+        return dt.replace(fold=fold)
+
+else:
+    class _DatetimeWithFold(datetime):
+        """
+        This is a class designed to provide a PEP 495-compliant interface for
+        Python versions before 3.6. It is used only for dates in a fold, so
+        the ``fold`` attribute is fixed at ``1``.
+
+        .. versionadded:: 2.6.0
+        """
+        __slots__ = ()
+
+        def replace(self, *args, **kwargs):
+            """
+            Return a datetime with the same attributes, except for those
+            attributes given new values by whichever keyword arguments are
+            specified. Note that tzinfo=None can be specified to create a naive
+            datetime from an aware datetime with no conversion of date and time
+            data.
+
+            This is reimplemented in ``_DatetimeWithFold`` because pypy3 will
+            return a ``datetime.datetime`` even if ``fold`` is unchanged.
+            """
+            argnames = (
+                'year', 'month', 'day', 'hour', 'minute', 'second',
+                'microsecond', 'tzinfo'
+            )
+
+            for arg, argname in zip(args, argnames):
+                if argname in kwargs:
+                    raise TypeError('Duplicate argument: {}'.format(argname))
+
+                kwargs[argname] = arg
+
+            for argname in argnames:
+                if argname not in kwargs:
+                    kwargs[argname] = getattr(self, argname)
+
+            dt_class = self.__class__ if kwargs.get('fold', 1) else datetime
+
+            return dt_class(**kwargs)
+
+        @property
+        def fold(self):
+            return 1
+
+    def enfold(dt, fold=1):
+        """
+        Provides a unified interface for assigning the ``fold`` attribute to
+        datetimes both before and after the implementation of PEP-495.
+
+        :param fold:
+            The value for the ``fold`` attribute in the returned datetime. This
+            should be either 0 or 1.
+
+        :return:
+            Returns an object for which ``getattr(dt, 'fold', 0)`` returns
+            ``fold`` for all versions of Python. In versions prior to
+            Python 3.6, this is a ``_DatetimeWithFold`` object, which is a
+            subclass of :py:class:`datetime.datetime` with the ``fold``
+            attribute added, if ``fold`` is 1.
+
+        .. versionadded:: 2.6.0
+        """
+        if getattr(dt, 'fold', 0) == fold:
+            return dt
+
+        args = dt.timetuple()[:6]
+        args += (dt.microsecond, dt.tzinfo)
+
+        if fold:
+            return _DatetimeWithFold(*args)
+        else:
+            return datetime(*args)
+
+
+def _validate_fromutc_inputs(f):
+    """
+    The CPython version of ``fromutc`` checks that the input is a ``datetime``
+    object and that ``self`` is attached as its ``tzinfo``.
+    """
+    @wraps(f)
+    def fromutc(self, dt):
+        if not isinstance(dt, datetime):
+            raise TypeError("fromutc() requires a datetime argument")
+        if dt.tzinfo is not self:
+            raise ValueError("dt.tzinfo is not self")
+
+        return f(self, dt)
+
+    return fromutc
+
+
+class _tzinfo(tzinfo):
+    """
+    Base class for all ``dateutil`` ``tzinfo`` objects.
+    """
+
+    def is_ambiguous(self, dt):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+
+
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+
+        dt = dt.replace(tzinfo=self)
+
+        wall_0 = enfold(dt, fold=0)
+        wall_1 = enfold(dt, fold=1)
+
+        same_offset = wall_0.utcoffset() == wall_1.utcoffset()
+        same_dt = wall_0.replace(tzinfo=None) == wall_1.replace(tzinfo=None)
+
+        return same_dt and not same_offset
+
+    def _fold_status(self, dt_utc, dt_wall):
+        """
+        Determine the fold status of a "wall" datetime, given a representation
+        of the same datetime as a (naive) UTC datetime. This is calculated based
+        on the assumption that ``dt.utcoffset() - dt.dst()`` is constant for all
+        datetimes, and that this offset is the actual number of hours separating
+        ``dt_utc`` and ``dt_wall``.
+
+        :param dt_utc:
+            Representation of the datetime as UTC
+
+        :param dt_wall:
+            Representation of the datetime as "wall time". This parameter must
+            either have a `fold` attribute or have a fold-naive
+            :class:`datetime.tzinfo` attached, otherwise the calculation may
+            fail.
+        """
+        if self.is_ambiguous(dt_wall):
+            delta_wall = dt_wall - dt_utc
+            _fold = int(delta_wall == (dt_utc.utcoffset() - dt_utc.dst()))
+        else:
+            _fold = 0
+
+        return _fold
+
+    def _fold(self, dt):
+        return getattr(dt, 'fold', 0)
+
+    def _fromutc(self, dt):
+        """
+        Given a timezone-aware datetime in a given timezone, calculates a
+        timezone-aware datetime in a new timezone.
+
+        Since this is the one time that we *know* we have an unambiguous
+        datetime object, we take this opportunity to determine whether the
+        datetime is ambiguous and in a "fold" state (e.g. if it's the first
+        occurrence, chronologically, of the ambiguous datetime).
+
+        :param dt:
+            A timezone-aware :class:`datetime.datetime` object.
+        """
+
+        # Re-implement the algorithm from Python's datetime.py
+        dtoff = dt.utcoffset()
+        if dtoff is None:
+            raise ValueError("fromutc() requires a non-None utcoffset() "
+                             "result")
+
+        # The original datetime.py code assumes that `dst()` defaults to
+        # zero during ambiguous times. PEP 495 inverts this presumption, so
+        # for pre-PEP 495 versions of python, we need to tweak the algorithm.
+        dtdst = dt.dst()
+        if dtdst is None:
+            raise ValueError("fromutc() requires a non-None dst() result")
+        delta = dtoff - dtdst
+
+        dt += delta
+        # Set fold=1 so we can default to being in the fold for
+        # ambiguous dates.
+        dtdst = enfold(dt, fold=1).dst()
+        if dtdst is None:
+            raise ValueError("fromutc(): dt.dst gave inconsistent "
+                             "results; cannot convert")
+        return dt + dtdst
+
+    @_validate_fromutc_inputs
+    def fromutc(self, dt):
+        """
+        Given a timezone-aware datetime in a given timezone, calculates a
+        timezone-aware datetime in a new timezone.
+
+        Since this is the one time that we *know* we have an unambiguous
+        datetime object, we take this opportunity to determine whether the
+        datetime is ambiguous and in a "fold" state (e.g. if it's the first
+        occurrence, chronologically, of the ambiguous datetime).
+
+        :param dt:
+            A timezone-aware :class:`datetime.datetime` object.
+        """
+        dt_wall = self._fromutc(dt)
+
+        # Calculate the fold status given the two datetimes.
+        _fold = self._fold_status(dt, dt_wall)
+
+        # Set the default fold value for ambiguous dates
+        return enfold(dt_wall, fold=_fold)
+
+
+class tzrangebase(_tzinfo):
+    """
+    This is an abstract base class for time zones represented by an annual
+    transition into and out of DST. Child classes should implement the following
+    methods:
+
+        * ``__init__(self, *args, **kwargs)``
+        * ``transitions(self, year)`` - this is expected to return a tuple of
+          datetimes representing the DST on and off transitions in standard
+          time.
+
+    A fully initialized ``tzrangebase`` subclass should also provide the
+    following attributes:
+        * ``hasdst``: Boolean whether or not the zone uses DST.
+        * ``_dst_offset`` / ``_std_offset``: :class:`datetime.timedelta` objects
+          representing the respective UTC offsets.
+        * ``_dst_abbr`` / ``_std_abbr``: Strings representing the timezone short
+          abbreviations in DST and STD, respectively.
+        * ``_hasdst``: Whether or not the zone has DST.
+
+    .. versionadded:: 2.6.0
+    """
+    def __init__(self):
+        raise NotImplementedError('tzrangebase is an abstract base class')
+
+    def utcoffset(self, dt):
+        isdst = self._isdst(dt)
+
+        if isdst is None:
+            return None
+        elif isdst:
+            return self._dst_offset
+        else:
+            return self._std_offset
+
+    def dst(self, dt):
+        isdst = self._isdst(dt)
+
+        if isdst is None:
+            return None
+        elif isdst:
+            return self._dst_base_offset
+        else:
+            return ZERO
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        if self._isdst(dt):
+            return self._dst_abbr
+        else:
+            return self._std_abbr
+
+    def fromutc(self, dt):
+        """ Given a datetime in UTC, return local time """
+        if not isinstance(dt, datetime):
+            raise TypeError("fromutc() requires a datetime argument")
+
+        if dt.tzinfo is not self:
+            raise ValueError("dt.tzinfo is not self")
+
+        # Get transitions - if there are none, fixed offset
+        transitions = self.transitions(dt.year)
+        if transitions is None:
+            return dt + self.utcoffset(dt)
+
+        # Get the transition times in UTC
+        dston, dstoff = transitions
+
+        dston -= self._std_offset
+        dstoff -= self._std_offset
+
+        utc_transitions = (dston, dstoff)
+        dt_utc = dt.replace(tzinfo=None)
+
+        isdst = self._naive_isdst(dt_utc, utc_transitions)
+
+        if isdst:
+            dt_wall = dt + self._dst_offset
+        else:
+            dt_wall = dt + self._std_offset
+
+        _fold = int(not isdst and self.is_ambiguous(dt_wall))
+
+        return enfold(dt_wall, fold=_fold)
+
+    def is_ambiguous(self, dt):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+
+
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+        if not self.hasdst:
+            return False
+
+        start, end = self.transitions(dt.year)
+
+        dt = dt.replace(tzinfo=None)
+        return (end <= dt < end + self._dst_base_offset)
+
+    def _isdst(self, dt):
+        if not self.hasdst:
+            return False
+        elif dt is None:
+            return None
+
+        transitions = self.transitions(dt.year)
+
+        if transitions is None:
+            return False
+
+        dt = dt.replace(tzinfo=None)
+
+        isdst = self._naive_isdst(dt, transitions)
+
+        # Handle ambiguous dates
+        if not isdst and self.is_ambiguous(dt):
+            return not self._fold(dt)
+        else:
+            return isdst
+
+    def _naive_isdst(self, dt, transitions):
+        dston, dstoff = transitions
+
+        dt = dt.replace(tzinfo=None)
+
+        if dston < dstoff:
+            isdst = dston <= dt < dstoff
+        else:
+            isdst = not dstoff <= dt < dston
+
+        return isdst
+
+    @property
+    def _dst_base_offset(self):
+        return self._dst_offset - self._std_offset
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        return "%s(...)" % self.__class__.__name__
+
+    __reduce__ = object.__reduce__
diff --git a/venv/Lib/site-packages/dateutil/tz/_factories.py b/venv/Lib/site-packages/dateutil/tz/_factories.py
new file mode 100644
index 0000000..f8a6589
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tz/_factories.py
@@ -0,0 +1,80 @@
+from datetime import timedelta
+import weakref
+from collections import OrderedDict
+
+from six.moves import _thread
+
+
+class _TzSingleton(type):
+    def __init__(cls, *args, **kwargs):
+        cls.__instance = None
+        super(_TzSingleton, cls).__init__(*args, **kwargs)
+
+    def __call__(cls):
+        if cls.__instance is None:
+            cls.__instance = super(_TzSingleton, cls).__call__()
+        return cls.__instance
+
+
+class _TzFactory(type):
+    def instance(cls, *args, **kwargs):
+        """Alternate constructor that returns a fresh instance"""
+        return type.__call__(cls, *args, **kwargs)
+
+
+class _TzOffsetFactory(_TzFactory):
+    def __init__(cls, *args, **kwargs):
+        cls.__instances = weakref.WeakValueDictionary()
+        cls.__strong_cache = OrderedDict()
+        cls.__strong_cache_size = 8
+
+        cls._cache_lock = _thread.allocate_lock()
+
+    def __call__(cls, name, offset):
+        if isinstance(offset, timedelta):
+            key = (name, offset.total_seconds())
+        else:
+            key = (name, offset)
+
+        instance = cls.__instances.get(key, None)
+        if instance is None:
+            instance = cls.__instances.setdefault(key,
+                                                  cls.instance(name, offset))
+
+        # This lock may not be necessary in Python 3. See GH issue #901
+        with cls._cache_lock:
+            cls.__strong_cache[key] = cls.__strong_cache.pop(key, instance)
+
+            # Remove an item if the strong cache is overpopulated
+            if len(cls.__strong_cache) > cls.__strong_cache_size:
+                cls.__strong_cache.popitem(last=False)
+
+        return instance
+
+
+class _TzStrFactory(_TzFactory):
+    def __init__(cls, *args, **kwargs):
+        cls.__instances = weakref.WeakValueDictionary()
+        cls.__strong_cache = OrderedDict()
+        cls.__strong_cache_size = 8
+
+        cls.__cache_lock = _thread.allocate_lock()
+
+    def __call__(cls, s, posix_offset=False):
+        key = (s, posix_offset)
+        instance = cls.__instances.get(key, None)
+
+        if instance is None:
+            instance = cls.__instances.setdefault(key,
+                cls.instance(s, posix_offset))
+
+        # This lock may not be necessary in Python 3. See GH issue #901
+        with cls.__cache_lock:
+            cls.__strong_cache[key] = cls.__strong_cache.pop(key, instance)
+
+            # Remove an item if the strong cache is overpopulated
+            if len(cls.__strong_cache) > cls.__strong_cache_size:
+                cls.__strong_cache.popitem(last=False)
+
+        return instance
+
diff --git a/venv/Lib/site-packages/dateutil/tz/tz.py b/venv/Lib/site-packages/dateutil/tz/tz.py
new file mode 100644
index 0000000..c67f56d
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tz/tz.py
@@ -0,0 +1,1849 @@
+# -*- coding: utf-8 -*-
+"""
+This module offers timezone implementations subclassing the abstract
+:py:class:`datetime.tzinfo` type. There are classes to handle tzfile format
+files (usually are in :file:`/etc/localtime`, :file:`/usr/share/zoneinfo`,
+etc), TZ environment string (in all known formats), given ranges (with help
+from relative deltas), local machine timezone, fixed offset timezone, and UTC
+timezone.
+"""
+import datetime
+import struct
+import time
+import sys
+import os
+import bisect
+import weakref
+from collections import OrderedDict
+
+import six
+from six import string_types
+from six.moves import _thread
+from ._common import tzname_in_python2, _tzinfo
+from ._common import tzrangebase, enfold
+from ._common import _validate_fromutc_inputs
+
+from ._factories import _TzSingleton, _TzOffsetFactory
+from ._factories import _TzStrFactory
+try:
+    from .win import tzwin, tzwinlocal
+except ImportError:
+    tzwin = tzwinlocal = None
+
+# For warning about rounding tzinfo
+from warnings import warn
+
+ZERO = datetime.timedelta(0)
+EPOCH = datetime.datetime.utcfromtimestamp(0)
+EPOCHORDINAL = EPOCH.toordinal()
+
+
+@six.add_metaclass(_TzSingleton)
+class tzutc(datetime.tzinfo):
+    """
+    This is a tzinfo object that represents the UTC time zone.
+
+    **Examples:**
+
+    .. doctest::
+
+        >>> from datetime import *
+        >>> from dateutil.tz import *
+
+        >>> datetime.now()
+        datetime.datetime(2003, 9, 27, 9, 40, 1, 521290)
+
+        >>> datetime.now(tzutc())
+        datetime.datetime(2003, 9, 27, 12, 40, 12, 156379, tzinfo=tzutc())
+
+        >>> datetime.now(tzutc()).tzname()
+        'UTC'
+
+    .. versionchanged:: 2.7.0
+        ``tzutc()`` is now a singleton, so the result of ``tzutc()`` will
+        always return the same object.
+
+        .. doctest::
+
+            >>> from dateutil.tz import tzutc, UTC
+            >>> tzutc() is tzutc()
+            True
+            >>> tzutc() is UTC
+            True
+    """
+    def utcoffset(self, dt):
+        return ZERO
+
+    def dst(self, dt):
+        return ZERO
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        return "UTC"
+
+    def is_ambiguous(self, dt):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+
+
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+        return False
+
+    @_validate_fromutc_inputs
+    def fromutc(self, dt):
+        """
+        Fast track version of fromutc() returns the original ``dt`` object for
+        any valid :py:class:`datetime.datetime` object.
+        """
+        return dt
+
+    def __eq__(self, other):
+        if not isinstance(other, (tzutc, tzoffset)):
+            return NotImplemented
+
+        return (isinstance(other, tzutc) or
+                (isinstance(other, tzoffset) and other._offset == ZERO))
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        return "%s()" % self.__class__.__name__
+
+    __reduce__ = object.__reduce__
+
+
+#: Convenience constant providing a :class:`tzutc()` instance
+#:
+#: .. versionadded:: 2.7.0
+UTC = tzutc()
+
+
+@six.add_metaclass(_TzOffsetFactory)
+class tzoffset(datetime.tzinfo):
+    """
+    A simple class for representing a fixed offset from UTC.
+
+    :param name:
+        The timezone name, to be returned when ``tzname()`` is called.
+    :param offset:
+        The time zone offset in seconds, or (since version 2.6.0, represented
+        as a :py:class:`datetime.timedelta` object).
+    """
+    def __init__(self, name, offset):
+        self._name = name
+
+        try:
+            # Allow a timedelta
+            offset = offset.total_seconds()
+        except (TypeError, AttributeError):
+            pass
+
+        self._offset = datetime.timedelta(seconds=_get_supported_offset(offset))
+
+    def utcoffset(self, dt):
+        return self._offset
+
+    def dst(self, dt):
+        return ZERO
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        return self._name
+
+    @_validate_fromutc_inputs
+    def fromutc(self, dt):
+        return dt + self._offset
+
+    def is_ambiguous(self, dt):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+        return False
+
+    def __eq__(self, other):
+        if not isinstance(other, tzoffset):
+            return NotImplemented
+
+        return self._offset == other._offset
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        return "%s(%s, %s)" % (self.__class__.__name__,
+                               repr(self._name),
+                               int(self._offset.total_seconds()))
+
+    __reduce__ = object.__reduce__
+
+
+class tzlocal(_tzinfo):
+    """
+    A :class:`tzinfo` subclass built around the ``time`` timezone functions.
+    """
+    def __init__(self):
+        super(tzlocal, self).__init__()
+
+        self._std_offset = datetime.timedelta(seconds=-time.timezone)
+        if time.daylight:
+            self._dst_offset = datetime.timedelta(seconds=-time.altzone)
+        else:
+            self._dst_offset = self._std_offset
+
+        self._dst_saved = self._dst_offset - self._std_offset
+        self._hasdst = bool(self._dst_saved)
+        self._tznames = tuple(time.tzname)
+
+    def utcoffset(self, dt):
+        if dt is None and self._hasdst:
+            return None
+
+        if self._isdst(dt):
+            return self._dst_offset
+        else:
+            return self._std_offset
+
+    def dst(self, dt):
+        if dt is None and self._hasdst:
+            return None
+
+        if self._isdst(dt):
+            return self._dst_offset - self._std_offset
+        else:
+            return ZERO
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        return self._tznames[self._isdst(dt)]
+
+    def is_ambiguous(self, dt):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+
+
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+        naive_dst = self._naive_is_dst(dt)
+        return (not naive_dst and
+                (naive_dst != self._naive_is_dst(dt - self._dst_saved)))
+
+    def _naive_is_dst(self, dt):
+        timestamp = _datetime_to_timestamp(dt)
+        return time.localtime(timestamp + time.timezone).tm_isdst
+
+    def _isdst(self, dt, fold_naive=True):
+        # We can't use mktime here. It is unstable when deciding if
+        # the hour near to a change is DST or not.
+        #
+        # timestamp = time.mktime((dt.year, dt.month, dt.day, dt.hour,
+        #                         dt.minute, dt.second, dt.weekday(), 0, -1))
+        # return time.localtime(timestamp).tm_isdst
+        #
+        # The code above yields the following result:
+        #
+        # >>> import tz, datetime
+        # >>> t = tz.tzlocal()
+        # >>> datetime.datetime(2003,2,15,23,tzinfo=t).tzname()
+        # 'BRDT'
+        # >>> datetime.datetime(2003,2,16,0,tzinfo=t).tzname()
+        # 'BRST'
+        # >>> datetime.datetime(2003,2,15,23,tzinfo=t).tzname()
+        # 'BRST'
+        # >>> datetime.datetime(2003,2,15,22,tzinfo=t).tzname()
+        # 'BRDT'
+        # >>> datetime.datetime(2003,2,15,23,tzinfo=t).tzname()
+        # 'BRDT'
+        #
+        # Here is a more stable implementation:
+        #
+        if not self._hasdst:
+            return False
+
+        # Check for ambiguous times:
+        dstval = self._naive_is_dst(dt)
+        fold = getattr(dt, 'fold', None)
+
+        if self.is_ambiguous(dt):
+            if fold is not None:
+                return not self._fold(dt)
+            else:
+                return True
+
+        return dstval
+
+    def __eq__(self, other):
+        if isinstance(other, tzlocal):
+            return (self._std_offset == other._std_offset and
+                    self._dst_offset == other._dst_offset)
+        elif isinstance(other, tzutc):
+            return (not self._hasdst and
+                    self._tznames[0] in {'UTC', 'GMT'} and
+                    self._std_offset == ZERO)
+        elif isinstance(other, tzoffset):
+            return (not self._hasdst and
+                    self._tznames[0] == other._name and
+                    self._std_offset == other._offset)
+        else:
+            return NotImplemented
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        return "%s()" % self.__class__.__name__
+
+    __reduce__ = object.__reduce__
+
+
+class _ttinfo(object):
+    __slots__ = ["offset", "delta", "isdst", "abbr",
+                 "isstd", "isgmt", "dstoffset"]
+
+    def __init__(self):
+        for attr in self.__slots__:
+            setattr(self, attr, None)
+
+    def __repr__(self):
+        l = []
+        for attr in self.__slots__:
+            value = getattr(self, attr)
+            if value is not None:
+                l.append("%s=%s" % (attr, repr(value)))
+        return "%s(%s)" % (self.__class__.__name__, ", ".join(l))
+
+    def __eq__(self, other):
+        if not isinstance(other, _ttinfo):
+            return NotImplemented
+
+        return (self.offset == other.offset and
+                self.delta == other.delta and
+                self.isdst == other.isdst and
+                self.abbr == other.abbr and
+                self.isstd == other.isstd and
+                self.isgmt == other.isgmt and
+                self.dstoffset == other.dstoffset)
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __getstate__(self):
+        state = {}
+        for name in self.__slots__:
+            state[name] = getattr(self, name, None)
+        return state
+
+    def __setstate__(self, state):
+        for name in self.__slots__:
+            if name in state:
+                setattr(self, name, state[name])
+
+
+class _tzfile(object):
+    """
+    Lightweight class for holding the relevant transition and time zone
+    information read from binary tzfiles.
+    """
+    attrs = ['trans_list', 'trans_list_utc', 'trans_idx', 'ttinfo_list',
+             'ttinfo_std', 'ttinfo_dst', 'ttinfo_before', 'ttinfo_first']
+
+    def __init__(self, **kwargs):
+        for attr in self.attrs:
+            setattr(self, attr, kwargs.get(attr, None))
+
+
+class tzfile(_tzinfo):
+    """
+    This is a ``tzinfo`` subclass that allows one to use the ``tzfile(5)``
+    format timezone files to extract current and historical zone information.
+
+    :param fileobj:
+        This can be an opened file stream or a file name that the time zone
+        information can be read from.
+
+    :param filename:
+        This is an optional parameter specifying the source of the time zone
+        information in the event that ``fileobj`` is a file object. If omitted
+        and ``fileobj`` is a file stream, this parameter will be set either to
+        ``fileobj``'s ``name`` attribute or to ``repr(fileobj)``.
+
+    See `Sources for Time Zone and Daylight Saving Time Data
+    <https://data.iana.org/time-zones/tz-link.html>`_ for more information.
+    Time zone files can be compiled from the `IANA Time Zone database files
+    <https://www.iana.org/time-zones>`_ with the `zic time zone compiler
+    <https://www.freebsd.org/cgi/man.cgi?query=zic&sektion=8>`_
+
+    .. note::
+
+        Only construct a ``tzfile`` directly if you have a specific timezone
+        file on disk that you want to read into a Python ``tzinfo`` object.
+        If you want to get a ``tzfile`` representing a specific IANA zone,
+        (e.g. ``'America/New_York'``), you should call
+        :func:`dateutil.tz.gettz` with the zone identifier.
+
+
+    **Examples:**
+
+    Using the US Eastern time zone as an example, we can see that a ``tzfile``
+    provides time zone information for the standard Daylight Saving offsets:
+
+    .. testsetup:: tzfile
+
+        from dateutil.tz import gettz
+        from datetime import datetime
+
+    .. doctest:: tzfile
+
+        >>> NYC = gettz('America/New_York')
+        >>> NYC
+        tzfile('/usr/share/zoneinfo/America/New_York')
+
+        >>> print(datetime(2016, 1, 3, tzinfo=NYC))     # EST
+        2016-01-03 00:00:00-05:00
+
+        >>> print(datetime(2016, 7, 7, tzinfo=NYC))     # EDT
+        2016-07-07 00:00:00-04:00
+
+
+    The ``tzfile`` structure contains a fully history of the time zone,
+    so historical dates will also have the right offsets. For example, before
+    the adoption of the UTC standards, New York used local solar  mean time:
+
+    .. doctest:: tzfile
+
+       >>> print(datetime(1901, 4, 12, tzinfo=NYC))    # LMT
+       1901-04-12 00:00:00-04:56
+
+    And during World War II, New York was on "Eastern War Time", which was a
+    state of permanent daylight saving time:
+
+    .. doctest:: tzfile
+
+        >>> print(datetime(1944, 2, 7, tzinfo=NYC))    # EWT
+        1944-02-07 00:00:00-04:00
+
+    """
+
+    def __init__(self, fileobj, filename=None):
+        super(tzfile, self).__init__()
+
+        file_opened_here = False
+        if isinstance(fileobj, string_types):
+            self._filename = fileobj
+            fileobj = open(fileobj, 'rb')
+            file_opened_here = True
+        elif filename is not None:
+            self._filename = filename
+        elif hasattr(fileobj, "name"):
+            self._filename = fileobj.name
+        else:
+            self._filename = repr(fileobj)
+
+        if fileobj is not None:
+            if not file_opened_here:
+                fileobj = _nullcontext(fileobj)
+
+            with fileobj as file_stream:
+                tzobj = self._read_tzfile(file_stream)
+
+            self._set_tzdata(tzobj)
+
+    def _set_tzdata(self, tzobj):
+        """ Set the time zone data of this object from a _tzfile object """
+        # Copy the relevant attributes over as private attributes
+        for attr in _tzfile.attrs:
+            setattr(self, '_' + attr, getattr(tzobj, attr))
+
+    def _read_tzfile(self, fileobj):
+        out = _tzfile()
+
+        # From tzfile(5):
+        #
+        # The time zone information files used by tzset(3)
+        # begin with the magic characters "TZif" to identify
+        # them as time zone information files, followed by
+        # sixteen bytes reserved for future use, followed by
+        # six four-byte values of type long, written in a
+        # ``standard'' byte order (the high-order  byte
+        # of the value is written first).
+        if fileobj.read(4).decode() != "TZif":
+            raise ValueError("magic not found")
+
+        fileobj.read(16)
+
+        (
+            # The number of UTC/local indicators stored in the file.
+            ttisgmtcnt,
+
+            # The number of standard/wall indicators stored in the file.
+            ttisstdcnt,
+
+            # The number of leap seconds for which data is
+            # stored in the file.
+            leapcnt,
+
+            # The number of "transition times" for which data
+            # is stored in the file.
+            timecnt,
+
+            # The number of "local time types" for which data
+            # is stored in the file (must not be zero).
+            typecnt,
+
+            # The  number  of  characters  of "time zone
+            # abbreviation strings" stored in the file.
+            charcnt,
+
+        ) = struct.unpack(">6l", fileobj.read(24))
+
+        # The above header is followed by tzh_timecnt four-byte
+        # values  of  type long,  sorted  in ascending order.
+        # These values are written in ``standard'' byte order.
+        # Each is used as a transition time (as  returned  by
+        # time(2)) at which the rules for computing local time
+        # change.
+
+        if timecnt:
+            out.trans_list_utc = list(struct.unpack(">%dl" % timecnt,
+                                                    fileobj.read(timecnt*4)))
+        else:
+            out.trans_list_utc = []
+
+        # Next come tzh_timecnt one-byte values of type unsigned
+        # char; each one tells which of the different types of
+        # ``local time'' types described in the file is associated
+        # with the same-indexed transition time. These values
+        # serve as indices into an array of ttinfo structures that
+        # appears next in the file.
+
+        if timecnt:
+            out.trans_idx = struct.unpack(">%dB" % timecnt,
+                                          fileobj.read(timecnt))
+        else:
+            out.trans_idx = []
+
+        # Each ttinfo structure is written as a four-byte value
+        # for tt_gmtoff  of  type long,  in  a  standard  byte
+        # order, followed  by a one-byte value for tt_isdst
+        # and a one-byte  value  for  tt_abbrind.   In  each
+        # structure, tt_gmtoff  gives  the  number  of
+        # seconds to be added to UTC, tt_isdst tells whether
+        # tm_isdst should be set by  localtime(3),  and
+        # tt_abbrind serves  as an index into the array of
+        # time zone abbreviation characters that follow the
+        # ttinfo structure(s) in the file.
+
+        ttinfo = []
+
+        for i in range(typecnt):
+            ttinfo.append(struct.unpack(">lbb", fileobj.read(6)))
+
+        abbr = fileobj.read(charcnt).decode()
+
+        # Then there are tzh_leapcnt pairs of four-byte
+        # values, written in  standard byte  order;  the
+        # first  value  of  each pair gives the time (as
+        # returned by time(2)) at which a leap second
+        # occurs;  the  second  gives the  total  number of
+        # leap seconds to be applied after the given time.
+        # The pairs of values are sorted in ascending order
+        # by time.
+
+        # Not used, for now (but seek for correct file position)
+        if leapcnt:
+            fileobj.seek(leapcnt * 8, os.SEEK_CUR)
+
+        # Then there are tzh_ttisstdcnt standard/wall
+        # indicators, each stored as a one-byte value;
+        # they tell whether the transition times associated
+        # with local time types were specified as standard
+        # time or wall clock time, and are used when
+        # a time zone file is used in handling POSIX-style
+        # time zone environment variables.
+
+        if ttisstdcnt:
+            isstd = struct.unpack(">%db" % ttisstdcnt,
+                                  fileobj.read(ttisstdcnt))
+
+        # Finally, there are tzh_ttisgmtcnt UTC/local
+        # indicators, each stored as a one-byte value;
+        # they tell whether the transition times associated
+        # with local time types were specified as UTC or
+        # local time, and are used when a time zone file
+        # is used in handling POSIX-style time zone envi-
+        # ronment variables.
+
+        if ttisgmtcnt:
+            isgmt = struct.unpack(">%db" % ttisgmtcnt,
+                                  fileobj.read(ttisgmtcnt))
+
+        # Build ttinfo list
+        out.ttinfo_list = []
+        for i in range(typecnt):
+            gmtoff, isdst, abbrind = ttinfo[i]
+            gmtoff = _get_supported_offset(gmtoff)
+            tti = _ttinfo()
+            tti.offset = gmtoff
+            tti.dstoffset = datetime.timedelta(0)
+            tti.delta = datetime.timedelta(seconds=gmtoff)
+            tti.isdst = isdst
+            tti.abbr = abbr[abbrind:abbr.find('\x00', abbrind)]
+            tti.isstd = (ttisstdcnt > i and isstd[i] != 0)
+            tti.isgmt = (ttisgmtcnt > i and isgmt[i] != 0)
+            out.ttinfo_list.append(tti)
+
+        # Replace ttinfo indexes for ttinfo objects.
+        out.trans_idx = [out.ttinfo_list[idx] for idx in out.trans_idx]
+
+        # Set standard, dst, and before ttinfos. before will be
+        # used when a given time is before any transitions,
+        # and will be set to the first non-dst ttinfo, or to
+        # the first dst, if all of them are dst.
+        out.ttinfo_std = None
+        out.ttinfo_dst = None
+        out.ttinfo_before = None
+        if out.ttinfo_list:
+            if not out.trans_list_utc:
+                out.ttinfo_std = out.ttinfo_first = out.ttinfo_list[0]
+            else:
+                for i in range(timecnt-1, -1, -1):
+                    tti = out.trans_idx[i]
+                    if not out.ttinfo_std and not tti.isdst:
+                        out.ttinfo_std = tti
+                    elif not out.ttinfo_dst and tti.isdst:
+                        out.ttinfo_dst = tti
+
+                    if out.ttinfo_std and out.ttinfo_dst:
+                        break
+                else:
+                    if out.ttinfo_dst and not out.ttinfo_std:
+                        out.ttinfo_std = out.ttinfo_dst
+
+                for tti in out.ttinfo_list:
+                    if not tti.isdst:
+                        out.ttinfo_before = tti
+                        break
+                else:
+                    out.ttinfo_before = out.ttinfo_list[0]
+
+        # Now fix transition times to become relative to wall time.
+        #
+        # I'm not sure about this. In my tests, the tz source file
+        # is setup to wall time, and in the binary file isstd and
+        # isgmt are off, so it should be in wall time. OTOH, it's
+        # always in gmt time. Let me know if you have comments
+        # about this.
+        lastdst = None
+        lastoffset = None
+        lastdstoffset = None
+        lastbaseoffset = None
+        out.trans_list = []
+
+        for i, tti in enumerate(out.trans_idx):
+            offset = tti.offset
+            dstoffset = 0
+
+            if lastdst is not None:
+                if tti.isdst:
+                    if not lastdst:
+                        dstoffset = offset - lastoffset
+
+                    if not dstoffset and lastdstoffset:
+                        dstoffset = lastdstoffset
+
+                    tti.dstoffset = datetime.timedelta(seconds=dstoffset)
+                    lastdstoffset = dstoffset
+
+            # If a time zone changes its base offset during a DST transition,
+            # then you need to adjust by the previous base offset to get the
+            # transition time in local time. Otherwise you use the current
+            # base offset. Ideally, I would have some mathematical proof of
+            # why this is true, but I haven't really thought about it enough.
+            baseoffset = offset - dstoffset
+            adjustment = baseoffset
+            if (lastbaseoffset is not None and baseoffset != lastbaseoffset
+                    and tti.isdst != lastdst):
+                # The base DST has changed
+                adjustment = lastbaseoffset
+
+            lastdst = tti.isdst
+            lastoffset = offset
+            lastbaseoffset = baseoffset
+
+            out.trans_list.append(out.trans_list_utc[i] + adjustment)
+
+        out.trans_idx = tuple(out.trans_idx)
+        out.trans_list = tuple(out.trans_list)
+        out.trans_list_utc = tuple(out.trans_list_utc)
+
+        return out
+
+    def _find_last_transition(self, dt, in_utc=False):
+        # If there's no list, there are no transitions to find
+        if not self._trans_list:
+            return None
+
+        timestamp = _datetime_to_timestamp(dt)
+
+        # Find where the timestamp fits in the transition list - if the
+        # timestamp is a transition time, it's part of the "after" period.
+        trans_list = self._trans_list_utc if in_utc else self._trans_list
+        idx = bisect.bisect_right(trans_list, timestamp)
+
+        # We want to know when the previous transition was, so subtract off 1
+        return idx - 1
+
+    def _get_ttinfo(self, idx):
+        # For no list or after the last transition, default to _ttinfo_std
+        if idx is None or (idx + 1) >= len(self._trans_list):
+            return self._ttinfo_std
+
+        # If there is a list and the time is before it, return _ttinfo_before
+        if idx < 0:
+            return self._ttinfo_before
+
+        return self._trans_idx[idx]
+
+    def _find_ttinfo(self, dt):
+        idx = self._resolve_ambiguous_time(dt)
+
+        return self._get_ttinfo(idx)
+
+    def fromutc(self, dt):
+        """
+        The ``tzfile`` implementation of :py:func:`datetime.tzinfo.fromutc`.
+
+        :param dt:
+            A :py:class:`datetime.datetime` object.
+
+        :raises TypeError:
+            Raised if ``dt`` is not a :py:class:`datetime.datetime` object.
+
+        :raises ValueError:
+            Raised if this is called with a ``dt`` which does not have this
+            ``tzinfo`` attached.
+
+        :return:
+            Returns a :py:class:`datetime.datetime` object representing the
+            wall time in ``self``'s time zone.
+        """
+        # These isinstance checks are in datetime.tzinfo, so we'll preserve
+        # them, even if we don't care about duck typing.
+        if not isinstance(dt, datetime.datetime):
+            raise TypeError("fromutc() requires a datetime argument")
+
+        if dt.tzinfo is not self:
+            raise ValueError("dt.tzinfo is not self")
+
+        # First treat UTC as wall time and get the transition we're in.
+        idx = self._find_last_transition(dt, in_utc=True)
+        tti = self._get_ttinfo(idx)
+
+        dt_out = dt + datetime.timedelta(seconds=tti.offset)
+
+        fold = self.is_ambiguous(dt_out, idx=idx)
+
+        return enfold(dt_out, fold=int(fold))
+
+    def is_ambiguous(self, dt, idx=None):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+
+
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+        if idx is None:
+            idx = self._find_last_transition(dt)
+
+        # Calculate the difference in offsets from current to previous
+        timestamp = _datetime_to_timestamp(dt)
+        tti = self._get_ttinfo(idx)
+
+        if idx is None or idx <= 0:
+            return False
+
+        od = self._get_ttinfo(idx - 1).offset - tti.offset
+        tt = self._trans_list[idx]          # Transition time
+
+        return timestamp < tt + od
+
+    def _resolve_ambiguous_time(self, dt):
+        idx = self._find_last_transition(dt)
+
+        # If we have no transitions, return the index
+        _fold = self._fold(dt)
+        if idx is None or idx == 0:
+            return idx
+
+        # If it's ambiguous and we're in a fold, shift to a different index.
+        idx_offset = int(not _fold and self.is_ambiguous(dt, idx))
+
+        return idx - idx_offset
+
+    def utcoffset(self, dt):
+        if dt is None:
+            return None
+
+        if not self._ttinfo_std:
+            return ZERO
+
+        return self._find_ttinfo(dt).delta
+
+    def dst(self, dt):
+        if dt is None:
+            return None
+
+        if not self._ttinfo_dst:
+            return ZERO
+
+        tti = self._find_ttinfo(dt)
+
+        if not tti.isdst:
+            return ZERO
+
+        # The documentation says that utcoffset()-dst() must
+        # be constant for every dt.
+        return tti.dstoffset
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        if not self._ttinfo_std or dt is None:
+            return None
+        return self._find_ttinfo(dt).abbr
+
+    def __eq__(self, other):
+        if not isinstance(other, tzfile):
+            return NotImplemented
+        return (self._trans_list == other._trans_list and
+                self._trans_idx == other._trans_idx and
+                self._ttinfo_list == other._ttinfo_list)
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        return "%s(%s)" % (self.__class__.__name__, repr(self._filename))
+
+    def __reduce__(self):
+        return self.__reduce_ex__(None)
+
+    def __reduce_ex__(self, protocol):
+        return (self.__class__, (None, self._filename), self.__dict__)
+
+
+class tzrange(tzrangebase):
+    """
+    The ``tzrange`` object is a time zone specified by a set of offsets and
+    abbreviations, equivalent to the way the ``TZ`` variable can be specified
+    in POSIX-like systems, but using Python delta objects to specify DST
+    start, end and offsets.
+
+    :param stdabbr:
+        The abbreviation for standard time (e.g. ``'EST'``).
+
+    :param stdoffset:
+        An integer or :class:`datetime.timedelta` object or equivalent
+        specifying the base offset from UTC.
+
+        If unspecified, +00:00 is used.
+
+    :param dstabbr:
+        The abbreviation for DST / "Summer" time (e.g. ``'EDT'``).
+
+        If specified, with no other DST information, DST is assumed to occur
+        and the default behavior or ``dstoffset``, ``start`` and ``end`` is
+        used. If unspecified and no other DST information is specified, it
+        is assumed that this zone has no DST.
+
+        If this is unspecified and other DST information is *is* specified,
+        DST occurs in the zone but the time zone abbreviation is left
+        unchanged.
+
+    :param dstoffset:
+        A an integer or :class:`datetime.timedelta` object or equivalent
+        specifying the UTC offset during DST. If unspecified and any other DST
+        information is specified, it is assumed to be the STD offset +1 hour.
+
+    :param start:
+        A :class:`relativedelta.relativedelta` object or equivalent specifying
+        the time and time of year that daylight savings time starts. To
+        specify, for example, that DST starts at 2AM on the 2nd Sunday in
+        March, pass:
+
+            ``relativedelta(hours=2, month=3, day=1, weekday=SU(+2))``
+
+        If unspecified and any other DST information is specified, the default
+        value is 2 AM on the first Sunday in April.
+
+    :param end:
+        A :class:`relativedelta.relativedelta` object or equivalent
+        representing the time and time of year that daylight savings time
+        ends, with the same specification method as in ``start``. One note is
+        that this should point to the first time in the *standard* zone, so if
+        a transition occurs at 2AM in the DST zone and the clocks are set back
+        1 hour to 1AM, set the ``hours`` parameter to +1.
+
+
+    **Examples:**
+
+    .. testsetup:: tzrange
+
+        from dateutil.tz import tzrange, tzstr
+
+    .. doctest:: tzrange
+
+        >>> tzstr('EST5EDT') == tzrange("EST", -18000, "EDT")
+        True
+
+        >>> from dateutil.relativedelta import *
+        >>> range1 = tzrange("EST", -18000, "EDT")
+        >>> range2 = tzrange("EST", -18000, "EDT", -14400,
+        ...                  relativedelta(hours=+2, month=4, day=1,
+        ...                                weekday=SU(+1)),
+        ...                  relativedelta(hours=+1, month=10, day=31,
+        ...                                weekday=SU(-1)))
+        >>> tzstr('EST5EDT') == range1 == range2
+        True
+
+    """
+    def __init__(self, stdabbr, stdoffset=None,
+                 dstabbr=None, dstoffset=None,
+                 start=None, end=None):
+
+        global relativedelta
+        from dateutil import relativedelta
+
+        self._std_abbr = stdabbr
+        self._dst_abbr = dstabbr
+
+        try:
+            stdoffset = stdoffset.total_seconds()
+        except (TypeError, AttributeError):
+            pass
+
+        try:
+            dstoffset = dstoffset.total_seconds()
+        except (TypeError, AttributeError):
+            pass
+
+        if stdoffset is not None:
+            self._std_offset = datetime.timedelta(seconds=stdoffset)
+        else:
+            self._std_offset = ZERO
+
+        if dstoffset is not None:
+            self._dst_offset = datetime.timedelta(seconds=dstoffset)
+        elif dstabbr and stdoffset is not None:
+            self._dst_offset = self._std_offset + datetime.timedelta(hours=+1)
+        else:
+            self._dst_offset = ZERO
+
+        if dstabbr and start is None:
+            self._start_delta = relativedelta.relativedelta(
+                hours=+2, month=4, day=1, weekday=relativedelta.SU(+1))
+        else:
+            self._start_delta = start
+
+        if dstabbr and end is None:
+            self._end_delta = relativedelta.relativedelta(
+                hours=+1, month=10, day=31, weekday=relativedelta.SU(-1))
+        else:
+            self._end_delta = end
+
+        self._dst_base_offset_ = self._dst_offset - self._std_offset
+        self.hasdst = bool(self._start_delta)
+
+    def transitions(self, year):
+        """
+        For a given year, get the DST on and off transition times, expressed
+        always on the standard time side. For zones with no transitions, this
+        function returns ``None``.
+
+        :param year:
+            The year whose transitions you would like to query.
+
+        :return:
+            Returns a :class:`tuple` of :class:`datetime.datetime` objects,
+            ``(dston, dstoff)`` for zones with an annual DST transition, or
+            ``None`` for fixed offset zones.
+        """
+        if not self.hasdst:
+            return None
+
+        base_year = datetime.datetime(year, 1, 1)
+
+        start = base_year + self._start_delta
+        end = base_year + self._end_delta
+
+        return (start, end)
+
+    def __eq__(self, other):
+        if not isinstance(other, tzrange):
+            return NotImplemented
+
+        return (self._std_abbr == other._std_abbr and
+                self._dst_abbr == other._dst_abbr and
+                self._std_offset == other._std_offset and
+                self._dst_offset == other._dst_offset and
+                self._start_delta == other._start_delta and
+                self._end_delta == other._end_delta)
+
+    @property
+    def _dst_base_offset(self):
+        return self._dst_base_offset_
+
+
+@six.add_metaclass(_TzStrFactory)
+class tzstr(tzrange):
+    """
+    ``tzstr`` objects are time zone objects specified by a time-zone string as
+    it would be passed to a ``TZ`` variable on POSIX-style systems (see
+    the `GNU C Library: TZ Variable`_ for more details).
+
+    There is one notable exception, which is that POSIX-style time zones use an
+    inverted offset format, so normally ``GMT+3`` would be parsed as an offset
+    3 hours *behind* GMT. The ``tzstr`` time zone object will parse this as an
+    offset 3 hours *ahead* of GMT. If you would like to maintain the POSIX
+    behavior, pass a ``True`` value to ``posix_offset``.
+
+    The :class:`tzrange` object provides the same functionality, but is
+    specified using :class:`relativedelta.relativedelta` objects. rather than
+    strings.
+
+    :param s:
+        A time zone string in ``TZ`` variable format. This can be a
+        :class:`bytes` (2.x: :class:`str`), :class:`str` (2.x:
+        :class:`unicode`) or a stream emitting unicode characters
+        (e.g. :class:`StringIO`).
+
+    :param posix_offset:
+        Optional. If set to ``True``, interpret strings such as ``GMT+3`` or
+        ``UTC+3`` as being 3 hours *behind* UTC rather than ahead, per the
+        POSIX standard.
+
+    .. caution::
+
+        Prior to version 2.7.0, this function also supported time zones
+        in the format:
+
+            * ``EST5EDT,4,0,6,7200,10,0,26,7200,3600``
+            * ``EST5EDT,4,1,0,7200,10,-1,0,7200,3600``
+
+        This format is non-standard and has been deprecated; this function
+        will raise a :class:`DeprecatedTZFormatWarning` until
+        support is removed in a future version.
+
+    .. _`GNU C Library: TZ Variable`:
+        https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html
+    """
+    def __init__(self, s, posix_offset=False):
+        global parser
+        from dateutil.parser import _parser as parser
+
+        self._s = s
+
+        res = parser._parsetz(s)
+        if res is None or res.any_unused_tokens:
+            raise ValueError("unknown string format")
+
+        # Here we break the compatibility with the TZ variable handling.
+        # GMT-3 actually *means* the timezone -3.
+        if res.stdabbr in ("GMT", "UTC") and not posix_offset:
+            res.stdoffset *= -1
+
+        # We must initialize it first, since _delta() needs
+        # _std_offset and _dst_offset set. Use False in start/end
+        # to avoid building it two times.
+        tzrange.__init__(self, res.stdabbr, res.stdoffset,
+                         res.dstabbr, res.dstoffset,
+                         start=False, end=False)
+
+        if not res.dstabbr:
+            self._start_delta = None
+            self._end_delta = None
+        else:
+            self._start_delta = self._delta(res.start)
+            if self._start_delta:
+                self._end_delta = self._delta(res.end, isend=1)
+
+        self.hasdst = bool(self._start_delta)
+
+    def _delta(self, x, isend=0):
+        from dateutil import relativedelta
+        kwargs = {}
+        if x.month is not None:
+            kwargs["month"] = x.month
+            if x.weekday is not None:
+                kwargs["weekday"] = relativedelta.weekday(x.weekday, x.week)
+                if x.week > 0:
+                    kwargs["day"] = 1
+                else:
+                    kwargs["day"] = 31
+            elif x.day:
+                kwargs["day"] = x.day
+        elif x.yday is not None:
+            kwargs["yearday"] = x.yday
+        elif x.jyday is not None:
+            kwargs["nlyearday"] = x.jyday
+        if not kwargs:
+            # Default is to start on first sunday of april, and end
+            # on last sunday of october.
+            if not isend:
+                kwargs["month"] = 4
+                kwargs["day"] = 1
+                kwargs["weekday"] = relativedelta.SU(+1)
+            else:
+                kwargs["month"] = 10
+                kwargs["day"] = 31
+                kwargs["weekday"] = relativedelta.SU(-1)
+        if x.time is not None:
+            kwargs["seconds"] = x.time
+        else:
+            # Default is 2AM.
+            kwargs["seconds"] = 7200
+        if isend:
+            # Convert to standard time, to follow the documented way
+            # of working with the extra hour. See the documentation
+            # of the tzinfo class.
+            delta = self._dst_offset - self._std_offset
+            kwargs["seconds"] -= delta.seconds + delta.days * 86400
+        return relativedelta.relativedelta(**kwargs)
+
+    def __repr__(self):
+        return "%s(%s)" % (self.__class__.__name__, repr(self._s))
+
+
+class _tzicalvtzcomp(object):
+    def __init__(self, tzoffsetfrom, tzoffsetto, isdst,
+                 tzname=None, rrule=None):
+        self.tzoffsetfrom = datetime.timedelta(seconds=tzoffsetfrom)
+        self.tzoffsetto = datetime.timedelta(seconds=tzoffsetto)
+        self.tzoffsetdiff = self.tzoffsetto - self.tzoffsetfrom
+        self.isdst = isdst
+        self.tzname = tzname
+        self.rrule = rrule
+
+
+class _tzicalvtz(_tzinfo):
+    def __init__(self, tzid, comps=[]):
+        super(_tzicalvtz, self).__init__()
+
+        self._tzid = tzid
+        self._comps = comps
+        self._cachedate = []
+        self._cachecomp = []
+        self._cache_lock = _thread.allocate_lock()
+
+    def _find_comp(self, dt):
+        if len(self._comps) == 1:
+            return self._comps[0]
+
+        dt = dt.replace(tzinfo=None)
+
+        try:
+            with self._cache_lock:
+                return self._cachecomp[self._cachedate.index(
+                    (dt, self._fold(dt)))]
+        except ValueError:
+            pass
+
+        lastcompdt = None
+        lastcomp = None
+
+        for comp in self._comps:
+            compdt = self._find_compdt(comp, dt)
+
+            if compdt and (not lastcompdt or lastcompdt < compdt):
+                lastcompdt = compdt
+                lastcomp = comp
+
+        if not lastcomp:
+            # RFC says nothing about what to do when a given
+            # time is before the first onset date. We'll look for the
+            # first standard component, or the first component, if
+            # none is found.
+            for comp in self._comps:
+                if not comp.isdst:
+                    lastcomp = comp
+                    break
+            else:
+                lastcomp = comp[0]
+
+        with self._cache_lock:
+            self._cachedate.insert(0, (dt, self._fold(dt)))
+            self._cachecomp.insert(0, lastcomp)
+
+            if len(self._cachedate) > 10:
+                self._cachedate.pop()
+                self._cachecomp.pop()
+
+        return lastcomp
+
+    def _find_compdt(self, comp, dt):
+        if comp.tzoffsetdiff < ZERO and self._fold(dt):
+            dt -= comp.tzoffsetdiff
+
+        compdt = comp.rrule.before(dt, inc=True)
+
+        return compdt
+
+    def utcoffset(self, dt):
+        if dt is None:
+            return None
+
+        return self._find_comp(dt).tzoffsetto
+
+    def dst(self, dt):
+        comp = self._find_comp(dt)
+        if comp.isdst:
+            return comp.tzoffsetdiff
+        else:
+            return ZERO
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        return self._find_comp(dt).tzname
+
+    def __repr__(self):
+        return "<tzicalvtz %s>" % repr(self._tzid)
+
+    __reduce__ = object.__reduce__
+
+
+class tzical(object):
+    """
+    This object is designed to parse an iCalendar-style ``VTIMEZONE`` structure
+    as set out in `RFC 5545`_ Section 4.6.5 into one or more `tzinfo` objects.
+
+    :param `fileobj`:
+        A file or stream in iCalendar format, which should be UTF-8 encoded
+        with CRLF endings.
+
+    .. _`RFC 5545`: https://tools.ietf.org/html/rfc5545
+    """
+    def __init__(self, fileobj):
+        global rrule
+        from dateutil import rrule
+
+        if isinstance(fileobj, string_types):
+            self._s = fileobj
+            # ical should be encoded in UTF-8 with CRLF
+            fileobj = open(fileobj, 'r')
+        else:
+            self._s = getattr(fileobj, 'name', repr(fileobj))
+            fileobj = _nullcontext(fileobj)
+
+        self._vtz = {}
+
+        with fileobj as fobj:
+            self._parse_rfc(fobj.read())
+
+    def keys(self):
+        """
+        Retrieves the available time zones as a list.
+        """
+        return list(self._vtz.keys())
+
+    def get(self, tzid=None):
+        """
+        Retrieve a :py:class:`datetime.tzinfo` object by its ``tzid``.
+
+        :param tzid:
+            If there is exactly one time zone available, omitting ``tzid``
+            or passing :py:const:`None` value returns it. Otherwise a valid
+            key (which can be retrieved from :func:`keys`) is required.
+
+        :raises ValueError:
+            Raised if ``tzid`` is not specified but there are either more
+            or fewer than 1 zone defined.
+
+        :returns:
+            Returns either a :py:class:`datetime.tzinfo` object representing
+            the relevant time zone or :py:const:`None` if the ``tzid`` was
+            not found.
+        """
+        if tzid is None:
+            if len(self._vtz) == 0:
+                raise ValueError("no timezones defined")
+            elif len(self._vtz) > 1:
+                raise ValueError("more than one timezone available")
+            tzid = next(iter(self._vtz))
+
+        return self._vtz.get(tzid)
+
+    def _parse_offset(self, s):
+        s = s.strip()
+        if not s:
+            raise ValueError("empty offset")
+        if s[0] in ('+', '-'):
+            signal = (-1, +1)[s[0] == '+']
+            s = s[1:]
+        else:
+            signal = +1
+        if len(s) == 4:
+            return (int(s[:2]) * 3600 + int(s[2:]) * 60) * signal
+        elif len(s) == 6:
+            return (int(s[:2]) * 3600 + int(s[2:4]) * 60 + int(s[4:])) * signal
+        else:
+            raise ValueError("invalid offset: " + s)
+
+    def _parse_rfc(self, s):
+        lines = s.splitlines()
+        if not lines:
+            raise ValueError("empty string")
+
+        # Unfold
+        i = 0
+        while i < len(lines):
+            line = lines[i].rstrip()
+            if not line:
+                del lines[i]
+            elif i > 0 and line[0] == " ":
+                lines[i-1] += line[1:]
+                del lines[i]
+            else:
+                i += 1
+
+        tzid = None
+        comps = []
+        invtz = False
+        comptype = None
+        for line in lines:
+            if not line:
+                continue
+            name, value = line.split(':', 1)
+            parms = name.split(';')
+            if not parms:
+                raise ValueError("empty property name")
+            name = parms[0].upper()
+            parms = parms[1:]
+            if invtz:
+                if name == "BEGIN":
+                    if value in ("STANDARD", "DAYLIGHT"):
+                        # Process component
+                        pass
+                    else:
+                        raise ValueError("unknown component: "+value)
+                    comptype = value
+                    founddtstart = False
+                    tzoffsetfrom = None
+                    tzoffsetto = None
+                    rrulelines = []
+                    tzname = None
+                elif name == "END":
+                    if value == "VTIMEZONE":
+                        if comptype:
+                            raise ValueError("component not closed: "+comptype)
+                        if not tzid:
+                            raise ValueError("mandatory TZID not found")
+                        if not comps:
+                            raise ValueError(
+                                "at least one component is needed")
+                        # Process vtimezone
+                        self._vtz[tzid] = _tzicalvtz(tzid, comps)
+                        invtz = False
+                    elif value == comptype:
+                        if not founddtstart:
+                            raise ValueError("mandatory DTSTART not found")
+                        if tzoffsetfrom is None:
+                            raise ValueError(
+                                "mandatory TZOFFSETFROM not found")
+                        if tzoffsetto is None:
+                            raise ValueError(
+                                "mandatory TZOFFSETFROM not found")
+                        # Process component
+                        rr = None
+                        if rrulelines:
+                            rr = rrule.rrulestr("\n".join(rrulelines),
+                                                compatible=True,
+                                                ignoretz=True,
+                                                cache=True)
+                        comp = _tzicalvtzcomp(tzoffsetfrom, tzoffsetto,
+                                              (comptype == "DAYLIGHT"),
+                                              tzname, rr)
+                        comps.append(comp)
+                        comptype = None
+                    else:
+                        raise ValueError("invalid component end: "+value)
+                elif comptype:
+                    if name == "DTSTART":
+                        # DTSTART in VTIMEZONE takes a subset of valid RRULE
+                        # values under RFC 5545.
+                        for parm in parms:
+                            if parm != 'VALUE=DATE-TIME':
+                                msg = ('Unsupported DTSTART param in ' +
+                                       'VTIMEZONE: ' + parm)
+                                raise ValueError(msg)
+                        rrulelines.append(line)
+                        founddtstart = True
+                    elif name in ("RRULE", "RDATE", "EXRULE", "EXDATE"):
+                        rrulelines.append(line)
+                    elif name == "TZOFFSETFROM":
+                        if parms:
+                            raise ValueError(
+                                "unsupported %s parm: %s " % (name, parms[0]))
+                        tzoffsetfrom = self._parse_offset(value)
+                    elif name == "TZOFFSETTO":
+                        if parms:
+                            raise ValueError(
+                                "unsupported TZOFFSETTO parm: "+parms[0])
+                        tzoffsetto = self._parse_offset(value)
+                    elif name == "TZNAME":
+                        if parms:
+                            raise ValueError(
+                                "unsupported TZNAME parm: "+parms[0])
+                        tzname = value
+                    elif name == "COMMENT":
+                        pass
+                    else:
+                        raise ValueError("unsupported property: "+name)
+                else:
+                    if name == "TZID":
+                        if parms:
+                            raise ValueError(
+                                "unsupported TZID parm: "+parms[0])
+                        tzid = value
+                    elif name in ("TZURL", "LAST-MODIFIED", "COMMENT"):
+                        pass
+                    else:
+                        raise ValueError("unsupported property: "+name)
+            elif name == "BEGIN" and value == "VTIMEZONE":
+                tzid = None
+                comps = []
+                invtz = True
+
+    def __repr__(self):
+        return "%s(%s)" % (self.__class__.__name__, repr(self._s))
+
+
+if sys.platform != "win32":
+    TZFILES = ["/etc/localtime", "localtime"]
+    TZPATHS = ["/usr/share/zoneinfo",
+               "/usr/lib/zoneinfo",
+               "/usr/share/lib/zoneinfo",
+               "/etc/zoneinfo"]
+else:
+    TZFILES = []
+    TZPATHS = []
+
+
+def __get_gettz():
+    tzlocal_classes = (tzlocal,)
+    if tzwinlocal is not None:
+        tzlocal_classes += (tzwinlocal,)
+
+    class GettzFunc(object):
+        """
+        Retrieve a time zone object from a string representation
+
+        This function is intended to retrieve the :py:class:`tzinfo` subclass
+        that best represents the time zone that would be used if a POSIX
+        `TZ variable`_ were set to the same value.
+
+        If no argument or an empty string is passed to ``gettz``, local time
+        is returned:
+
+        .. code-block:: python3
+
+            >>> gettz()
+            tzfile('/etc/localtime')
+
+        This function is also the preferred way to map IANA tz database keys
+        to :class:`tzfile` objects:
+
+        .. code-block:: python3
+
+            >>> gettz('Pacific/Kiritimati')
+            tzfile('/usr/share/zoneinfo/Pacific/Kiritimati')
+
+        On Windows, the standard is extended to include the Windows-specific
+        zone names provided by the operating system:
+
+        .. code-block:: python3
+
+            >>> gettz('Egypt Standard Time')
+            tzwin('Egypt Standard Time')
+
+        Passing a GNU ``TZ`` style string time zone specification returns a
+        :class:`tzstr` object:
+
+        .. code-block:: python3
+
+            >>> gettz('AEST-10AEDT-11,M10.1.0/2,M4.1.0/3')
+            tzstr('AEST-10AEDT-11,M10.1.0/2,M4.1.0/3')
+
+        :param name:
+            A time zone name (IANA, or, on Windows, Windows keys), location of
+            a ``tzfile(5)`` zoneinfo file or ``TZ`` variable style time zone
+            specifier. An empty string, no argument or ``None`` is interpreted
+            as local time.
+
+        :return:
+            Returns an instance of one of ``dateutil``'s :py:class:`tzinfo`
+            subclasses.
+
+        .. versionchanged:: 2.7.0
+
+            After version 2.7.0, any two calls to ``gettz`` using the same
+            input strings will return the same object:
+
+            .. code-block:: python3
+
+                >>> tz.gettz('America/Chicago') is tz.gettz('America/Chicago')
+                True
+
+            In addition to improving performance, this ensures that
+            `"same zone" semantics`_ are used for datetimes in the same zone.
+
+
+        .. _`TZ variable`:
+            https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html
+
+        .. _`"same zone" semantics`:
+            https://blog.ganssle.io/articles/2018/02/aware-datetime-arithmetic.html
+        """
+        def __init__(self):
+
+            self.__instances = weakref.WeakValueDictionary()
+            self.__strong_cache_size = 8
+            self.__strong_cache = OrderedDict()
+            self._cache_lock = _thread.allocate_lock()
+
+        def __call__(self, name=None):
+            with self._cache_lock:
+                rv = self.__instances.get(name, None)
+
+                if rv is None:
+                    rv = self.nocache(name=name)
+                    if not (name is None
+                            or isinstance(rv, tzlocal_classes)
+                            or rv is None):
+                        # tzlocal is slightly more complicated than the other
+                        # time zone providers because it depends on environment
+                        # at construction time, so don't cache that.
+                        #
+                        # We also cannot store weak references to None, so we
+                        # will also not store that.
+                        self.__instances[name] = rv
+                    else:
+                        # No need for strong caching, return immediately
+                        return rv
+
+                self.__strong_cache[name] = self.__strong_cache.pop(name, rv)
+
+                if len(self.__strong_cache) > self.__strong_cache_size:
+                    self.__strong_cache.popitem(last=False)
+
+            return rv
+
+        def set_cache_size(self, size):
+            with self._cache_lock:
+                self.__strong_cache_size = size
+                while len(self.__strong_cache) > size:
+                    self.__strong_cache.popitem(last=False)
+
+        def cache_clear(self):
+            with self._cache_lock:
+                self.__instances = weakref.WeakValueDictionary()
+                self.__strong_cache.clear()
+
+        @staticmethod
+        def nocache(name=None):
+            """A non-cached version of gettz"""
+            tz = None
+            if not name:
+                try:
+                    name = os.environ["TZ"]
+                except KeyError:
+                    pass
+            if name is None or name in ("", ":"):
+                for filepath in TZFILES:
+                    if not os.path.isabs(filepath):
+                        filename = filepath
+                        for path in TZPATHS:
+                            filepath = os.path.join(path, filename)
+                            if os.path.isfile(filepath):
+                                break
+                        else:
+                            continue
+                    if os.path.isfile(filepath):
+                        try:
+                            tz = tzfile(filepath)
+                            break
+                        except (IOError, OSError, ValueError):
+                            pass
+                else:
+                    tz = tzlocal()
+            else:
+                try:
+                    if name.startswith(":"):
+                        name = name[1:]
+                except TypeError as e:
+                    if isinstance(name, bytes):
+                        new_msg = "gettz argument should be str, not bytes"
+                        six.raise_from(TypeError(new_msg), e)
+                    else:
+                        raise
+                if os.path.isabs(name):
+                    if os.path.isfile(name):
+                        tz = tzfile(name)
+                    else:
+                        tz = None
+                else:
+                    for path in TZPATHS:
+                        filepath = os.path.join(path, name)
+                        if not os.path.isfile(filepath):
+                            filepath = filepath.replace(' ', '_')
+                            if not os.path.isfile(filepath):
+                                continue
+                        try:
+                            tz = tzfile(filepath)
+                            break
+                        except (IOError, OSError, ValueError):
+                            pass
+                    else:
+                        tz = None
+                        if tzwin is not None:
+                            try:
+                                tz = tzwin(name)
+                            except (WindowsError, UnicodeEncodeError):
+                                # UnicodeEncodeError is for Python 2.7 compat
+                                tz = None
+
+                        if not tz:
+                            from dateutil.zoneinfo import get_zonefile_instance
+                            tz = get_zonefile_instance().get(name)
+
+                        if not tz:
+                            for c in name:
+                                # name is not a tzstr unless it has at least
+                                # one offset. For short values of "name", an
+                                # explicit for loop seems to be the fastest way
+                                # To determine if a string contains a digit
+                                if c in "0123456789":
+                                    try:
+                                        tz = tzstr(name)
+                                    except ValueError:
+                                        pass
+                                    break
+                            else:
+                                if name in ("GMT", "UTC"):
+                                    tz = UTC
+                                elif name in time.tzname:
+                                    tz = tzlocal()
+            return tz
+
+    return GettzFunc()
+
+
+gettz = __get_gettz()
+del __get_gettz
+
+
+def datetime_exists(dt, tz=None):
+    """
+    Given a datetime and a time zone, determine whether or not a given datetime
+    would fall in a gap.
+
+    :param dt:
+        A :class:`datetime.datetime` (whose time zone will be ignored if ``tz``
+        is provided.)
+
+    :param tz:
+        A :class:`datetime.tzinfo` with support for the ``fold`` attribute. If
+        ``None`` or not provided, the datetime's own time zone will be used.
+
+    :return:
+        Returns a boolean value whether or not the "wall time" exists in
+        ``tz``.
+
+    .. versionadded:: 2.7.0
+    """
+    if tz is None:
+        if dt.tzinfo is None:
+            raise ValueError('Datetime is naive and no time zone provided.')
+        tz = dt.tzinfo
+
+    dt = dt.replace(tzinfo=None)
+
+    # This is essentially a test of whether or not the datetime can survive
+    # a round trip to UTC.
+    dt_rt = dt.replace(tzinfo=tz).astimezone(UTC).astimezone(tz)
+    dt_rt = dt_rt.replace(tzinfo=None)
+
+    return dt == dt_rt
+
+
+def datetime_ambiguous(dt, tz=None):
+    """
+    Given a datetime and a time zone, determine whether or not a given datetime
+    is ambiguous (i.e if there are two times differentiated only by their DST
+    status).
+
+    :param dt:
+        A :class:`datetime.datetime` (whose time zone will be ignored if ``tz``
+        is provided.)
+
+    :param tz:
+        A :class:`datetime.tzinfo` with support for the ``fold`` attribute. If
+        ``None`` or not provided, the datetime's own time zone will be used.
+
+    :return:
+        Returns a boolean value whether or not the "wall time" is ambiguous in
+        ``tz``.
+
+    .. versionadded:: 2.6.0
+    """
+    if tz is None:
+        if dt.tzinfo is None:
+            raise ValueError('Datetime is naive and no time zone provided.')
+
+        tz = dt.tzinfo
+
+    # If a time zone defines its own "is_ambiguous" function, we'll use that.
+    is_ambiguous_fn = getattr(tz, 'is_ambiguous', None)
+    if is_ambiguous_fn is not None:
+        try:
+            return tz.is_ambiguous(dt)
+        except Exception:
+            pass
+
+    # If it doesn't come out and tell us it's ambiguous, we'll just check if
+    # the fold attribute has any effect on this particular date and time.
+    dt = dt.replace(tzinfo=tz)
+    wall_0 = enfold(dt, fold=0)
+    wall_1 = enfold(dt, fold=1)
+
+    same_offset = wall_0.utcoffset() == wall_1.utcoffset()
+    same_dst = wall_0.dst() == wall_1.dst()
+
+    return not (same_offset and same_dst)
+
+
+def resolve_imaginary(dt):
+    """
+    Given a datetime that may be imaginary, return an existing datetime.
+
+    This function assumes that an imaginary datetime represents what the
+    wall time would be in a zone had the offset transition not occurred, so
+    it will always fall forward by the transition's change in offset.
+
+    .. doctest::
+
+        >>> from dateutil import tz
+        >>> from datetime import datetime
+        >>> NYC = tz.gettz('America/New_York')
+        >>> print(tz.resolve_imaginary(datetime(2017, 3, 12, 2, 30, tzinfo=NYC)))
+        2017-03-12 03:30:00-04:00
+
+        >>> KIR = tz.gettz('Pacific/Kiritimati')
+        >>> print(tz.resolve_imaginary(datetime(1995, 1, 1, 12, 30, tzinfo=KIR)))
+        1995-01-02 12:30:00+14:00
+
+    As a note, :func:`datetime.astimezone` is guaranteed to produce a valid,
+    existing datetime, so a round-trip to and from UTC is sufficient to get
+    an extant datetime, however, this generally "falls back" to an earlier time
+    rather than falling forward to the STD side (though no guarantees are made
+    about this behavior).
+
+    :param dt:
+        A :class:`datetime.datetime` which may or may not exist.
+
+    :return:
+        Returns an existing :class:`datetime.datetime`. If ``dt`` was not
+        imaginary, the datetime returned is guaranteed to be the same object
+        passed to the function.
+
+    .. versionadded:: 2.7.0
+    """
+    if dt.tzinfo is not None and not datetime_exists(dt):
+
+        curr_offset = (dt + datetime.timedelta(hours=24)).utcoffset()
+        old_offset = (dt - datetime.timedelta(hours=24)).utcoffset()
+
+        dt += curr_offset - old_offset
+
+    return dt
+
+
+def _datetime_to_timestamp(dt):
+    """
+    Convert a :class:`datetime.datetime` object to an epoch timestamp in
+    seconds since January 1, 1970, ignoring the time zone.
+    """
+    return (dt.replace(tzinfo=None) - EPOCH).total_seconds()
+
+
+if sys.version_info >= (3, 6):
+    def _get_supported_offset(second_offset):
+        return second_offset
+else:
+    def _get_supported_offset(second_offset):
+        # For python pre-3.6, round to full-minutes if that's not the case.
+        # Python's datetime doesn't accept sub-minute timezones. Check
+        # http://python.org/sf/1447945 or https://bugs.python.org/issue5288
+        # for some information.
+        old_offset = second_offset
+        calculated_offset = 60 * ((second_offset + 30) // 60)
+        return calculated_offset
+
+
+try:
+    # Python 3.7 feature
+    from contextlib import nullcontext as _nullcontext
+except ImportError:
+    class _nullcontext(object):
+        """
+        Class for wrapping contexts so that they are passed through in a
+        with statement.
+        """
+        def __init__(self, context):
+            self.context = context
+
+        def __enter__(self):
+            return self.context
+
+        def __exit__(*args, **kwargs):
+            pass
+
+# vim:ts=4:sw=4:et
diff --git a/venv/Lib/site-packages/dateutil/tz/win.py b/venv/Lib/site-packages/dateutil/tz/win.py
new file mode 100644
index 0000000..cde07ba
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tz/win.py
@@ -0,0 +1,370 @@
+# -*- coding: utf-8 -*-
+"""
+This module provides an interface to the native time zone data on Windows,
+including :py:class:`datetime.tzinfo` implementations.
+
+Attempting to import this module on a non-Windows platform will raise an
+:py:obj:`ImportError`.
+"""
+# This code was originally contributed by Jeffrey Harris.
+import datetime
+import struct
+
+from six.moves import winreg
+from six import text_type
+
+try:
+    import ctypes
+    from ctypes import wintypes
+except ValueError:
+    # ValueError is raised on non-Windows systems for some horrible reason.
+    raise ImportError("Running tzwin on non-Windows system")
+
+from ._common import tzrangebase
+
+__all__ = ["tzwin", "tzwinlocal", "tzres"]
+
+ONEWEEK = datetime.timedelta(7)
+
+TZKEYNAMENT = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones"
+TZKEYNAME9X = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Time Zones"
+TZLOCALKEYNAME = r"SYSTEM\CurrentControlSet\Control\TimeZoneInformation"
+
+
+def _settzkeyname():
+    handle = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)
+    try:
+        winreg.OpenKey(handle, TZKEYNAMENT).Close()
+        TZKEYNAME = TZKEYNAMENT
+    except WindowsError:
+        TZKEYNAME = TZKEYNAME9X
+    handle.Close()
+    return TZKEYNAME
+
+
+TZKEYNAME = _settzkeyname()
+
+
+class tzres(object):
+    """
+    Class for accessing ``tzres.dll``, which contains timezone name related
+    resources.
+
+    .. versionadded:: 2.5.0
+    """
+    p_wchar = ctypes.POINTER(wintypes.WCHAR)        # Pointer to a wide char
+
+    def __init__(self, tzres_loc='tzres.dll'):
+        # Load the user32 DLL so we can load strings from tzres
+        user32 = ctypes.WinDLL('user32')
+
+        # Specify the LoadStringW function
+        user32.LoadStringW.argtypes = (wintypes.HINSTANCE,
+                                       wintypes.UINT,
+                                       wintypes.LPWSTR,
+                                       ctypes.c_int)
+
+        self.LoadStringW = user32.LoadStringW
+        self._tzres = ctypes.WinDLL(tzres_loc)
+        self.tzres_loc = tzres_loc
+
+    def load_name(self, offset):
+        """
+        Load a timezone name from a DLL offset (integer).
+
+        >>> from dateutil.tzwin import tzres
+        >>> tzr = tzres()
+        >>> print(tzr.load_name(112))
+        'Eastern Standard Time'
+
+        :param offset:
+            A positive integer value referring to a string from the tzres dll.
+
+        .. note::
+
+            Offsets found in the registry are generally of the form
+            ``@tzres.dll,-114``. The offset in this case is 114, not -114.
+
+        """
+        resource = self.p_wchar()
+        lpBuffer = ctypes.cast(ctypes.byref(resource), wintypes.LPWSTR)
+        nchar = self.LoadStringW(self._tzres._handle, offset, lpBuffer, 0)
+        return resource[:nchar]
+
+    def name_from_string(self, tzname_str):
+        """
+        Parse strings as returned from the Windows registry into the time zone
+        name as defined in the registry.
+
+        >>> from dateutil.tzwin import tzres
+        >>> tzr = tzres()
+        >>> print(tzr.name_from_string('@tzres.dll,-251'))
+        'Dateline Daylight Time'
+        >>> print(tzr.name_from_string('Eastern Standard Time'))
+        'Eastern Standard Time'
+
+        :param tzname_str:
+            A timezone name string as returned from a Windows registry key.
+
+        :return:
+            Returns the localized timezone string from tzres.dll if the string
+            is of the form `@tzres.dll,-offset`, else returns the input string.
+        """
+        if not tzname_str.startswith('@'):
+            return tzname_str
+
+        name_splt = tzname_str.split(',-')
+        try:
+            offset = int(name_splt[1])
+        except:
+            raise ValueError("Malformed timezone string.")
+
+        return self.load_name(offset)
+
+
+class tzwinbase(tzrangebase):
+    """tzinfo class based on win32's timezones available in the registry."""
+    def __init__(self):
+        raise NotImplementedError('tzwinbase is an abstract base class')
+
+    def __eq__(self, other):
+        # Compare on all relevant dimensions, including name.
+        if not isinstance(other, tzwinbase):
+            return NotImplemented
+
+        return  (self._std_offset == other._std_offset and
+                 self._dst_offset == other._dst_offset and
+                 self._stddayofweek == other._stddayofweek and
+                 self._dstdayofweek == other._dstdayofweek and
+                 self._stdweeknumber == other._stdweeknumber and
+                 self._dstweeknumber == other._dstweeknumber and
+                 self._stdhour == other._stdhour and
+                 self._dsthour == other._dsthour and
+                 self._stdminute == other._stdminute and
+                 self._dstminute == other._dstminute and
+                 self._std_abbr == other._std_abbr and
+                 self._dst_abbr == other._dst_abbr)
+
+    @staticmethod
+    def list():
+        """Return a list of all time zones known to the system."""
+        with winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE) as handle:
+            with winreg.OpenKey(handle, TZKEYNAME) as tzkey:
+                result = [winreg.EnumKey(tzkey, i)
+                          for i in range(winreg.QueryInfoKey(tzkey)[0])]
+        return result
+
+    def display(self):
+        """
+        Return the display name of the time zone.
+        """
+        return self._display
+
+    def transitions(self, year):
+        """
+        For a given year, get the DST on and off transition times, expressed
+        always on the standard time side. For zones with no transitions, this
+        function returns ``None``.
+
+        :param year:
+            The year whose transitions you would like to query.
+
+        :return:
+            Returns a :class:`tuple` of :class:`datetime.datetime` objects,
+            ``(dston, dstoff)`` for zones with an annual DST transition, or
+            ``None`` for fixed offset zones.
+        """
+
+        if not self.hasdst:
+            return None
+
+        dston = picknthweekday(year, self._dstmonth, self._dstdayofweek,
+                               self._dsthour, self._dstminute,
+                               self._dstweeknumber)
+
+        dstoff = picknthweekday(year, self._stdmonth, self._stddayofweek,
+                                self._stdhour, self._stdminute,
+                                self._stdweeknumber)
+
+        # Ambiguous dates default to the STD side
+        dstoff -= self._dst_base_offset
+
+        return dston, dstoff
+
+    def _get_hasdst(self):
+        return self._dstmonth != 0
+
+    @property
+    def _dst_base_offset(self):
+        return self._dst_base_offset_
+
+
+class tzwin(tzwinbase):
+    """
+    Time zone object created from the zone info in the Windows registry
+
+    These are similar to :py:class:`dateutil.tz.tzrange` objects in that
+    the time zone data is provided in the format of a single offset rule
+    for either 0 or 2 time zone transitions per year.
+
+    :param: name
+        The name of a Windows time zone key, e.g. "Eastern Standard Time".
+        The full list of keys can be retrieved with :func:`tzwin.list`.
+    """
+
+    def __init__(self, name):
+        self._name = name
+
+        with winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE) as handle:
+            tzkeyname = text_type("{kn}\\{name}").format(kn=TZKEYNAME, name=name)
+            with winreg.OpenKey(handle, tzkeyname) as tzkey:
+                keydict = valuestodict(tzkey)
+
+        self._std_abbr = keydict["Std"]
+        self._dst_abbr = keydict["Dlt"]
+
+        self._display = keydict["Display"]
+
+        # See http://ww_winreg.jsiinc.com/SUBA/tip0300/rh0398.htm
+        tup = struct.unpack("=3l16h", keydict["TZI"])
+        stdoffset = -tup[0]-tup[1]          # Bias + StandardBias * -1
+        dstoffset = stdoffset-tup[2]        # + DaylightBias * -1
+        self._std_offset = datetime.timedelta(minutes=stdoffset)
+        self._dst_offset = datetime.timedelta(minutes=dstoffset)
+
+        # for the meaning see the win32 TIME_ZONE_INFORMATION structure docs
+        # http://msdn.microsoft.com/en-us/library/windows/desktop/ms725481(v=vs.85).aspx
+        (self._stdmonth,
+         self._stddayofweek,   # Sunday = 0
+         self._stdweeknumber,  # Last = 5
+         self._stdhour,
+         self._stdminute) = tup[4:9]
+
+        (self._dstmonth,
+         self._dstdayofweek,   # Sunday = 0
+         self._dstweeknumber,  # Last = 5
+         self._dsthour,
+         self._dstminute) = tup[12:17]
+
+        self._dst_base_offset_ = self._dst_offset - self._std_offset
+        self.hasdst = self._get_hasdst()
+
+    def __repr__(self):
+        return "tzwin(%s)" % repr(self._name)
+
+    def __reduce__(self):
+        return (self.__class__, (self._name,))
+
+
+class tzwinlocal(tzwinbase):
+    """
+    Class representing the local time zone information in the Windows registry
+
+    While :class:`dateutil.tz.tzlocal` makes system calls (via the :mod:`time`
+    module) to retrieve time zone information, ``tzwinlocal`` retrieves the
+    rules directly from the Windows registry and creates an object like
+    :class:`dateutil.tz.tzwin`.
+
+    Because Windows does not have an equivalent of :func:`time.tzset`, on
+    Windows, :class:`dateutil.tz.tzlocal` instances will always reflect the
+    time zone settings *at the time that the process was started*, meaning
+    changes to the machine's time zone settings during the run of a program
+    on Windows will **not** be reflected by :class:`dateutil.tz.tzlocal`.
+    Because ``tzwinlocal`` reads the registry directly, it is unaffected by
+    this issue.
+    """
+    def __init__(self):
+        with winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE) as handle:
+            with winreg.OpenKey(handle, TZLOCALKEYNAME) as tzlocalkey:
+                keydict = valuestodict(tzlocalkey)
+
+            self._std_abbr = keydict["StandardName"]
+            self._dst_abbr = keydict["DaylightName"]
+
+            try:
+                tzkeyname = text_type('{kn}\\{sn}').format(kn=TZKEYNAME,
+                                                          sn=self._std_abbr)
+                with winreg.OpenKey(handle, tzkeyname) as tzkey:
+                    _keydict = valuestodict(tzkey)
+                    self._display = _keydict["Display"]
+            except OSError:
+                self._display = None
+
+        stdoffset = -keydict["Bias"]-keydict["StandardBias"]
+        dstoffset = stdoffset-keydict["DaylightBias"]
+
+        self._std_offset = datetime.timedelta(minutes=stdoffset)
+        self._dst_offset = datetime.timedelta(minutes=dstoffset)
+
+        # For reasons unclear, in this particular key, the day of week has been
+        # moved to the END of the SYSTEMTIME structure.
+        tup = struct.unpack("=8h", keydict["StandardStart"])
+
+        (self._stdmonth,
+         self._stdweeknumber,  # Last = 5
+         self._stdhour,
+         self._stdminute) = tup[1:5]
+
+        self._stddayofweek = tup[7]
+
+        tup = struct.unpack("=8h", keydict["DaylightStart"])
+
+        (self._dstmonth,
+         self._dstweeknumber,  # Last = 5
+         self._dsthour,
+         self._dstminute) = tup[1:5]
+
+        self._dstdayofweek = tup[7]
+
+        self._dst_base_offset_ = self._dst_offset - self._std_offset
+        self.hasdst = self._get_hasdst()
+
+    def __repr__(self):
+        return "tzwinlocal()"
+
+    def __str__(self):
+        # str will return the standard name, not the daylight name.
+        return "tzwinlocal(%s)" % repr(self._std_abbr)
+
+    def __reduce__(self):
+        return (self.__class__, ())
+
+
+def picknthweekday(year, month, dayofweek, hour, minute, whichweek):
+    """ dayofweek == 0 means Sunday, whichweek 5 means last instance """
+    first = datetime.datetime(year, month, 1, hour, minute)
+
+    # This will work if dayofweek is ISO weekday (1-7) or Microsoft-style (0-6),
+    # Because 7 % 7 = 0
+    weekdayone = first.replace(day=((dayofweek - first.isoweekday()) % 7) + 1)
+    wd = weekdayone + ((whichweek - 1) * ONEWEEK)
+    if (wd.month != month):
+        wd -= ONEWEEK
+
+    return wd
+
+
+def valuestodict(key):
+    """Convert a registry key's values to a dictionary."""
+    dout = {}
+    size = winreg.QueryInfoKey(key)[1]
+    tz_res = None
+
+    for i in range(size):
+        key_name, value, dtype = winreg.EnumValue(key, i)
+        if dtype == winreg.REG_DWORD or dtype == winreg.REG_DWORD_LITTLE_ENDIAN:
+            # If it's a DWORD (32-bit integer), it's stored as unsigned - convert
+            # that to a proper signed integer
+            if value & (1 << 31):
+                value = value - (1 << 32)
+        elif dtype == winreg.REG_SZ:
+            # If it's a reference to the tzres DLL, load the actual string
+            if value.startswith('@tzres'):
+                tz_res = tz_res or tzres()
+                value = tz_res.name_from_string(value)
+
+            value = value.rstrip('\x00')    # Remove trailing nulls
+
+        dout[key_name] = value
+
+    return dout
diff --git a/venv/Lib/site-packages/dateutil/tzwin.py b/venv/Lib/site-packages/dateutil/tzwin.py
new file mode 100644
index 0000000..cebc673
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tzwin.py
@@ -0,0 +1,2 @@
+# tzwin has moved to dateutil.tz.win
+from .tz.win import *
diff --git a/venv/Lib/site-packages/dateutil/utils.py b/venv/Lib/site-packages/dateutil/utils.py
new file mode 100644
index 0000000..dd2d245
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/utils.py
@@ -0,0 +1,71 @@
+# -*- coding: utf-8 -*-
+"""
+This module offers general convenience and utility functions for dealing with
+datetimes.
+
+.. versionadded:: 2.7.0
+"""
+from __future__ import unicode_literals
+
+from datetime import datetime, time
+
+
+def today(tzinfo=None):
+    """
+    Returns a :py:class:`datetime` representing the current day at midnight
+
+    :param tzinfo:
+        The time zone to attach (also used to determine the current day).
+
+    :return:
+        A :py:class:`datetime.datetime` object representing the current day
+        at midnight.
+    """
+
+    dt = datetime.now(tzinfo)
+    return datetime.combine(dt.date(), time(0, tzinfo=tzinfo))
+
+
+def default_tzinfo(dt, tzinfo):
+    """
+    Sets the ``tzinfo`` parameter on naive datetimes only
+
+    This is useful for example when you are provided a datetime that may have
+    either an implicit or explicit time zone, such as when parsing a time zone
+    string.
+
+    .. doctest::
+
+        >>> from dateutil.tz import tzoffset
+        >>> from dateutil.parser import parse
+        >>> from dateutil.utils import default_tzinfo
+        >>> dflt_tz = tzoffset("EST", -18000)
+        >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))
+        2014-01-01 12:30:00+00:00
+        >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))
+        2014-01-01 12:30:00-05:00
+
+    :param dt:
+        The datetime on which to replace the time zone
+
+    :param tzinfo:
+        The :py:class:`datetime.tzinfo` subclass instance to assign to
+        ``dt`` if (and only if) it is naive.
+
+    :return:
+        Returns an aware :py:class:`datetime.datetime`.
+    """
+    if dt.tzinfo is not None:
+        return dt
+    else:
+        return dt.replace(tzinfo=tzinfo)
+
+
+def within_delta(dt1, dt2, delta):
+    """
+    Useful for comparing two datetimes that may have a negligible difference
+    to be considered equal.
+    """
+    delta = abs(delta)
+    difference = dt1 - dt2
+    return -delta <= difference <= delta
diff --git a/venv/Lib/site-packages/dateutil/zoneinfo/__init__.py b/venv/Lib/site-packages/dateutil/zoneinfo/__init__.py
new file mode 100644
index 0000000..34f11ad
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/zoneinfo/__init__.py
@@ -0,0 +1,167 @@
+# -*- coding: utf-8 -*-
+import warnings
+import json
+
+from tarfile import TarFile
+from pkgutil import get_data
+from io import BytesIO
+
+from dateutil.tz import tzfile as _tzfile
+
+__all__ = ["get_zonefile_instance", "gettz", "gettz_db_metadata"]
+
+ZONEFILENAME = "dateutil-zoneinfo.tar.gz"
+METADATA_FN = 'METADATA'
+
+
+class tzfile(_tzfile):
+    def __reduce__(self):
+        return (gettz, (self._filename,))
+
+
+def getzoneinfofile_stream():
+    try:
+        return BytesIO(get_data(__name__, ZONEFILENAME))
+    except IOError as e:  # TODO  switch to FileNotFoundError?
+        warnings.warn("I/O error({0}): {1}".format(e.errno, e.strerror))
+        return None
+
+
+class ZoneInfoFile(object):
+    def __init__(self, zonefile_stream=None):
+        if zonefile_stream is not None:
+            with TarFile.open(fileobj=zonefile_stream) as tf:
+                self.zones = {zf.name: tzfile(tf.extractfile(zf), filename=zf.name)
+                              for zf in tf.getmembers()
+                              if zf.isfile() and zf.name != METADATA_FN}
+                # deal with links: They'll point to their parent object. Less
+                # waste of memory
+                links = {zl.name: self.zones[zl.linkname]
+                         for zl in tf.getmembers() if
+                         zl.islnk() or zl.issym()}
+                self.zones.update(links)
+                try:
+                    metadata_json = tf.extractfile(tf.getmember(METADATA_FN))
+                    metadata_str = metadata_json.read().decode('UTF-8')
+                    self.metadata = json.loads(metadata_str)
+                except KeyError:
+                    # no metadata in tar file
+                    self.metadata = None
+        else:
+            self.zones = {}
+            self.metadata = None
+
+    def get(self, name, default=None):
+        """
+        Wrapper for :func:`ZoneInfoFile.zones.get`. This is a convenience method
+        for retrieving zones from the zone dictionary.
+
+        :param name:
+            The name of the zone to retrieve. (Generally IANA zone names)
+
+        :param default:
+            The value to return in the event of a missing key.
+
+        .. versionadded:: 2.6.0
+
+        """
+        return self.zones.get(name, default)
+
+
+# The current API has gettz as a module function, although in fact it taps into
+# a stateful class. So as a workaround for now, without changing the API, we
+# will create a new "global" class instance the first time a user requests a
+# timezone. Ugly, but adheres to the api.
+#
+# TODO: Remove after deprecation period.
+_CLASS_ZONE_INSTANCE = []
+
+
+def get_zonefile_instance(new_instance=False):
+    """
+    This is a convenience function which provides a :class:`ZoneInfoFile`
+    instance using the data provided by the ``dateutil`` package. By default, it
+    caches a single instance of the ZoneInfoFile object and returns that.
+
+    :param new_instance:
+        If ``True``, a new instance of :class:`ZoneInfoFile` is instantiated and
+        used as the cached instance for the next call. Otherwise, new instances
+        are created only as necessary.
+
+    :return:
+        Returns a :class:`ZoneInfoFile` object.
+
+    .. versionadded:: 2.6
+    """
+    if new_instance:
+        zif = None
+    else:
+        zif = getattr(get_zonefile_instance, '_cached_instance', None)
+
+    if zif is None:
+        zif = ZoneInfoFile(getzoneinfofile_stream())
+
+        get_zonefile_instance._cached_instance = zif
+
+    return zif
+
+
+def gettz(name):
+    """
+    This retrieves a time zone from the local zoneinfo tarball that is packaged
+    with dateutil.
+
+    :param name:
+        An IANA-style time zone name, as found in the zoneinfo file.
+
+    :return:
+        Returns a :class:`dateutil.tz.tzfile` time zone object.
+
+    .. warning::
+        It is generally inadvisable to use this function, and it is only
+        provided for API compatibility with earlier versions. This is *not*
+        equivalent to ``dateutil.tz.gettz()``, which selects an appropriate
+        time zone based on the inputs, favoring system zoneinfo. This is ONLY
+        for accessing the dateutil-specific zoneinfo (which may be out of
+        date compared to the system zoneinfo).
+
+    .. deprecated:: 2.6
+        If you need to use a specific zoneinfofile over the system zoneinfo,
+        instantiate a :class:`dateutil.zoneinfo.ZoneInfoFile` object and call
+        :func:`dateutil.zoneinfo.ZoneInfoFile.get(name)` instead.
+
+        Use :func:`get_zonefile_instance` to retrieve an instance of the
+        dateutil-provided zoneinfo.
+    """
+    warnings.warn("zoneinfo.gettz() will be removed in future versions, "
+                  "to use the dateutil-provided zoneinfo files, instantiate a "
+                  "ZoneInfoFile object and use ZoneInfoFile.zones.get() "
+                  "instead. See the documentation for details.",
+                  DeprecationWarning)
+
+    if len(_CLASS_ZONE_INSTANCE) == 0:
+        _CLASS_ZONE_INSTANCE.append(ZoneInfoFile(getzoneinfofile_stream()))
+    return _CLASS_ZONE_INSTANCE[0].zones.get(name)
+
+
+def gettz_db_metadata():
+    """ Get the zonefile metadata
+
+    See `zonefile_metadata`_
+
+    :returns:
+        A dictionary with the database metadata
+
+    .. deprecated:: 2.6
+        See deprecation warning in :func:`zoneinfo.gettz`. To get metadata,
+        query the attribute ``zoneinfo.ZoneInfoFile.metadata``.
+    """
+    warnings.warn("zoneinfo.gettz_db_metadata() will be removed in future "
+                  "versions, to use the dateutil-provided zoneinfo files, "
+                  "ZoneInfoFile object and query the 'metadata' attribute "
+                  "instead. See the documentation for details.",
+                  DeprecationWarning)
+
+    if len(_CLASS_ZONE_INSTANCE) == 0:
+        _CLASS_ZONE_INSTANCE.append(ZoneInfoFile(getzoneinfofile_stream()))
+    return _CLASS_ZONE_INSTANCE[0].metadata
diff --git a/venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/__init__.cpython-312.pyc b/venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/__init__.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..707edb957fe67778ff79c6a63c8084e9b7be197a
GIT binary patch
literal 7452
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/rebuild.cpython-312.pyc b/venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/rebuild.cpython-312.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..cfbd006154f350ac983de5a87d83825a15d52459
GIT binary patch
literal 3978
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
MSvwS9B97*N1Myw7=l}o!

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/zoneinfo/dateutil-zoneinfo.tar.gz b/venv/Lib/site-packages/dateutil/zoneinfo/dateutil-zoneinfo.tar.gz
new file mode 100644
index 0000000000000000000000000000000000000000..524c48e12db7dfe159f282e4664f71ce249e1970
GIT binary patch
literal 174394
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/zoneinfo/rebuild.py b/venv/Lib/site-packages/dateutil/zoneinfo/rebuild.py
new file mode 100644
index 0000000..684c658
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/zoneinfo/rebuild.py
@@ -0,0 +1,75 @@
+import logging
+import os
+import tempfile
+import shutil
+import json
+from subprocess import check_call, check_output
+from tarfile import TarFile
+
+from dateutil.zoneinfo import METADATA_FN, ZONEFILENAME
+
+
+def rebuild(filename, tag=None, format="gz", zonegroups=[], metadata=None):
+    """Rebuild the internal timezone info in dateutil/zoneinfo/zoneinfo*tar*
+
+    filename is the timezone tarball from ``ftp.iana.org/tz``.
+
+    """
+    tmpdir = tempfile.mkdtemp()
+    zonedir = os.path.join(tmpdir, "zoneinfo")
+    moduledir = os.path.dirname(__file__)
+    try:
+        with TarFile.open(filename) as tf:
+            for name in zonegroups:
+                tf.extract(name, tmpdir)
+            filepaths = [os.path.join(tmpdir, n) for n in zonegroups]
+
+            _run_zic(zonedir, filepaths)
+
+        # write metadata file
+        with open(os.path.join(zonedir, METADATA_FN), 'w') as f:
+            json.dump(metadata, f, indent=4, sort_keys=True)
+        target = os.path.join(moduledir, ZONEFILENAME)
+        with TarFile.open(target, "w:%s" % format) as tf:
+            for entry in os.listdir(zonedir):
+                entrypath = os.path.join(zonedir, entry)
+                tf.add(entrypath, entry)
+    finally:
+        shutil.rmtree(tmpdir)
+
+
+def _run_zic(zonedir, filepaths):
+    """Calls the ``zic`` compiler in a compatible way to get a "fat" binary.
+
+    Recent versions of ``zic`` default to ``-b slim``, while older versions
+    don't even have the ``-b`` option (but default to "fat" binaries). The
+    current version of dateutil does not support Version 2+ TZif files, which
+    causes problems when used in conjunction with "slim" binaries, so this
+    function is used to ensure that we always get a "fat" binary.
+    """
+
+    try:
+        help_text = check_output(["zic", "--help"])
+    except OSError as e:
+        _print_on_nosuchfile(e)
+        raise
+
+    if b"-b " in help_text:
+        bloat_args = ["-b", "fat"]
+    else:
+        bloat_args = []
+
+    check_call(["zic"] + bloat_args + ["-d", zonedir] + filepaths)
+
+
+def _print_on_nosuchfile(e):
+    """Print helpful troubleshooting message
+
+    e is an exception raised by subprocess.check_call()
+
+    """
+    if e.errno == 2:
+        logging.error(
+            "Could not find zic. Perhaps you need to install "
+            "libc-bin or some other package that provides it, "
+            "or it's not in your PATH?")
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/INSTALLER b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/INSTALLER
new file mode 100644
index 0000000..a1b589e
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/INSTALLER
@@ -0,0 +1 @@
+pip
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/LICENSE b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/LICENSE
new file mode 100644
index 0000000..1e65815
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/LICENSE
@@ -0,0 +1,54 @@
+Copyright 2017- Paul Ganssle <paul@ganssle.io>
+Copyright 2017- dateutil contributors (see AUTHORS file)
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+The above license applies to all contributions after 2017-12-01, as well as
+all contributions that have been re-licensed (see AUTHORS file for the list of
+contributors who have re-licensed their code).
+--------------------------------------------------------------------------------
+dateutil - Extensions to the standard Python datetime module.
+
+Copyright (c) 2003-2011 - Gustavo Niemeyer <gustavo@niemeyer.net>
+Copyright (c) 2012-2014 - Tomi Pieviläinen <tomi.pievilainen@iki.fi>
+Copyright (c) 2014-2016 - Yaron de Leeuw <me@jarondl.net>
+Copyright (c) 2015-     - Paul Ganssle <paul@ganssle.io>
+Copyright (c) 2015-     - dateutil contributors (see AUTHORS file)
+
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+    * Redistributions of source code must retain the above copyright notice,
+      this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright notice,
+      this list of conditions and the following disclaimer in the documentation
+      and/or other materials provided with the distribution.
+    * Neither the name of the copyright holder nor the names of its
+      contributors may be used to endorse or promote products derived from
+      this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+The above BSD License Applies to all code, even that also covered by Apache 2.0.
\ No newline at end of file
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/METADATA b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/METADATA
new file mode 100644
index 0000000..1e46c96
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/METADATA
@@ -0,0 +1,204 @@
+Metadata-Version: 2.1
+Name: python-dateutil
+Version: 2.8.2
+Summary: Extensions to the standard Python datetime module
+Home-page: https://github.com/dateutil/dateutil
+Author: Gustavo Niemeyer
+Author-email: gustavo@niemeyer.net
+Maintainer: Paul Ganssle
+Maintainer-email: dateutil@python.org
+License: Dual License
+Project-URL: Documentation, https://dateutil.readthedocs.io/en/stable/
+Project-URL: Source, https://github.com/dateutil/dateutil
+Platform: UNKNOWN
+Classifier: Development Status :: 5 - Production/Stable
+Classifier: Intended Audience :: Developers
+Classifier: License :: OSI Approved :: BSD License
+Classifier: License :: OSI Approved :: Apache Software License
+Classifier: Programming Language :: Python
+Classifier: Programming Language :: Python :: 2
+Classifier: Programming Language :: Python :: 2.7
+Classifier: Programming Language :: Python :: 3
+Classifier: Programming Language :: Python :: 3.3
+Classifier: Programming Language :: Python :: 3.4
+Classifier: Programming Language :: Python :: 3.5
+Classifier: Programming Language :: Python :: 3.6
+Classifier: Programming Language :: Python :: 3.7
+Classifier: Programming Language :: Python :: 3.8
+Classifier: Programming Language :: Python :: 3.9
+Classifier: Topic :: Software Development :: Libraries
+Requires-Python: !=3.0.*,!=3.1.*,!=3.2.*,>=2.7
+Description-Content-Type: text/x-rst
+License-File: LICENSE
+Requires-Dist: six (>=1.5)
+
+dateutil - powerful extensions to datetime
+==========================================
+
+|pypi| |support| |licence|
+
+|gitter| |readthedocs|
+
+|travis| |appveyor| |pipelines| |coverage|
+
+.. |pypi| image:: https://img.shields.io/pypi/v/python-dateutil.svg?style=flat-square
+    :target: https://pypi.org/project/python-dateutil/
+    :alt: pypi version
+
+.. |support| image:: https://img.shields.io/pypi/pyversions/python-dateutil.svg?style=flat-square
+    :target: https://pypi.org/project/python-dateutil/
+    :alt: supported Python version
+
+.. |travis| image:: https://img.shields.io/travis/dateutil/dateutil/master.svg?style=flat-square&label=Travis%20Build
+    :target: https://travis-ci.org/dateutil/dateutil
+    :alt: travis build status
+
+.. |appveyor| image:: https://img.shields.io/appveyor/ci/dateutil/dateutil/master.svg?style=flat-square&logo=appveyor
+    :target: https://ci.appveyor.com/project/dateutil/dateutil
+    :alt: appveyor build status
+
+.. |pipelines| image:: https://dev.azure.com/pythondateutilazure/dateutil/_apis/build/status/dateutil.dateutil?branchName=master
+    :target: https://dev.azure.com/pythondateutilazure/dateutil/_build/latest?definitionId=1&branchName=master
+    :alt: azure pipelines build status
+
+.. |coverage| image:: https://codecov.io/gh/dateutil/dateutil/branch/master/graphs/badge.svg?branch=master
+    :target: https://codecov.io/gh/dateutil/dateutil?branch=master
+    :alt: Code coverage
+
+.. |gitter| image:: https://badges.gitter.im/dateutil/dateutil.svg
+   :alt: Join the chat at https://gitter.im/dateutil/dateutil
+   :target: https://gitter.im/dateutil/dateutil
+
+.. |licence| image:: https://img.shields.io/pypi/l/python-dateutil.svg?style=flat-square
+    :target: https://pypi.org/project/python-dateutil/
+    :alt: licence
+
+.. |readthedocs| image:: https://img.shields.io/readthedocs/dateutil/latest.svg?style=flat-square&label=Read%20the%20Docs
+   :alt: Read the documentation at https://dateutil.readthedocs.io/en/latest/
+   :target: https://dateutil.readthedocs.io/en/latest/
+
+The `dateutil` module provides powerful extensions to
+the standard `datetime` module, available in Python.
+
+Installation
+============
+`dateutil` can be installed from PyPI using `pip` (note that the package name is
+different from the importable name)::
+
+    pip install python-dateutil
+
+Download
+========
+dateutil is available on PyPI
+https://pypi.org/project/python-dateutil/
+
+The documentation is hosted at:
+https://dateutil.readthedocs.io/en/stable/
+
+Code
+====
+The code and issue tracker are hosted on GitHub:
+https://github.com/dateutil/dateutil/
+
+Features
+========
+
+* Computing of relative deltas (next month, next year,
+  next Monday, last week of month, etc);
+* Computing of relative deltas between two given
+  date and/or datetime objects;
+* Computing of dates based on very flexible recurrence rules,
+  using a superset of the `iCalendar <https://www.ietf.org/rfc/rfc2445.txt>`_
+  specification. Parsing of RFC strings is supported as well.
+* Generic parsing of dates in almost any string format;
+* Timezone (tzinfo) implementations for tzfile(5) format
+  files (/etc/localtime, /usr/share/zoneinfo, etc), TZ
+  environment string (in all known formats), iCalendar
+  format files, given ranges (with help from relative deltas),
+  local machine timezone, fixed offset timezone, UTC timezone,
+  and Windows registry-based time zones.
+* Internal up-to-date world timezone information based on
+  Olson's database.
+* Computing of Easter Sunday dates for any given year,
+  using Western, Orthodox or Julian algorithms;
+* A comprehensive test suite.
+
+Quick example
+=============
+Here's a snapshot, just to give an idea about the power of the
+package. For more examples, look at the documentation.
+
+Suppose you want to know how much time is left, in
+years/months/days/etc, before the next easter happening on a
+year with a Friday 13th in August, and you want to get today's
+date out of the "date" unix system command. Here is the code:
+
+.. code-block:: python3
+
+    >>> from dateutil.relativedelta import *
+    >>> from dateutil.easter import *
+    >>> from dateutil.rrule import *
+    >>> from dateutil.parser import *
+    >>> from datetime import *
+    >>> now = parse("Sat Oct 11 17:13:46 UTC 2003")
+    >>> today = now.date()
+    >>> year = rrule(YEARLY,dtstart=now,bymonth=8,bymonthday=13,byweekday=FR)[0].year
+    >>> rdelta = relativedelta(easter(year), today)
+    >>> print("Today is: %s" % today)
+    Today is: 2003-10-11
+    >>> print("Year with next Aug 13th on a Friday is: %s" % year)
+    Year with next Aug 13th on a Friday is: 2004
+    >>> print("How far is the Easter of that year: %s" % rdelta)
+    How far is the Easter of that year: relativedelta(months=+6)
+    >>> print("And the Easter of that year is: %s" % (today+rdelta))
+    And the Easter of that year is: 2004-04-11
+
+Being exactly 6 months ahead was **really** a coincidence :)
+
+Contributing
+============
+
+We welcome many types of contributions - bug reports, pull requests (code, infrastructure or documentation fixes). For more information about how to contribute to the project, see the ``CONTRIBUTING.md`` file in the repository.
+
+
+Author
+======
+The dateutil module was written by Gustavo Niemeyer <gustavo@niemeyer.net>
+in 2003.
+
+It is maintained by:
+
+* Gustavo Niemeyer <gustavo@niemeyer.net> 2003-2011
+* Tomi Pieviläinen <tomi.pievilainen@iki.fi> 2012-2014
+* Yaron de Leeuw <me@jarondl.net> 2014-2016
+* Paul Ganssle <paul@ganssle.io> 2015-
+
+Starting with version 2.4.1 and running until 2.8.2, all source and binary
+distributions will be signed by a PGP key that has, at the very least, been
+signed by the key which made the previous release. A table of release signing
+keys can be found below:
+
+===========  ============================
+Releases     Signing key fingerprint
+===========  ============================
+2.4.1-2.8.2  `6B49 ACBA DCF6 BD1C A206 67AB CD54 FCE3 D964 BEFB`_ 
+===========  ============================
+
+New releases *may* have signed tags, but binary and source distributions
+uploaded to PyPI will no longer have GPG signatures attached.
+
+Contact
+=======
+Our mailing list is available at `dateutil@python.org <https://mail.python.org/mailman/listinfo/dateutil>`_. As it is hosted by the PSF, it is subject to the `PSF code of
+conduct <https://www.python.org/psf/conduct/>`_.
+
+License
+=======
+
+All contributions after December 1, 2017 released under dual license - either `Apache 2.0 License <https://www.apache.org/licenses/LICENSE-2.0>`_ or the `BSD 3-Clause License <https://opensource.org/licenses/BSD-3-Clause>`_. Contributions before December 1, 2017 - except those those explicitly relicensed - are released only under the BSD 3-Clause License.
+
+
+.. _6B49 ACBA DCF6 BD1C A206 67AB CD54 FCE3 D964 BEFB:
+   https://pgp.mit.edu/pks/lookup?op=vindex&search=0xCD54FCE3D964BEFB
+
+
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/RECORD b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/RECORD
new file mode 100644
index 0000000..e7d2f8d
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/RECORD
@@ -0,0 +1,45 @@
+dateutil/__init__.py,sha256=lXElASqwYGwqlrSWSeX19JwF5Be9tNecDa9ebk-0gmk,222
+dateutil/__pycache__/__init__.cpython-312.pyc,,
+dateutil/__pycache__/_common.cpython-312.pyc,,
+dateutil/__pycache__/_version.cpython-312.pyc,,
+dateutil/__pycache__/easter.cpython-312.pyc,,
+dateutil/__pycache__/relativedelta.cpython-312.pyc,,
+dateutil/__pycache__/rrule.cpython-312.pyc,,
+dateutil/__pycache__/tzwin.cpython-312.pyc,,
+dateutil/__pycache__/utils.cpython-312.pyc,,
+dateutil/_common.py,sha256=77w0yytkrxlYbSn--lDVPUMabUXRR9I3lBv_vQRUqUY,932
+dateutil/_version.py,sha256=awyHv2PYvDR84dxjrHyzmm8nieFwMjcuuShPh-QNkM4,142
+dateutil/easter.py,sha256=dyBi-lKvimH1u_k6p7Z0JJK72QhqVtVBsqByvpEPKvc,2678
+dateutil/parser/__init__.py,sha256=wWk6GFuxTpjoggCGtgkceJoti4pVjl4_fHQXpNOaSYg,1766
+dateutil/parser/__pycache__/__init__.cpython-312.pyc,,
+dateutil/parser/__pycache__/_parser.cpython-312.pyc,,
+dateutil/parser/__pycache__/isoparser.cpython-312.pyc,,
+dateutil/parser/_parser.py,sha256=7klDdyicksQB_Xgl-3UAmBwzCYor1AIZqklIcT6dH_8,58796
+dateutil/parser/isoparser.py,sha256=EtLY7w22HWx-XJpTWxJD3XNs6LBHRCps77tCdLnYad8,13247
+dateutil/relativedelta.py,sha256=GjVxqpAVWnG67rdbf7pkoIlJvQqmju9NSfGCcqblc7U,24904
+dateutil/rrule.py,sha256=b6GVV4MpZDbBhJ5qitQKRyx8-_OKyeAbk57or2A8AYU,66556
+dateutil/tz/__init__.py,sha256=F-Mz13v6jYseklQf9Te9J6nzcLDmq47gORa61K35_FA,444
+dateutil/tz/__pycache__/__init__.cpython-312.pyc,,
+dateutil/tz/__pycache__/_common.cpython-312.pyc,,
+dateutil/tz/__pycache__/_factories.cpython-312.pyc,,
+dateutil/tz/__pycache__/tz.cpython-312.pyc,,
+dateutil/tz/__pycache__/win.cpython-312.pyc,,
+dateutil/tz/_common.py,sha256=cgzDTANsOXvEc86cYF77EsliuSab8Puwpsl5-bX3_S4,12977
+dateutil/tz/_factories.py,sha256=unb6XQNXrPMveksTCU-Ag8jmVZs4SojoPUcAHpWnrvU,2569
+dateutil/tz/tz.py,sha256=JotVjDcF16hzoouQ0kZW-5mCYu7Xj67NI-VQgnWapKE,62857
+dateutil/tz/win.py,sha256=xJszWgSwE1xPx_HJj4ZkepyukC_hNy016WMcXhbRaB8,12935
+dateutil/tzwin.py,sha256=7Ar4vdQCnnM0mKR3MUjbIKsZrBVfHgdwsJZc_mGYRew,59
+dateutil/utils.py,sha256=dKCchEw8eObi0loGTx91unBxm_7UGlU3v_FjFMdqwYM,1965
+dateutil/zoneinfo/__init__.py,sha256=KYg0pthCMjcp5MXSEiBJn3nMjZeNZav7rlJw5-tz1S4,5889
+dateutil/zoneinfo/__pycache__/__init__.cpython-312.pyc,,
+dateutil/zoneinfo/__pycache__/rebuild.cpython-312.pyc,,
+dateutil/zoneinfo/dateutil-zoneinfo.tar.gz,sha256=AkcdBx3XkEZwMSpS_TmOEfrEFHLvgxPNDVIwGVxTVaI,174394
+dateutil/zoneinfo/rebuild.py,sha256=MiqYzCIHvNbMH-LdRYLv-4T0EIA7hDKt5GLR0IRTLdI,2392
+python_dateutil-2.8.2.dist-info/INSTALLER,sha256=zuuue4knoyJ-UwPPXg8fezS7VCrXJQrAP7zeNuwvFQg,4
+python_dateutil-2.8.2.dist-info/LICENSE,sha256=ugD1Gg2SgjtaHN4n2LW50jIeZ-2NqbwWPv-W1eF-V34,2889
+python_dateutil-2.8.2.dist-info/METADATA,sha256=RDHtGo7BnYRjmYxot_wlu_W3N2CyvPtvchbtyIlKKPA,8218
+python_dateutil-2.8.2.dist-info/RECORD,,
+python_dateutil-2.8.2.dist-info/REQUESTED,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+python_dateutil-2.8.2.dist-info/WHEEL,sha256=Z-nyYpwrcSqxfdux5Mbn_DQ525iP7J2DG3JgGvOYyTQ,110
+python_dateutil-2.8.2.dist-info/top_level.txt,sha256=4tjdWkhRZvF7LA_BYe_L9gB2w_p2a-z5y6ArjaRkot8,9
+python_dateutil-2.8.2.dist-info/zip-safe,sha256=AbpHGcgLb-kRsJGnwFEktk7uzpZOCcBY74-YBdrKVGs,1
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/REQUESTED b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/REQUESTED
new file mode 100644
index 0000000..e69de29
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/WHEEL b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/WHEEL
new file mode 100644
index 0000000..01b8fc7
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/WHEEL
@@ -0,0 +1,6 @@
+Wheel-Version: 1.0
+Generator: bdist_wheel (0.36.2)
+Root-Is-Purelib: true
+Tag: py2-none-any
+Tag: py3-none-any
+
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/top_level.txt b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/top_level.txt
new file mode 100644
index 0000000..6650148
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/top_level.txt
@@ -0,0 +1 @@
+dateutil
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/zip-safe b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/zip-safe
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/zip-safe
@@ -0,0 +1 @@
+
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/INSTALLER b/venv/Lib/site-packages/six-1.16.0.dist-info/INSTALLER
new file mode 100644
index 0000000..a1b589e
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/INSTALLER
@@ -0,0 +1 @@
+pip
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/LICENSE b/venv/Lib/site-packages/six-1.16.0.dist-info/LICENSE
new file mode 100644
index 0000000..de66331
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/LICENSE
@@ -0,0 +1,18 @@
+Copyright (c) 2010-2020 Benjamin Peterson
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/METADATA b/venv/Lib/site-packages/six-1.16.0.dist-info/METADATA
new file mode 100644
index 0000000..6d7525c
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/METADATA
@@ -0,0 +1,49 @@
+Metadata-Version: 2.1
+Name: six
+Version: 1.16.0
+Summary: Python 2 and 3 compatibility utilities
+Home-page: https://github.com/benjaminp/six
+Author: Benjamin Peterson
+Author-email: benjamin@python.org
+License: MIT
+Platform: UNKNOWN
+Classifier: Development Status :: 5 - Production/Stable
+Classifier: Programming Language :: Python :: 2
+Classifier: Programming Language :: Python :: 3
+Classifier: Intended Audience :: Developers
+Classifier: License :: OSI Approved :: MIT License
+Classifier: Topic :: Software Development :: Libraries
+Classifier: Topic :: Utilities
+Requires-Python: >=2.7, !=3.0.*, !=3.1.*, !=3.2.*
+
+.. image:: https://img.shields.io/pypi/v/six.svg
+   :target: https://pypi.org/project/six/
+   :alt: six on PyPI
+
+.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master
+   :target: https://travis-ci.org/benjaminp/six
+   :alt: six on TravisCI
+
+.. image:: https://readthedocs.org/projects/six/badge/?version=latest
+   :target: https://six.readthedocs.io/
+   :alt: six's documentation on Read the Docs
+
+.. image:: https://img.shields.io/badge/license-MIT-green.svg
+   :target: https://github.com/benjaminp/six/blob/master/LICENSE
+   :alt: MIT License badge
+
+Six is a Python 2 and 3 compatibility library.  It provides utility functions
+for smoothing over the differences between the Python versions with the goal of
+writing Python code that is compatible on both Python versions.  See the
+documentation for more information on what is provided.
+
+Six supports Python 2.7 and 3.3+.  It is contained in only one Python
+file, so it can be easily copied into your project. (The copyright and license
+notice must be retained.)
+
+Online documentation is at https://six.readthedocs.io/.
+
+Bugs can be reported to https://github.com/benjaminp/six.  The code can also
+be found there.
+
+
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/RECORD b/venv/Lib/site-packages/six-1.16.0.dist-info/RECORD
new file mode 100644
index 0000000..2209ab3
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/RECORD
@@ -0,0 +1,8 @@
+__pycache__/six.cpython-312.pyc,,
+six-1.16.0.dist-info/INSTALLER,sha256=zuuue4knoyJ-UwPPXg8fezS7VCrXJQrAP7zeNuwvFQg,4
+six-1.16.0.dist-info/LICENSE,sha256=i7hQxWWqOJ_cFvOkaWWtI9gq3_YPI5P8J2K2MYXo5sk,1066
+six-1.16.0.dist-info/METADATA,sha256=VQcGIFCAEmfZcl77E5riPCN4v2TIsc_qtacnjxKHJoI,1795
+six-1.16.0.dist-info/RECORD,,
+six-1.16.0.dist-info/WHEEL,sha256=Z-nyYpwrcSqxfdux5Mbn_DQ525iP7J2DG3JgGvOYyTQ,110
+six-1.16.0.dist-info/top_level.txt,sha256=_iVH_iYEtEXnD8nYGQYpYFUvkUW9sEO1GYbkeKSAais,4
+six.py,sha256=TOOfQi7nFGfMrIvtdr6wX4wyHH8M7aknmuLfo2cBBrM,34549
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/WHEEL b/venv/Lib/site-packages/six-1.16.0.dist-info/WHEEL
new file mode 100644
index 0000000..01b8fc7
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/WHEEL
@@ -0,0 +1,6 @@
+Wheel-Version: 1.0
+Generator: bdist_wheel (0.36.2)
+Root-Is-Purelib: true
+Tag: py2-none-any
+Tag: py3-none-any
+
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/top_level.txt b/venv/Lib/site-packages/six-1.16.0.dist-info/top_level.txt
new file mode 100644
index 0000000..ffe2fce
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/top_level.txt
@@ -0,0 +1 @@
+six
diff --git a/venv/Lib/site-packages/six.py b/venv/Lib/site-packages/six.py
new file mode 100644
index 0000000..4e15675
--- /dev/null
+++ b/venv/Lib/site-packages/six.py
@@ -0,0 +1,998 @@
+# Copyright (c) 2010-2020 Benjamin Peterson
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in all
+# copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+# SOFTWARE.
+
+"""Utilities for writing code that runs on Python 2 and 3"""
+
+from __future__ import absolute_import
+
+import functools
+import itertools
+import operator
+import sys
+import types
+
+__author__ = "Benjamin Peterson <benjamin@python.org>"
+__version__ = "1.16.0"
+
+
+# Useful for very coarse version differentiation.
+PY2 = sys.version_info[0] == 2
+PY3 = sys.version_info[0] == 3
+PY34 = sys.version_info[0:2] >= (3, 4)
+
+if PY3:
+    string_types = str,
+    integer_types = int,
+    class_types = type,
+    text_type = str
+    binary_type = bytes
+
+    MAXSIZE = sys.maxsize
+else:
+    string_types = basestring,
+    integer_types = (int, long)
+    class_types = (type, types.ClassType)
+    text_type = unicode
+    binary_type = str
+
+    if sys.platform.startswith("java"):
+        # Jython always uses 32 bits.
+        MAXSIZE = int((1 << 31) - 1)
+    else:
+        # It's possible to have sizeof(long) != sizeof(Py_ssize_t).
+        class X(object):
+
+            def __len__(self):
+                return 1 << 31
+        try:
+            len(X())
+        except OverflowError:
+            # 32-bit
+            MAXSIZE = int((1 << 31) - 1)
+        else:
+            # 64-bit
+            MAXSIZE = int((1 << 63) - 1)
+        del X
+
+if PY34:
+    from importlib.util import spec_from_loader
+else:
+    spec_from_loader = None
+
+
+def _add_doc(func, doc):
+    """Add documentation to a function."""
+    func.__doc__ = doc
+
+
+def _import_module(name):
+    """Import module, returning the module after the last dot."""
+    __import__(name)
+    return sys.modules[name]
+
+
+class _LazyDescr(object):
+
+    def __init__(self, name):
+        self.name = name
+
+    def __get__(self, obj, tp):
+        result = self._resolve()
+        setattr(obj, self.name, result)  # Invokes __set__.
+        try:
+            # This is a bit ugly, but it avoids running this again by
+            # removing this descriptor.
+            delattr(obj.__class__, self.name)
+        except AttributeError:
+            pass
+        return result
+
+
+class MovedModule(_LazyDescr):
+
+    def __init__(self, name, old, new=None):
+        super(MovedModule, self).__init__(name)
+        if PY3:
+            if new is None:
+                new = name
+            self.mod = new
+        else:
+            self.mod = old
+
+    def _resolve(self):
+        return _import_module(self.mod)
+
+    def __getattr__(self, attr):
+        _module = self._resolve()
+        value = getattr(_module, attr)
+        setattr(self, attr, value)
+        return value
+
+
+class _LazyModule(types.ModuleType):
+
+    def __init__(self, name):
+        super(_LazyModule, self).__init__(name)
+        self.__doc__ = self.__class__.__doc__
+
+    def __dir__(self):
+        attrs = ["__doc__", "__name__"]
+        attrs += [attr.name for attr in self._moved_attributes]
+        return attrs
+
+    # Subclasses should override this
+    _moved_attributes = []
+
+
+class MovedAttribute(_LazyDescr):
+
+    def __init__(self, name, old_mod, new_mod, old_attr=None, new_attr=None):
+        super(MovedAttribute, self).__init__(name)
+        if PY3:
+            if new_mod is None:
+                new_mod = name
+            self.mod = new_mod
+            if new_attr is None:
+                if old_attr is None:
+                    new_attr = name
+                else:
+                    new_attr = old_attr
+            self.attr = new_attr
+        else:
+            self.mod = old_mod
+            if old_attr is None:
+                old_attr = name
+            self.attr = old_attr
+
+    def _resolve(self):
+        module = _import_module(self.mod)
+        return getattr(module, self.attr)
+
+
+class _SixMetaPathImporter(object):
+
+    """
+    A meta path importer to import six.moves and its submodules.
+
+    This class implements a PEP302 finder and loader. It should be compatible
+    with Python 2.5 and all existing versions of Python3
+    """
+
+    def __init__(self, six_module_name):
+        self.name = six_module_name
+        self.known_modules = {}
+
+    def _add_module(self, mod, *fullnames):
+        for fullname in fullnames:
+            self.known_modules[self.name + "." + fullname] = mod
+
+    def _get_module(self, fullname):
+        return self.known_modules[self.name + "." + fullname]
+
+    def find_module(self, fullname, path=None):
+        if fullname in self.known_modules:
+            return self
+        return None
+
+    def find_spec(self, fullname, path, target=None):
+        if fullname in self.known_modules:
+            return spec_from_loader(fullname, self)
+        return None
+
+    def __get_module(self, fullname):
+        try:
+            return self.known_modules[fullname]
+        except KeyError:
+            raise ImportError("This loader does not know module " + fullname)
+
+    def load_module(self, fullname):
+        try:
+            # in case of a reload
+            return sys.modules[fullname]
+        except KeyError:
+            pass
+        mod = self.__get_module(fullname)
+        if isinstance(mod, MovedModule):
+            mod = mod._resolve()
+        else:
+            mod.__loader__ = self
+        sys.modules[fullname] = mod
+        return mod
+
+    def is_package(self, fullname):
+        """
+        Return true, if the named module is a package.
+
+        We need this method to get correct spec objects with
+        Python 3.4 (see PEP451)
+        """
+        return hasattr(self.__get_module(fullname), "__path__")
+
+    def get_code(self, fullname):
+        """Return None
+
+        Required, if is_package is implemented"""
+        self.__get_module(fullname)  # eventually raises ImportError
+        return None
+    get_source = get_code  # same as get_code
+
+    def create_module(self, spec):
+        return self.load_module(spec.name)
+
+    def exec_module(self, module):
+        pass
+
+_importer = _SixMetaPathImporter(__name__)
+
+
+class _MovedItems(_LazyModule):
+
+    """Lazy loading of moved objects"""
+    __path__ = []  # mark as package
+
+
+_moved_attributes = [
+    MovedAttribute("cStringIO", "cStringIO", "io", "StringIO"),
+    MovedAttribute("filter", "itertools", "builtins", "ifilter", "filter"),
+    MovedAttribute("filterfalse", "itertools", "itertools", "ifilterfalse", "filterfalse"),
+    MovedAttribute("input", "__builtin__", "builtins", "raw_input", "input"),
+    MovedAttribute("intern", "__builtin__", "sys"),
+    MovedAttribute("map", "itertools", "builtins", "imap", "map"),
+    MovedAttribute("getcwd", "os", "os", "getcwdu", "getcwd"),
+    MovedAttribute("getcwdb", "os", "os", "getcwd", "getcwdb"),
+    MovedAttribute("getoutput", "commands", "subprocess"),
+    MovedAttribute("range", "__builtin__", "builtins", "xrange", "range"),
+    MovedAttribute("reload_module", "__builtin__", "importlib" if PY34 else "imp", "reload"),
+    MovedAttribute("reduce", "__builtin__", "functools"),
+    MovedAttribute("shlex_quote", "pipes", "shlex", "quote"),
+    MovedAttribute("StringIO", "StringIO", "io"),
+    MovedAttribute("UserDict", "UserDict", "collections"),
+    MovedAttribute("UserList", "UserList", "collections"),
+    MovedAttribute("UserString", "UserString", "collections"),
+    MovedAttribute("xrange", "__builtin__", "builtins", "xrange", "range"),
+    MovedAttribute("zip", "itertools", "builtins", "izip", "zip"),
+    MovedAttribute("zip_longest", "itertools", "itertools", "izip_longest", "zip_longest"),
+    MovedModule("builtins", "__builtin__"),
+    MovedModule("configparser", "ConfigParser"),
+    MovedModule("collections_abc", "collections", "collections.abc" if sys.version_info >= (3, 3) else "collections"),
+    MovedModule("copyreg", "copy_reg"),
+    MovedModule("dbm_gnu", "gdbm", "dbm.gnu"),
+    MovedModule("dbm_ndbm", "dbm", "dbm.ndbm"),
+    MovedModule("_dummy_thread", "dummy_thread", "_dummy_thread" if sys.version_info < (3, 9) else "_thread"),
+    MovedModule("http_cookiejar", "cookielib", "http.cookiejar"),
+    MovedModule("http_cookies", "Cookie", "http.cookies"),
+    MovedModule("html_entities", "htmlentitydefs", "html.entities"),
+    MovedModule("html_parser", "HTMLParser", "html.parser"),
+    MovedModule("http_client", "httplib", "http.client"),
+    MovedModule("email_mime_base", "email.MIMEBase", "email.mime.base"),
+    MovedModule("email_mime_image", "email.MIMEImage", "email.mime.image"),
+    MovedModule("email_mime_multipart", "email.MIMEMultipart", "email.mime.multipart"),
+    MovedModule("email_mime_nonmultipart", "email.MIMENonMultipart", "email.mime.nonmultipart"),
+    MovedModule("email_mime_text", "email.MIMEText", "email.mime.text"),
+    MovedModule("BaseHTTPServer", "BaseHTTPServer", "http.server"),
+    MovedModule("CGIHTTPServer", "CGIHTTPServer", "http.server"),
+    MovedModule("SimpleHTTPServer", "SimpleHTTPServer", "http.server"),
+    MovedModule("cPickle", "cPickle", "pickle"),
+    MovedModule("queue", "Queue"),
+    MovedModule("reprlib", "repr"),
+    MovedModule("socketserver", "SocketServer"),
+    MovedModule("_thread", "thread", "_thread"),
+    MovedModule("tkinter", "Tkinter"),
+    MovedModule("tkinter_dialog", "Dialog", "tkinter.dialog"),
+    MovedModule("tkinter_filedialog", "FileDialog", "tkinter.filedialog"),
+    MovedModule("tkinter_scrolledtext", "ScrolledText", "tkinter.scrolledtext"),
+    MovedModule("tkinter_simpledialog", "SimpleDialog", "tkinter.simpledialog"),
+    MovedModule("tkinter_tix", "Tix", "tkinter.tix"),
+    MovedModule("tkinter_ttk", "ttk", "tkinter.ttk"),
+    MovedModule("tkinter_constants", "Tkconstants", "tkinter.constants"),
+    MovedModule("tkinter_dnd", "Tkdnd", "tkinter.dnd"),
+    MovedModule("tkinter_colorchooser", "tkColorChooser",
+                "tkinter.colorchooser"),
+    MovedModule("tkinter_commondialog", "tkCommonDialog",
+                "tkinter.commondialog"),
+    MovedModule("tkinter_tkfiledialog", "tkFileDialog", "tkinter.filedialog"),
+    MovedModule("tkinter_font", "tkFont", "tkinter.font"),
+    MovedModule("tkinter_messagebox", "tkMessageBox", "tkinter.messagebox"),
+    MovedModule("tkinter_tksimpledialog", "tkSimpleDialog",
+                "tkinter.simpledialog"),
+    MovedModule("urllib_parse", __name__ + ".moves.urllib_parse", "urllib.parse"),
+    MovedModule("urllib_error", __name__ + ".moves.urllib_error", "urllib.error"),
+    MovedModule("urllib", __name__ + ".moves.urllib", __name__ + ".moves.urllib"),
+    MovedModule("urllib_robotparser", "robotparser", "urllib.robotparser"),
+    MovedModule("xmlrpc_client", "xmlrpclib", "xmlrpc.client"),
+    MovedModule("xmlrpc_server", "SimpleXMLRPCServer", "xmlrpc.server"),
+]
+# Add windows specific modules.
+if sys.platform == "win32":
+    _moved_attributes += [
+        MovedModule("winreg", "_winreg"),
+    ]
+
+for attr in _moved_attributes:
+    setattr(_MovedItems, attr.name, attr)
+    if isinstance(attr, MovedModule):
+        _importer._add_module(attr, "moves." + attr.name)
+del attr
+
+_MovedItems._moved_attributes = _moved_attributes
+
+moves = _MovedItems(__name__ + ".moves")
+_importer._add_module(moves, "moves")
+
+
+class Module_six_moves_urllib_parse(_LazyModule):
+
+    """Lazy loading of moved objects in six.moves.urllib_parse"""
+
+
+_urllib_parse_moved_attributes = [
+    MovedAttribute("ParseResult", "urlparse", "urllib.parse"),
+    MovedAttribute("SplitResult", "urlparse", "urllib.parse"),
+    MovedAttribute("parse_qs", "urlparse", "urllib.parse"),
+    MovedAttribute("parse_qsl", "urlparse", "urllib.parse"),
+    MovedAttribute("urldefrag", "urlparse", "urllib.parse"),
+    MovedAttribute("urljoin", "urlparse", "urllib.parse"),
+    MovedAttribute("urlparse", "urlparse", "urllib.parse"),
+    MovedAttribute("urlsplit", "urlparse", "urllib.parse"),
+    MovedAttribute("urlunparse", "urlparse", "urllib.parse"),
+    MovedAttribute("urlunsplit", "urlparse", "urllib.parse"),
+    MovedAttribute("quote", "urllib", "urllib.parse"),
+    MovedAttribute("quote_plus", "urllib", "urllib.parse"),
+    MovedAttribute("unquote", "urllib", "urllib.parse"),
+    MovedAttribute("unquote_plus", "urllib", "urllib.parse"),
+    MovedAttribute("unquote_to_bytes", "urllib", "urllib.parse", "unquote", "unquote_to_bytes"),
+    MovedAttribute("urlencode", "urllib", "urllib.parse"),
+    MovedAttribute("splitquery", "urllib", "urllib.parse"),
+    MovedAttribute("splittag", "urllib", "urllib.parse"),
+    MovedAttribute("splituser", "urllib", "urllib.parse"),
+    MovedAttribute("splitvalue", "urllib", "urllib.parse"),
+    MovedAttribute("uses_fragment", "urlparse", "urllib.parse"),
+    MovedAttribute("uses_netloc", "urlparse", "urllib.parse"),
+    MovedAttribute("uses_params", "urlparse", "urllib.parse"),
+    MovedAttribute("uses_query", "urlparse", "urllib.parse"),
+    MovedAttribute("uses_relative", "urlparse", "urllib.parse"),
+]
+for attr in _urllib_parse_moved_attributes:
+    setattr(Module_six_moves_urllib_parse, attr.name, attr)
+del attr
+
+Module_six_moves_urllib_parse._moved_attributes = _urllib_parse_moved_attributes
+
+_importer._add_module(Module_six_moves_urllib_parse(__name__ + ".moves.urllib_parse"),
+                      "moves.urllib_parse", "moves.urllib.parse")
+
+
+class Module_six_moves_urllib_error(_LazyModule):
+
+    """Lazy loading of moved objects in six.moves.urllib_error"""
+
+
+_urllib_error_moved_attributes = [
+    MovedAttribute("URLError", "urllib2", "urllib.error"),
+    MovedAttribute("HTTPError", "urllib2", "urllib.error"),
+    MovedAttribute("ContentTooShortError", "urllib", "urllib.error"),
+]
+for attr in _urllib_error_moved_attributes:
+    setattr(Module_six_moves_urllib_error, attr.name, attr)
+del attr
+
+Module_six_moves_urllib_error._moved_attributes = _urllib_error_moved_attributes
+
+_importer._add_module(Module_six_moves_urllib_error(__name__ + ".moves.urllib.error"),
+                      "moves.urllib_error", "moves.urllib.error")
+
+
+class Module_six_moves_urllib_request(_LazyModule):
+
+    """Lazy loading of moved objects in six.moves.urllib_request"""
+
+
+_urllib_request_moved_attributes = [
+    MovedAttribute("urlopen", "urllib2", "urllib.request"),
+    MovedAttribute("install_opener", "urllib2", "urllib.request"),
+    MovedAttribute("build_opener", "urllib2", "urllib.request"),
+    MovedAttribute("pathname2url", "urllib", "urllib.request"),
+    MovedAttribute("url2pathname", "urllib", "urllib.request"),
+    MovedAttribute("getproxies", "urllib", "urllib.request"),
+    MovedAttribute("Request", "urllib2", "urllib.request"),
+    MovedAttribute("OpenerDirector", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPDefaultErrorHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPRedirectHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPCookieProcessor", "urllib2", "urllib.request"),
+    MovedAttribute("ProxyHandler", "urllib2", "urllib.request"),
+    MovedAttribute("BaseHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPPasswordMgr", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPPasswordMgrWithDefaultRealm", "urllib2", "urllib.request"),
+    MovedAttribute("AbstractBasicAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPBasicAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("ProxyBasicAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("AbstractDigestAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPDigestAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("ProxyDigestAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPSHandler", "urllib2", "urllib.request"),
+    MovedAttribute("FileHandler", "urllib2", "urllib.request"),
+    MovedAttribute("FTPHandler", "urllib2", "urllib.request"),
+    MovedAttribute("CacheFTPHandler", "urllib2", "urllib.request"),
+    MovedAttribute("UnknownHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPErrorProcessor", "urllib2", "urllib.request"),
+    MovedAttribute("urlretrieve", "urllib", "urllib.request"),
+    MovedAttribute("urlcleanup", "urllib", "urllib.request"),
+    MovedAttribute("URLopener", "urllib", "urllib.request"),
+    MovedAttribute("FancyURLopener", "urllib", "urllib.request"),
+    MovedAttribute("proxy_bypass", "urllib", "urllib.request"),
+    MovedAttribute("parse_http_list", "urllib2", "urllib.request"),
+    MovedAttribute("parse_keqv_list", "urllib2", "urllib.request"),
+]
+for attr in _urllib_request_moved_attributes:
+    setattr(Module_six_moves_urllib_request, attr.name, attr)
+del attr
+
+Module_six_moves_urllib_request._moved_attributes = _urllib_request_moved_attributes
+
+_importer._add_module(Module_six_moves_urllib_request(__name__ + ".moves.urllib.request"),
+                      "moves.urllib_request", "moves.urllib.request")
+
+
+class Module_six_moves_urllib_response(_LazyModule):
+
+    """Lazy loading of moved objects in six.moves.urllib_response"""
+
+
+_urllib_response_moved_attributes = [
+    MovedAttribute("addbase", "urllib", "urllib.response"),
+    MovedAttribute("addclosehook", "urllib", "urllib.response"),
+    MovedAttribute("addinfo", "urllib", "urllib.response"),
+    MovedAttribute("addinfourl", "urllib", "urllib.response"),
+]
+for attr in _urllib_response_moved_attributes:
+    setattr(Module_six_moves_urllib_response, attr.name, attr)
+del attr
+
+Module_six_moves_urllib_response._moved_attributes = _urllib_response_moved_attributes
+
+_importer._add_module(Module_six_moves_urllib_response(__name__ + ".moves.urllib.response"),
+                      "moves.urllib_response", "moves.urllib.response")
+
+
+class Module_six_moves_urllib_robotparser(_LazyModule):
+
+    """Lazy loading of moved objects in six.moves.urllib_robotparser"""
+
+
+_urllib_robotparser_moved_attributes = [
+    MovedAttribute("RobotFileParser", "robotparser", "urllib.robotparser"),
+]
+for attr in _urllib_robotparser_moved_attributes:
+    setattr(Module_six_moves_urllib_robotparser, attr.name, attr)
+del attr
+
+Module_six_moves_urllib_robotparser._moved_attributes = _urllib_robotparser_moved_attributes
+
+_importer._add_module(Module_six_moves_urllib_robotparser(__name__ + ".moves.urllib.robotparser"),
+                      "moves.urllib_robotparser", "moves.urllib.robotparser")
+
+
+class Module_six_moves_urllib(types.ModuleType):
+
+    """Create a six.moves.urllib namespace that resembles the Python 3 namespace"""
+    __path__ = []  # mark as package
+    parse = _importer._get_module("moves.urllib_parse")
+    error = _importer._get_module("moves.urllib_error")
+    request = _importer._get_module("moves.urllib_request")
+    response = _importer._get_module("moves.urllib_response")
+    robotparser = _importer._get_module("moves.urllib_robotparser")
+
+    def __dir__(self):
+        return ['parse', 'error', 'request', 'response', 'robotparser']
+
+_importer._add_module(Module_six_moves_urllib(__name__ + ".moves.urllib"),
+                      "moves.urllib")
+
+
+def add_move(move):
+    """Add an item to six.moves."""
+    setattr(_MovedItems, move.name, move)
+
+
+def remove_move(name):
+    """Remove item from six.moves."""
+    try:
+        delattr(_MovedItems, name)
+    except AttributeError:
+        try:
+            del moves.__dict__[name]
+        except KeyError:
+            raise AttributeError("no such move, %r" % (name,))
+
+
+if PY3:
+    _meth_func = "__func__"
+    _meth_self = "__self__"
+
+    _func_closure = "__closure__"
+    _func_code = "__code__"
+    _func_defaults = "__defaults__"
+    _func_globals = "__globals__"
+else:
+    _meth_func = "im_func"
+    _meth_self = "im_self"
+
+    _func_closure = "func_closure"
+    _func_code = "func_code"
+    _func_defaults = "func_defaults"
+    _func_globals = "func_globals"
+
+
+try:
+    advance_iterator = next
+except NameError:
+    def advance_iterator(it):
+        return it.next()
+next = advance_iterator
+
+
+try:
+    callable = callable
+except NameError:
+    def callable(obj):
+        return any("__call__" in klass.__dict__ for klass in type(obj).__mro__)
+
+
+if PY3:
+    def get_unbound_function(unbound):
+        return unbound
+
+    create_bound_method = types.MethodType
+
+    def create_unbound_method(func, cls):
+        return func
+
+    Iterator = object
+else:
+    def get_unbound_function(unbound):
+        return unbound.im_func
+
+    def create_bound_method(func, obj):
+        return types.MethodType(func, obj, obj.__class__)
+
+    def create_unbound_method(func, cls):
+        return types.MethodType(func, None, cls)
+
+    class Iterator(object):
+
+        def next(self):
+            return type(self).__next__(self)
+
+    callable = callable
+_add_doc(get_unbound_function,
+         """Get the function out of a possibly unbound function""")
+
+
+get_method_function = operator.attrgetter(_meth_func)
+get_method_self = operator.attrgetter(_meth_self)
+get_function_closure = operator.attrgetter(_func_closure)
+get_function_code = operator.attrgetter(_func_code)
+get_function_defaults = operator.attrgetter(_func_defaults)
+get_function_globals = operator.attrgetter(_func_globals)
+
+
+if PY3:
+    def iterkeys(d, **kw):
+        return iter(d.keys(**kw))
+
+    def itervalues(d, **kw):
+        return iter(d.values(**kw))
+
+    def iteritems(d, **kw):
+        return iter(d.items(**kw))
+
+    def iterlists(d, **kw):
+        return iter(d.lists(**kw))
+
+    viewkeys = operator.methodcaller("keys")
+
+    viewvalues = operator.methodcaller("values")
+
+    viewitems = operator.methodcaller("items")
+else:
+    def iterkeys(d, **kw):
+        return d.iterkeys(**kw)
+
+    def itervalues(d, **kw):
+        return d.itervalues(**kw)
+
+    def iteritems(d, **kw):
+        return d.iteritems(**kw)
+
+    def iterlists(d, **kw):
+        return d.iterlists(**kw)
+
+    viewkeys = operator.methodcaller("viewkeys")
+
+    viewvalues = operator.methodcaller("viewvalues")
+
+    viewitems = operator.methodcaller("viewitems")
+
+_add_doc(iterkeys, "Return an iterator over the keys of a dictionary.")
+_add_doc(itervalues, "Return an iterator over the values of a dictionary.")
+_add_doc(iteritems,
+         "Return an iterator over the (key, value) pairs of a dictionary.")
+_add_doc(iterlists,
+         "Return an iterator over the (key, [values]) pairs of a dictionary.")
+
+
+if PY3:
+    def b(s):
+        return s.encode("latin-1")
+
+    def u(s):
+        return s
+    unichr = chr
+    import struct
+    int2byte = struct.Struct(">B").pack
+    del struct
+    byte2int = operator.itemgetter(0)
+    indexbytes = operator.getitem
+    iterbytes = iter
+    import io
+    StringIO = io.StringIO
+    BytesIO = io.BytesIO
+    del io
+    _assertCountEqual = "assertCountEqual"
+    if sys.version_info[1] <= 1:
+        _assertRaisesRegex = "assertRaisesRegexp"
+        _assertRegex = "assertRegexpMatches"
+        _assertNotRegex = "assertNotRegexpMatches"
+    else:
+        _assertRaisesRegex = "assertRaisesRegex"
+        _assertRegex = "assertRegex"
+        _assertNotRegex = "assertNotRegex"
+else:
+    def b(s):
+        return s
+    # Workaround for standalone backslash
+
+    def u(s):
+        return unicode(s.replace(r'\\', r'\\\\'), "unicode_escape")
+    unichr = unichr
+    int2byte = chr
+
+    def byte2int(bs):
+        return ord(bs[0])
+
+    def indexbytes(buf, i):
+        return ord(buf[i])
+    iterbytes = functools.partial(itertools.imap, ord)
+    import StringIO
+    StringIO = BytesIO = StringIO.StringIO
+    _assertCountEqual = "assertItemsEqual"
+    _assertRaisesRegex = "assertRaisesRegexp"
+    _assertRegex = "assertRegexpMatches"
+    _assertNotRegex = "assertNotRegexpMatches"
+_add_doc(b, """Byte literal""")
+_add_doc(u, """Text literal""")
+
+
+def assertCountEqual(self, *args, **kwargs):
+    return getattr(self, _assertCountEqual)(*args, **kwargs)
+
+
+def assertRaisesRegex(self, *args, **kwargs):
+    return getattr(self, _assertRaisesRegex)(*args, **kwargs)
+
+
+def assertRegex(self, *args, **kwargs):
+    return getattr(self, _assertRegex)(*args, **kwargs)
+
+
+def assertNotRegex(self, *args, **kwargs):
+    return getattr(self, _assertNotRegex)(*args, **kwargs)
+
+
+if PY3:
+    exec_ = getattr(moves.builtins, "exec")
+
+    def reraise(tp, value, tb=None):
+        try:
+            if value is None:
+                value = tp()
+            if value.__traceback__ is not tb:
+                raise value.with_traceback(tb)
+            raise value
+        finally:
+            value = None
+            tb = None
+
+else:
+    def exec_(_code_, _globs_=None, _locs_=None):
+        """Execute code in a namespace."""
+        if _globs_ is None:
+            frame = sys._getframe(1)
+            _globs_ = frame.f_globals
+            if _locs_ is None:
+                _locs_ = frame.f_locals
+            del frame
+        elif _locs_ is None:
+            _locs_ = _globs_
+        exec("""exec _code_ in _globs_, _locs_""")
+
+    exec_("""def reraise(tp, value, tb=None):
+    try:
+        raise tp, value, tb
+    finally:
+        tb = None
+""")
+
+
+if sys.version_info[:2] > (3,):
+    exec_("""def raise_from(value, from_value):
+    try:
+        raise value from from_value
+    finally:
+        value = None
+""")
+else:
+    def raise_from(value, from_value):
+        raise value
+
+
+print_ = getattr(moves.builtins, "print", None)
+if print_ is None:
+    def print_(*args, **kwargs):
+        """The new-style print function for Python 2.4 and 2.5."""
+        fp = kwargs.pop("file", sys.stdout)
+        if fp is None:
+            return
+
+        def write(data):
+            if not isinstance(data, basestring):
+                data = str(data)
+            # If the file has an encoding, encode unicode with it.
+            if (isinstance(fp, file) and
+                    isinstance(data, unicode) and
+                    fp.encoding is not None):
+                errors = getattr(fp, "errors", None)
+                if errors is None:
+                    errors = "strict"
+                data = data.encode(fp.encoding, errors)
+            fp.write(data)
+        want_unicode = False
+        sep = kwargs.pop("sep", None)
+        if sep is not None:
+            if isinstance(sep, unicode):
+                want_unicode = True
+            elif not isinstance(sep, str):
+                raise TypeError("sep must be None or a string")
+        end = kwargs.pop("end", None)
+        if end is not None:
+            if isinstance(end, unicode):
+                want_unicode = True
+            elif not isinstance(end, str):
+                raise TypeError("end must be None or a string")
+        if kwargs:
+            raise TypeError("invalid keyword arguments to print()")
+        if not want_unicode:
+            for arg in args:
+                if isinstance(arg, unicode):
+                    want_unicode = True
+                    break
+        if want_unicode:
+            newline = unicode("\n")
+            space = unicode(" ")
+        else:
+            newline = "\n"
+            space = " "
+        if sep is None:
+            sep = space
+        if end is None:
+            end = newline
+        for i, arg in enumerate(args):
+            if i:
+                write(sep)
+            write(arg)
+        write(end)
+if sys.version_info[:2] < (3, 3):
+    _print = print_
+
+    def print_(*args, **kwargs):
+        fp = kwargs.get("file", sys.stdout)
+        flush = kwargs.pop("flush", False)
+        _print(*args, **kwargs)
+        if flush and fp is not None:
+            fp.flush()
+
+_add_doc(reraise, """Reraise an exception.""")
+
+if sys.version_info[0:2] < (3, 4):
+    # This does exactly the same what the :func:`py3:functools.update_wrapper`
+    # function does on Python versions after 3.2. It sets the ``__wrapped__``
+    # attribute on ``wrapper`` object and it doesn't raise an error if any of
+    # the attributes mentioned in ``assigned`` and ``updated`` are missing on
+    # ``wrapped`` object.
+    def _update_wrapper(wrapper, wrapped,
+                        assigned=functools.WRAPPER_ASSIGNMENTS,
+                        updated=functools.WRAPPER_UPDATES):
+        for attr in assigned:
+            try:
+                value = getattr(wrapped, attr)
+            except AttributeError:
+                continue
+            else:
+                setattr(wrapper, attr, value)
+        for attr in updated:
+            getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
+        wrapper.__wrapped__ = wrapped
+        return wrapper
+    _update_wrapper.__doc__ = functools.update_wrapper.__doc__
+
+    def wraps(wrapped, assigned=functools.WRAPPER_ASSIGNMENTS,
+              updated=functools.WRAPPER_UPDATES):
+        return functools.partial(_update_wrapper, wrapped=wrapped,
+                                 assigned=assigned, updated=updated)
+    wraps.__doc__ = functools.wraps.__doc__
+
+else:
+    wraps = functools.wraps
+
+
+def with_metaclass(meta, *bases):
+    """Create a base class with a metaclass."""
+    # This requires a bit of explanation: the basic idea is to make a dummy
+    # metaclass for one level of class instantiation that replaces itself with
+    # the actual metaclass.
+    class metaclass(type):
+
+        def __new__(cls, name, this_bases, d):
+            if sys.version_info[:2] >= (3, 7):
+                # This version introduced PEP 560 that requires a bit
+                # of extra care (we mimic what is done by __build_class__).
+                resolved_bases = types.resolve_bases(bases)
+                if resolved_bases is not bases:
+                    d['__orig_bases__'] = bases
+            else:
+                resolved_bases = bases
+            return meta(name, resolved_bases, d)
+
+        @classmethod
+        def __prepare__(cls, name, this_bases):
+            return meta.__prepare__(name, bases)
+    return type.__new__(metaclass, 'temporary_class', (), {})
+
+
+def add_metaclass(metaclass):
+    """Class decorator for creating a class with a metaclass."""
+    def wrapper(cls):
+        orig_vars = cls.__dict__.copy()
+        slots = orig_vars.get('__slots__')
+        if slots is not None:
+            if isinstance(slots, str):
+                slots = [slots]
+            for slots_var in slots:
+                orig_vars.pop(slots_var)
+        orig_vars.pop('__dict__', None)
+        orig_vars.pop('__weakref__', None)
+        if hasattr(cls, '__qualname__'):
+            orig_vars['__qualname__'] = cls.__qualname__
+        return metaclass(cls.__name__, cls.__bases__, orig_vars)
+    return wrapper
+
+
+def ensure_binary(s, encoding='utf-8', errors='strict'):
+    """Coerce **s** to six.binary_type.
+
+    For Python 2:
+      - `unicode` -> encoded to `str`
+      - `str` -> `str`
+
+    For Python 3:
+      - `str` -> encoded to `bytes`
+      - `bytes` -> `bytes`
+    """
+    if isinstance(s, binary_type):
+        return s
+    if isinstance(s, text_type):
+        return s.encode(encoding, errors)
+    raise TypeError("not expecting type '%s'" % type(s))
+
+
+def ensure_str(s, encoding='utf-8', errors='strict'):
+    """Coerce *s* to `str`.
+
+    For Python 2:
+      - `unicode` -> encoded to `str`
+      - `str` -> `str`
+
+    For Python 3:
+      - `str` -> `str`
+      - `bytes` -> decoded to `str`
+    """
+    # Optimization: Fast return for the common case.
+    if type(s) is str:
+        return s
+    if PY2 and isinstance(s, text_type):
+        return s.encode(encoding, errors)
+    elif PY3 and isinstance(s, binary_type):
+        return s.decode(encoding, errors)
+    elif not isinstance(s, (text_type, binary_type)):
+        raise TypeError("not expecting type '%s'" % type(s))
+    return s
+
+
+def ensure_text(s, encoding='utf-8', errors='strict'):
+    """Coerce *s* to six.text_type.
+
+    For Python 2:
+      - `unicode` -> `unicode`
+      - `str` -> `unicode`
+
+    For Python 3:
+      - `str` -> `str`
+      - `bytes` -> decoded to `str`
+    """
+    if isinstance(s, binary_type):
+        return s.decode(encoding, errors)
+    elif isinstance(s, text_type):
+        return s
+    else:
+        raise TypeError("not expecting type '%s'" % type(s))
+
+
+def python_2_unicode_compatible(klass):
+    """
+    A class decorator that defines __unicode__ and __str__ methods under Python 2.
+    Under Python 3 it does nothing.
+
+    To support Python 2 and 3 with a single code base, define a __str__ method
+    returning text and apply this decorator to the class.
+    """
+    if PY2:
+        if '__str__' not in klass.__dict__:
+            raise ValueError("@python_2_unicode_compatible cannot be applied "
+                             "to %s because it doesn't define __str__()." %
+                             klass.__name__)
+        klass.__unicode__ = klass.__str__
+        klass.__str__ = lambda self: self.__unicode__().encode('utf-8')
+    return klass
+
+
+# Complete the moves implementation.
+# This code is at the end of this module to speed up module loading.
+# Turn this module into a package.
+__path__ = []  # required for PEP 302 and PEP 451
+__package__ = __name__  # see PEP 366 @ReservedAssignment
+if globals().get("__spec__") is not None:
+    __spec__.submodule_search_locations = []  # PEP 451 @UndefinedVariable
+# Remove other six meta path importers, since they cause problems. This can
+# happen if six is removed from sys.modules and then reloaded. (Setuptools does
+# this for some reason.)
+if sys.meta_path:
+    for i, importer in enumerate(sys.meta_path):
+        # Here's some real nastiness: Another "instance" of the six module might
+        # be floating around. Therefore, we can't use isinstance() to check for
+        # the six meta path importer, since the other six instance will have
+        # inserted an importer with different class.
+        if (type(importer).__name__ == "_SixMetaPathImporter" and
+                importer.name == __name__):
+            del sys.meta_path[i]
+            break
+    del i, importer
+# Finally, add the importer to the meta path import hook.
+sys.meta_path.append(_importer)
-- 
2.45.1.windows.1

